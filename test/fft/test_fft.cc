#include <gtest/gtest.h>

#include <fstream>

#include "complex.h"
#include "fft/fft_op.h"
#include "matrix/matrix.h"
#include "utils.h"

TEST(FftTest, zachu_seq) {
  mega::Matrix zachu_out = mega::zadoff_chu_sequence(32);
  mega::Matrix zachu_ref(sizeof(mega::Complex), 31,
                         mega::Matrix::kHost);  // Generated by Matlab

  std::ifstream input("../../../test/fft/zachu.data", std::ios::binary);
  input.seekg(0, std::ios::end);
  size_t fileSize = input.tellg();
  input.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, zachu_ref.szBytes());
  input.read(zachu_ref.ptr<char>(), fileSize);
  input.close();

  mega::Complex *zachu_out_ptr = zachu_out.ptr<mega::Complex>();
  mega::Complex *zachu_ref_ptr = zachu_ref.ptr<mega::Complex>();
  for (int i = 0; i < 31; i++) {
    EXPECT_NEAR(zachu_out_ptr[i].re, zachu_ref_ptr[i].re, 1e-5);
    EXPECT_NEAR(zachu_out_ptr[i].im, zachu_ref_ptr[i].im, 1e-5);
  }
}

TEST(FftTest, zachu_shift) {
  mega::Matrix zachu_out = mega::zadoff_chu_sequence(16);
  mega::cyclic_shift(zachu_out, zachu_out, M_PI / 4);
  mega::Matrix zachu_ref(sizeof(mega::Complex), 16,
                         mega::Matrix::kHost);  // Generated by Matlab

  std::ifstream input("../../../test/fft/zachu_shift.data", std::ios::binary);
  input.seekg(0, std::ios::end);
  size_t fileSize = input.tellg();
  input.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, zachu_ref.szBytes());
  input.read(zachu_ref.ptr<char>(), fileSize);
  input.close();

  mega::Complex *zachu_out_ptr = zachu_out.ptr<mega::Complex>();
  mega::Complex *zachu_ref_ptr = zachu_ref.ptr<mega::Complex>();
  for (int i = 0; i < 16; i++) {
    EXPECT_NEAR(zachu_out_ptr[i].re, zachu_ref_ptr[i].re, 1e-5);
    EXPECT_NEAR(zachu_out_ptr[i].im, zachu_ref_ptr[i].im, 1e-5);
  }
}

TEST(FftTest, pilot_fft) {
  uint32_t ue = 4, bs = 8, ofdm = 32, ofdms = 16;
  mega::Matrix h_in(2 * sizeof(short), ofdm, bs, mega::Matrix::kHost);
  mega::Matrix d_in(2 * sizeof(short), ofdm, bs, mega::Matrix::kDevice);

  mega::Matrix h_out(sizeof(mega::Complex), ofdms, bs,
                     mega::Matrix::kHost);  // 16 * 4
  mega::Matrix d_out(sizeof(mega::Complex), ofdms, bs,
                     mega::Matrix::kDevice);  // 16 * 4

  mega::Matrix h_ref(sizeof(mega::Complex), ue, bs, ofdms / ue,
                     mega::Matrix::kHost);  // Generated by Matlab & numpy

  std::ifstream input("../../../test/fft/short_in.data", std::ios::binary);
  input.seekg(0, std::ios::end);
  size_t fileSize = input.tellg();
  input.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, h_in.szBytes());
  input.read(h_in.ptr<char>(), fileSize);
  input.close();

  std::ifstream output("../../../test/fft/complex_out.data", std::ios::binary);
  output.seekg(0, std::ios::end);
  fileSize = output.tellg();
  output.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, h_ref.szBytes());
  output.read(h_ref.ptr<char>(), fileSize);
  output.close();

  cudaMemcpy(d_in.ptr(), h_in.ptr(), h_in.szBytes(), cudaMemcpyHostToDevice);

  mega::PilotSign::init(ofdms);
  mega::PilotFFT fft(8, ofdm, ofdms, bs, ue, ue);
  fft(d_in, d_out);

  cudaMemcpy(h_out.ptr(), d_out.ptr(), h_out.szBytes(), cudaMemcpyDeviceToHost);

  // mega::Matrix h_out_tranc = fft.ref(h_out);

  mega::Complex *h_out_ptr = h_out.ptr<mega::Complex>();
  mega::Complex *h_ref_ptr = h_ref.ptr<mega::Complex>();
  for (int i = 0; i < bs * ofdms; i++) {
    EXPECT_NEAR(h_out_ptr[i].re, h_ref_ptr[i].re, 1e-4);
    EXPECT_NEAR(h_out_ptr[i].im, h_ref_ptr[i].im, 1e-4);
  }

  mega::PilotSign::destroy();
}

TEST(FftTest, uplink_fft) {
  mega::Matrix h_in(2 * sizeof(short), 32, 8, mega::Matrix::kHost);
  mega::Matrix d_in(2 * sizeof(short), 32, 8, mega::Matrix::kDevice);

  std::ifstream input("../../../test/fft/fft_in.data", std::ios::binary);
  input.seekg(0, std::ios::end);
  size_t fileSize = input.tellg();
  input.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, h_in.szBytes());
  input.read(h_in.ptr<char>(), fileSize);
  input.close();

  cudaMemcpy(d_in.ptr(), h_in.ptr(), h_in.szBytes(), cudaMemcpyHostToDevice);

  mega::Matrix d_out(sizeof(mega::Complex), 16, 8, mega::Matrix::kDevice);
  mega::Matrix h_out(sizeof(mega::Complex), 16, 8, mega::Matrix::kHost);
  mega::Matrix h_ref(sizeof(mega::Complex), 8, 16,
                     mega::Matrix::kHost);  // Generated by Matlab & numpy

  std::ifstream output("../../../test/fft/fft_out.data", std::ios::binary);
  output.seekg(0, std::ios::end);
  fileSize = output.tellg();
  output.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, h_ref.szBytes());
  output.read(h_ref.ptr<char>(), fileSize);
  output.close();

  mega::UplinkFFT fft(8, 32, 16, 8);
  fft(d_in, d_out);

  cudaMemcpy(h_out.ptr(), d_out.ptr(), h_out.szBytes(), cudaMemcpyDeviceToHost);

  // mega::Matrix h_out_tranc = fft.ref(h_out);
  for (int i = 0; i < 16; i++) {
    // mega::Complex *h_out_ptr = h_out[i].ptr<mega::Complex>();
    mega::Complex *h_ref_ptr = h_ref[i].ptr<mega::Complex>();
    for (int j = 0; j < 8; j++) {
      EXPECT_NEAR(h_out[j][i].ptr<mega::Complex>()->re, h_ref_ptr[j].re, 1e-5);
      EXPECT_NEAR(h_out[j][i].ptr<mega::Complex>()->im, h_ref_ptr[j].im, 1e-5);
    }
  }

  for (int i = 0; i < 8; i++) {
    mega::Complex *h_out_ptr = h_out[i].ptr<mega::Complex>();
    for (int j = 0; j < 16; j++) {
      h_out_ptr[j] = mega::Complex(0, 0);
    }
  }

  cudaMemcpy(d_out.ptr(), h_out.ptr(), h_in.szBytes(), cudaMemcpyHostToDevice);

  mega::UplinkFFT fft2(8, 32, 16, 8);
  fft2(d_in, d_out);

  cudaMemcpy(h_out.ptr(), d_out.ptr(), h_out.szBytes(), cudaMemcpyDeviceToHost);

  // mega::Matrix h_out_tranc = fft.ref(h_out);
  for (int i = 0; i < 16; i++) {
    // mega::Complex *h_out_ptr = h_out[i].ptr<mega::Complex>();
    mega::Complex *h_ref_ptr = h_ref[i].ptr<mega::Complex>();
    for (int j = 0; j < 8; j++) {
      EXPECT_NEAR(h_out[j][i].ptr<mega::Complex>()->re, h_ref_ptr[j].re, 1e-5);
      EXPECT_NEAR(h_out[j][i].ptr<mega::Complex>()->im, h_ref_ptr[j].im, 1e-5);
    }
  }
}

TEST(FftTest, downlink_ifft) {
  mega::Matrix h_in(sizeof(mega::Complex), 32, 8, mega::Matrix::kHost);
  mega::Matrix d_in(sizeof(mega::Complex), 32, 8, mega::Matrix::kDevice);

  std::ifstream input("../../../test/fft/ifft_in.data", std::ios::binary);
  input.seekg(0, std::ios::end);
  size_t fileSize = input.tellg();
  input.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, h_in.szBytes());
  input.read(h_in.ptr<char>(), fileSize);
  input.close();

  cudaMemcpy(d_in.ptr(), h_in.ptr(), h_in.szBytes(), cudaMemcpyHostToDevice);

  mega::Matrix d_out(2 * sizeof(short), 32, 8, mega::Matrix::kDevice);
  mega::Matrix h_out(2 * sizeof(short), 32, 8, mega::Matrix::kHost);
  mega::Matrix h_ref(2 * sizeof(short), 32, 8,
                     mega::Matrix::kHost);  // Generated by Matlab & numpy

  std::ifstream output("../../../test/fft/ifft_out.data", std::ios::binary);
  output.seekg(0, std::ios::end);
  fileSize = output.tellg();
  output.seekg(0, std::ios::beg);

  EXPECT_EQ(fileSize, h_ref.szBytes());
  output.read(h_ref.ptr<char>(), fileSize);
  output.close();

  mega::DownlinkIFFT ifft(8, 32, 16, 8);
  ifft(d_in, d_out);

  cudaMemcpy(h_out.ptr(), d_out.ptr(), h_out.szBytes(), cudaMemcpyDeviceToHost);

  for (int i = 0; i < 8; i++) {
    short *h_out_ptr = h_out[i].ptr<short>();
    short *h_ref_ptr = h_ref[i].ptr<short>();
    for (int j = 0; j < 32 * 2; j++) {
      EXPECT_EQ(h_out_ptr[j], h_ref_ptr[j]);
    }
  }
}