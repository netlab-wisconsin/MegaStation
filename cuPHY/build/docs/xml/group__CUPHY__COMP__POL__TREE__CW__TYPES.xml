<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__CUPHY__COMP__POL__TREE__CW__TYPES" kind="group">
    <compoundname>CUPHY_COMP_POL_TREE_CW_TYPES</compoundname>
    <title>Codeword types for polar tree</title>
    <innerclass refid="structcuphyCompCwTreeTypes__t" prot="public">cuphyCompCwTreeTypes_t</innerclass>
    <innerclass refid="structcuphyCompCwTreeTypesLaunchCfg__t" prot="public">cuphyCompCwTreeTypesLaunchCfg_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__CUPHY__COMP__POL__TREE__CW__TYPES_1ga817af0f6dfb4cd87f4687385e5e97d3b" prot="public" static="no">
        <type>struct cuphyCompCwTreeTypes *</type>
        <definition>typedef struct cuphyCompCwTreeTypes* cuphyCompCwTreeTypesHndl_t</definition>
        <argsstring></argsstring>
        <name>cuphyCompCwTreeTypesHndl_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>cuPHY compCwTreeTypes handle </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" line="6218" column="36" bodyfile="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" bodystart="6218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__CUPHY__COMP__POL__TREE__CW__TYPES_1ga43e07704f56571a0b51460379390001c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref></type>
        <definition>cuphyStatus_t cuphyCompCwTreeTypesGetDescrInfo</definition>
        <argsstring>(size_t *pDynDescrSizeBytes, size_t *pDynDescrAlignBytes)</argsstring>
        <name>cuphyCompCwTreeTypesGetDescrInfo</name>
        <param>
          <type>size_t *</type>
          <declname>pDynDescrSizeBytes</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pDynDescrAlignBytes</declname>
        </param>
        <briefdescription>
<para>Helper to compute compCwTreeTypes descriptor buffer sizes and alignments. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes compCwTreeTypes descriptor buffer sizes and alignments. To be used by the caller to allocate these buffers (in CPU and GPU memories) and provide them to other compCwTreeTypes APIs</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref> if <computeroutput>pDynDescrSizeBytes</computeroutput> and/or <computeroutput>pDynDescrAlignBytes</computeroutput> is NULL</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref> if allocation and initialization were successful.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDynDescrSizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size in bytes of dynamic descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pDynDescrAlignBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Alignment in bytes of dynamic descriptor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref>, <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref></para>
</simplesect>
<simplesect kind="see"><para><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref>,<ref refid="group__CUPHY__ERROR_1ga66176ce79cdbfabf435ad1193f479242" kindref="member">cuphyGetErrorName</ref>,<ref refid="group__CUPHY__ERROR_1ga5274721e01aa356e15917123415b8e5f" kindref="member">cuphyGetErrorString</ref>,<ref refid="group__CUPHY__PUCCH__F1__RECEIVER_1gae999354ba3ab45ecd56f0ccec7a05429" kindref="member">cuphyCreatePucchF1Rx</ref>,<ref refid="group__CUPHY__PUCCH__F1__RECEIVER_1gae230215242711d7bb52dad6d027da086" kindref="member">cuphyDestroyPucchF1Rx</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" line="6255" column="16" declfile="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" declline="6255" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__CUPHY__COMP__POL__TREE__CW__TYPES_1gab5d29ce3c763a2bf02f54cd21c576905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref></type>
        <definition>cuphyStatus_t cuphyCreateCompCwTreeTypes</definition>
        <argsstring>(cuphyCompCwTreeTypesHndl_t *pCompCwTreeTypes)</argsstring>
        <name>cuphyCreateCompCwTreeTypes</name>
        <param>
          <type><ref refid="group__CUPHY__COMP__POL__TREE__CW__TYPES_1ga817af0f6dfb4cd87f4687385e5e97d3b" kindref="member">cuphyCompCwTreeTypesHndl_t</ref> *</type>
          <declname>pCompCwTreeTypes</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize a cuPHY compCwTreeTypes object. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocates a compCwTreeTypes object and returns a handle in the address provided by the caller.</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref> if <computeroutput>pPucchF0RxHndl</computeroutput> is NULL.</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a52a709523f0220a960564b5d4bde19bc" kindref="member">CUPHY_STATUS_ALLOC_FAILED</ref> if a compCwTreeTypes object cannot be allocated</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref> if allocation and initialization were successful</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pCompCwTreeTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Address to return the new compCwTreeTypes instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref>, <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a52a709523f0220a960564b5d4bde19bc" kindref="member">CUPHY_STATUS_ALLOC_FAILED</ref>, <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref></para>
</simplesect>
<ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref>,<ref refid="group__CUPHY__ERROR_1ga66176ce79cdbfabf435ad1193f479242" kindref="member">cuphyGetErrorName</ref>,<ref refid="group__CUPHY__ERROR_1ga5274721e01aa356e15917123415b8e5f" kindref="member">cuphyGetErrorString</ref>,<ref refid="group__CUPHY__PUCCH__F0__RECEIVER_1gaaff78ccf8b7521e189799fb45073f145" kindref="member">cuphyPucchF0RxGetDescrInfo</ref>,<ref refid="group__CUPHY__PUCCH__F0__RECEIVER_1gae1d6e3930af130d396bc500dc37a94b0" kindref="member">cuphySetupPucchF0Rx</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" line="6279" column="16" declfile="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" declline="6279" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__CUPHY__COMP__POL__TREE__CW__TYPES_1ga49b798507fbd3e561049778737034ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref></type>
        <definition>cuphyStatus_t cuphyDestroyCompCwTreeTypes</definition>
        <argsstring>(cuphyCompCwTreeTypesHndl_t compCwTreeTypesHndl)</argsstring>
        <name>cuphyDestroyCompCwTreeTypes</name>
        <param>
          <type><ref refid="group__CUPHY__COMP__POL__TREE__CW__TYPES_1ga817af0f6dfb4cd87f4687385e5e97d3b" kindref="member">cuphyCompCwTreeTypesHndl_t</ref></type>
          <declname>compCwTreeTypesHndl</declname>
        </param>
        <briefdescription>
<para>Destroys a cuPHY compCwTreeTypes object. </para>
        </briefdescription>
        <detaileddescription>
<para>Destroys a cuPHY compCwTreeTypes object that was previously created by <ref refid="group__CUPHY__COMP__POL__TREE__CW__TYPES_1gab5d29ce3c763a2bf02f54cd21c576905" kindref="member">cuphyCreateCompCwTreeTypes</ref>. The handle provided to this function should not be used for any operations after this function returns.</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref> if <computeroutput>compCwTreeTypesHndl</computeroutput> is NULL.</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref> if destruction was successful.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compCwTreeTypesHndl</parametername>
</parameternamelist>
<parameterdescription>
<para>- handle to previously allocated compCwTreeTypes instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref>, <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref></para>
</simplesect>
<simplesect kind="see"><para><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref>,<ref refid="group__CUPHY__ERROR_1ga66176ce79cdbfabf435ad1193f479242" kindref="member">cuphyGetErrorName</ref>,<ref refid="group__CUPHY__ERROR_1ga5274721e01aa356e15917123415b8e5f" kindref="member">cuphyGetErrorString</ref>,<ref refid="group__CUPHY__PUCCH__F0__RECEIVER_1gaaff78ccf8b7521e189799fb45073f145" kindref="member">cuphyPucchF0RxGetDescrInfo</ref>,<ref refid="group__CUPHY__PUCCH__F0__RECEIVER_1ga73a8939f12de1de2fbbf9ee6f6c803d5" kindref="member">cuphyCreatePucchF0Rx</ref>,<ref refid="group__CUPHY__PUCCH__F0__RECEIVER_1gae1d6e3930af130d396bc500dc37a94b0" kindref="member">cuphySetupPucchF0Rx</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" line="6341" column="16" declfile="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" declline="6341" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__CUPHY__COMP__POL__TREE__CW__TYPES_1ga4e887a2f3ff9913c81f06dcb73965987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref></type>
        <definition>cuphyStatus_t cuphySetupCompCwTreeTypes</definition>
        <argsstring>(cuphyCompCwTreeTypesHndl_t compCwTreeTypesHndl, uint16_t nPolUciSegs, const cuphyPolarUciSegPrm_t *pPolUciSegPrmsCpu, const cuphyPolarUciSegPrm_t *pPolUciSegPrmsGpu, uint8_t **pCwTreeTypesAddrs, void *pCpuDynDescCompTree, void *pGpuDynDescCompTree, void *pCpuDynDescCompTreeAddrs, uint8_t enableCpuToGpuDescrAsyncCpy, cuphyCompCwTreeTypesLaunchCfg_t *pLaunchCfg, cudaStream_t strm)</argsstring>
        <name>cuphySetupCompCwTreeTypes</name>
        <param>
          <type><ref refid="group__CUPHY__COMP__POL__TREE__CW__TYPES_1ga817af0f6dfb4cd87f4687385e5e97d3b" kindref="member">cuphyCompCwTreeTypesHndl_t</ref></type>
          <declname>compCwTreeTypesHndl</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nPolUciSegs</declname>
        </param>
        <param>
          <type>const cuphyPolarUciSegPrm_t *</type>
          <declname>pPolUciSegPrmsCpu</declname>
        </param>
        <param>
          <type>const cuphyPolarUciSegPrm_t *</type>
          <declname>pPolUciSegPrmsGpu</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>pCwTreeTypesAddrs</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pCpuDynDescCompTree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pGpuDynDescCompTree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pCpuDynDescCompTreeAddrs</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>enableCpuToGpuDescrAsyncCpy</declname>
        </param>
        <param>
          <type>cuphyCompCwTreeTypesLaunchCfg_t *</type>
          <declname>pLaunchCfg</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Setup cuPHY compCwTreeTypes for slot processing. </para>
        </briefdescription>
        <detaileddescription>
<para>Setup cuPHY compCwTreeTypes in preparation towards slot execution</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref> if setup is successful.</para>
<para>Returns <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref> if <computeroutput>compCwTreeTypesHndl</computeroutput> and/or <computeroutput>pPolUciSegPrmsCpu</computeroutput> and/or <computeroutput>pPolUciSegPrmsGpu</computeroutput> and/or <computeroutput>pTPrmCwTreeTypes</computeroutput> and/or <computeroutput>pCpuDynDesc</computeroutput> and/or <computeroutput>pGpuDynDesc</computeroutput> is NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compCwTreeTypesHndl</parametername>
</parameternamelist>
<parameterdescription>
<para>- Handle to previously created compCwTreeTypes instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nPolUciSegs</parametername>
</parameternamelist>
<parameterdescription>
<para>- number of polar UCI segments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pPolUciSegPrmsCpu</parametername>
</parameternamelist>
<parameterdescription>
<para>- starting address of polar UCI segment parameters (CPU) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pPolUciSegPrmsGpu</parametername>
</parameternamelist>
<parameterdescription>
<para>- starting address of polar UCI segment parameters (GPU) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCwTreeTypesAddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to cwTreeTypes addresses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCpuDynDescCompTree</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to compTree descriptor in cpu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pGpuDynDescCompTree</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to comptTree descriptor in gpu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCpuDynDescCompTreeAddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to compTreeAddrs descriptor in cpu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enableCpuToGpuDescrAsyncCpy</parametername>
</parameternamelist>
<parameterdescription>
<para>- option to copy cpu descriptors from cpu to gpu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pLaunchCfg</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to rate matching launch configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>- stream to perform copy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a87e220ee223e11582aff7bc92c750fa5" kindref="member">CUPHY_STATUS_SUCCESS</ref>, <ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3a37fb8559215f6d3286889e04a22e28a8" kindref="member">CUPHY_STATUS_INVALID_ARGUMENT</ref></para>
</simplesect>
<simplesect kind="see"><para><ref refid="cuphy_8h_1a2762a3ffaa39cf82703cd3340c4f6ef3" kindref="member">cuphyStatus_t</ref>,<ref refid="group__CUPHY__ERROR_1ga66176ce79cdbfabf435ad1193f479242" kindref="member">cuphyGetErrorName</ref>,<ref refid="group__CUPHY__ERROR_1ga5274721e01aa356e15917123415b8e5f" kindref="member">cuphyGetErrorString</ref>,<ref refid="group__CUPHY__PUCCH__F0__RECEIVER_1gaaff78ccf8b7521e189799fb45073f145" kindref="member">cuphyPucchF0RxGetDescrInfo</ref>,<ref refid="group__CUPHY__PUCCH__F0__RECEIVER_1ga65012419f708a24007e3c98500dd2184" kindref="member">cuphyDestroyPucchF0Rx</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" line="6310" column="1" declfile="/home/xxc/cuBB/cuPHY/src/cuphy/cuphy.h" declline="6310" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This section describes application programming interface for computing codeword types (rate-0, rate-1, neither) for codewords within a polar codeword tree. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
