/*
 * Copyright (c) 2021-2023, NVIDIA CORPORATION & AFFILIATES.  All rights reserved.
 *
 * NVIDIA CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA CORPORATION is strictly prohibited.
 */

 #include "pucch_F3_front_end.hpp"
 #include "nvlog.hpp"
 #include <cooperative_groups.h>
 #include <cooperative_groups/reduce.h>
 #include <functional>
 #include "cuComplex.h"
 #include "cuda_fp16.h"
 #include "math_utils.cuh"
 #include "cuphy.hpp"
 #include "descrambling.cuh"

 #include <math.h>
 #include <iostream>
 namespace cg = cooperative_groups;

 bool pucchF3Rx::isConstMemInited = false;
std::mutex pucchF3Rx::m_mutexConstMemInit;

#define UCI_NUM_DEBUG 0
// #define ENABLE_DEBUG_F3

namespace pucch_F3
{

template <typename TElem>
struct tensor_ref
{
    TElem*         addr;
    const int32_t* strides;

    CUDA_BOTH
    tensor_ref(void* pAddr, const int32_t* pStrides) :
        addr(static_cast<TElem*>(pAddr)),
        strides(pStrides)
    {
    }
    CUDA_BOTH long offset(int i0) const
    {
        return (strides[0] * (long)i0);
    }
    CUDA_BOTH long offset(int i0, int i1) const
    {
        return (strides[0] * (long)i0) + (strides[1] * (long)i1);
    }
    CUDA_BOTH long offset(int i0, int i1, int i2) const
    {
        return (strides[0] * (long)i0) + (strides[1] * (long)i1) + (strides[2] * (long)i2);
    };
    CUDA_BOTH long offset(int i0, int i1, int i2, int i3) const
    {
        return (strides[0] * (long)i0) + (strides[1] * (long)i1) + (strides[2] * (long)i2) + (strides[3] * (long)i3);
    };
    // clang-format off
    CUDA_BOTH TElem&       operator()(int i0)                               { return *(addr + offset(i0));         }
    CUDA_BOTH TElem&       operator()(int i0, int i1)                       { return *(addr + offset(i0, i1));     }
    CUDA_BOTH TElem&       operator()(int i0, int i1, int i2)               { return *(addr + offset(i0, i1, i2)); }
    CUDA_BOTH TElem&       operator()(int i0, int i1, int i2, int i3)       { return *(addr + offset(i0, i1, i2, i3)); }

    CUDA_BOTH const TElem& operator()(int i0) const                         { return *(addr + offset(i0));         }
    CUDA_BOTH const TElem& operator()(int i0, int i1) const                 { return *(addr + offset(i0, i1));     }
    CUDA_BOTH const TElem& operator()(int i0, int i1, int i2) const         { return *(addr + offset(i0, i1, i2)); }
    CUDA_BOTH const TElem& operator()(int i0, int i1, int i2, int i3) const { return *(addr + offset(i0, i1, i2, i3)); }
    // clang-format on
};

// Lookup tables in constant memory. Some of these are stored either transposed or the conjugate of the MATLAB version
// since they're only used in that format.

static uint8_t SetSymData_4_f[]    = {1, 3};
static uint8_t SetSymData_4[]      = {0, 2, 3};
static uint8_t SetSymData_5[]      = {1, 2, 4};
static uint8_t SetSymData_6[]      = {0, 2, 3, 5};
static uint8_t SetSymData_7[]      = {0, 2, 3, 5, 6};
static uint8_t SetSymData_8[]      = {0, 2, 3, 4, 6, 7};
static uint8_t SetSymData_9[]      = {0, 2, 3, 4, 5, 7, 8};
static uint8_t SetSymData_10_add[] = {0, 2, 4, 5, 7, 9};
static uint8_t SetSymData_10[]     = {0, 1, 3, 4, 5, 6, 8, 9};
static uint8_t SetSymData_11_add[] = {0, 2, 4, 5, 7, 8, 10};
static uint8_t SetSymData_11[]     = {0, 1, 3, 4, 5, 6, 8, 9, 10};
static uint8_t SetSymData_12_add[] = {0, 2, 3, 5, 6, 8, 9, 11};
static uint8_t SetSymData_12[]     = {0, 1, 3, 4, 5, 6, 7, 9, 10, 11};
static uint8_t SetSymData_13_add[] = {0, 2, 3, 5, 6, 8, 9, 10, 12};
static uint8_t SetSymData_13[]     = {0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12};
static uint8_t SetSymData_14_add[] = {0, 2, 3, 4, 6, 7, 9, 10, 11, 13};
static uint8_t SetSymData_14[]     = {0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13};

static uint8_t SetSymDmrs_4_f[]    = {0, 2};
static uint8_t SetSymDmrs_4[]      = {1};
static uint8_t SetSymDmrs_5[]      = {0, 3};
static uint8_t SetSymDmrs_6[]      = {1, 4};
static uint8_t SetSymDmrs_7[]      = {1, 4};
static uint8_t SetSymDmrs_8[]      = {1, 5};
static uint8_t SetSymDmrs_9[]      = {1, 6};
static uint8_t SetSymDmrs_10_add[] = {1, 3, 6, 8};
static uint8_t SetSymDmrs_10[]     = {2, 7};
static uint8_t SetSymDmrs_11_add[] = {1, 3, 6, 9};
static uint8_t SetSymDmrs_11[]     = {2, 7};
static uint8_t SetSymDmrs_12_add[] = {1, 4, 7, 10};
static uint8_t SetSymDmrs_12[]     = {2, 8};
static uint8_t SetSymDmrs_13_add[] = {1, 4, 7, 11};
static uint8_t SetSymDmrs_13[]     = {2, 9};
static uint8_t SetSymDmrs_14_add[] = {1, 5, 8, 12};
static uint8_t SetSymDmrs_14[]     = {3, 10};

static __device__ __constant__ __half2 d_W1[12][12];
static __half2                         W1[12][12] = {{{0.436279, 0.000000}, {0.313721, 0.063110}, {0.197632, 0.082886}, {0.101379, 0.068665}, {0.032898, 0.033478}, {-0.005539, -0.008484}, {-0.017654, -0.044220}, {-0.011742, -0.064026}, {0.001077, -0.063049}, {0.009109, -0.041626}, {0.002293, -0.005219}, {-0.025955, 0.036926}},
                             {{0.313721, -0.063110}, {0.258057, 0.000000}, {0.193970, 0.039032}, {0.130493, 0.054688}, {0.075134, 0.050873}, {0.033295, 0.033844}, {0.007153, 0.010956}, {-0.004246, -0.010635}, {-0.004608, -0.025131}, {0.000496, -0.029037}, {0.004749, -0.021683}, {0.002293, -0.005219}},
                             {{0.197632, -0.082886}, {0.193970, -0.039032}, {0.176758, 0.000000}, {0.148804, 0.029922}, {0.114563, 0.048035}, {0.078857, 0.053406}, {0.046326, 0.047119}, {0.020737, 0.031769}, {0.004463, 0.011185}, {-0.001910, -0.010414}, {0.000496, -0.029037}, {0.009109, -0.041626}},
                             {{0.101379, -0.068665}, {0.130493, -0.054688}, {0.148804, -0.029922}, {0.153320, 0.000000}, {0.143433, 0.028854}, {0.121155, 0.050781}, {0.090393, 0.061218}, {0.056763, 0.057739}, {0.026291, 0.040253}, {0.004463, 0.011185}, {-0.004608, -0.025131}, {0.001077, -0.063049}},
                             {{0.032898, -0.033478}, {0.075134, -0.050873}, {0.114563, -0.048035}, {0.143433, -0.028854}, {0.156494, 0.000000}, {0.151489, 0.030457}, {0.129639, 0.054382}, {0.095825, 0.064880}, {0.056763, 0.057739}, {0.020737, 0.031769}, {-0.004246, -0.010635}, {-0.011742, -0.064026}},
                             {{-0.005539, 0.008484}, {0.033295, -0.033844}, {0.078857, -0.053406}, {0.121155, -0.050781}, {0.151489, -0.030457}, {0.163818, 0.000000}, {0.156006, 0.031372}, {0.129639, 0.054382}, {0.090393, 0.061218}, {0.046326, 0.047119}, {0.007153, 0.010956}, {-0.017654, -0.044220}},
                             {{-0.017654, 0.044220}, {0.007153, -0.010956}, {0.046326, -0.047119}, {0.090393, -0.061218}, {0.129639, -0.054382}, {0.156006, -0.031372}, {0.163818, 0.000000}, {0.151489, 0.030457}, {0.121155, 0.050781}, {0.078857, 0.053406}, {0.033295, 0.033844}, {-0.005539, -0.008484}},
                             {{-0.011742, 0.064026}, {-0.004246, 0.010635}, {0.020737, -0.031769}, {0.056763, -0.057739}, {0.095825, -0.064880}, {0.129639, -0.054382}, {0.151489, -0.030457}, {0.156494, 0.000000}, {0.143433, 0.028854}, {0.114563, 0.048035}, {0.075134, 0.050873}, {0.032898, 0.033478}},
                             {{0.001077, 0.063049}, {-0.004608, 0.025131}, {0.004463, -0.011185}, {0.026291, -0.040253}, {0.056763, -0.057739}, {0.090393, -0.061218}, {0.121155, -0.050781}, {0.143433, -0.028854}, {0.153320, 0.000000}, {0.148804, 0.029922}, {0.130493, 0.054688}, {0.101379, 0.068665}},
                             {{0.009109, 0.041626}, {0.000496, 0.029037}, {-0.001910, 0.010414}, {0.004463, -0.011185}, {0.020737, -0.031769}, {0.046326, -0.047119}, {0.078857, -0.053406}, {0.114563, -0.048035}, {0.148804, -0.029922}, {0.176758, 0.000000}, {0.193970, 0.039032}, {0.197632, 0.082886}},
                             {{0.002293, 0.005219}, {0.004749, 0.021683}, {0.000496, 0.029037}, {-0.004608, 0.025131}, {-0.004246, 0.010635}, {0.007153, -0.010956}, {0.033295, -0.033844}, {0.075134, -0.050873}, {0.130493, -0.054688}, {0.193970, -0.039032}, {0.258057, 0.000000}, {0.313721, 0.063110}},
                             {{-0.025955, -0.036926}, {0.002293, 0.005219}, {0.009109, 0.041626}, {0.001077, 0.063049}, {-0.011742, 0.064026}, {-0.017654, 0.044220}, {-0.005539, 0.008484}, {0.032898, -0.033478}, {0.101379, -0.068665}, {0.197632, -0.082886}, {0.313721, -0.063110}, {0.436279, 0.000000}}};

static __device__ __constant__ __half2 d_W2[24][24];
static __half2                         W2[24][24] = {{{0.394531, 0.000000}, {0.295898, 0.059509}, {0.200439, 0.084045}, {0.118408, 0.080200}, {0.056122, 0.057098}, {0.015945, 0.024414}, {-0.003527, -0.008835}, {-0.006546, -0.035706}, {0.000889, -0.052002}, {0.012383, -0.056519}, {0.022308, -0.050781}, {0.026779, -0.038116}, {0.024078, -0.022888}, {0.014725, -0.009262}, {0.001026, -0.000390}, {-0.013634, 0.002260}, {-0.025711, -0.000879}, {-0.032379, -0.007671}, {-0.032227, -0.014816}, {-0.025589, -0.018646}, {-0.014664, -0.015976}, {-0.002945, -0.004868}, {0.005337, 0.014816}, {0.006119, 0.041260}},
                             {{0.295898, -0.059509}, {0.247070, 0.000000}, {0.190674, 0.038361}, {0.134277, 0.056305}, {0.084106, 0.057007}, {0.044403, 0.045166}, {0.017197, 0.026337}, {0.002331, 0.005840}, {-0.002192, -0.011948}, {0.000412, -0.024109}, {0.006451, -0.029449}, {0.012489, -0.028412}, {0.015945, -0.022690}, {0.015472, -0.014702}, {0.011032, -0.006935}, {0.003738, -0.001419}, {-0.004520, 0.000750}, {-0.011635, -0.000398}, {-0.015823, -0.003748}, {-0.016052, -0.007381}, {-0.012398, -0.009033}, {-0.006081, -0.006622}, {0.000744, 0.001230}, {0.005337, 0.014816}},
                             {{0.200439, -0.084045}, {0.190674, -0.038361}, {0.169434, 0.000000}, {0.140259, 0.028198}, {0.107300, 0.044983}, {0.074768, 0.050659}, {0.046143, 0.046936}, {0.023849, 0.036530}, {0.009003, 0.022552}, {0.001492, 0.008133}, {0.000071, -0.004177}, {0.002777, -0.012680}, {0.007343, -0.016708}, {0.011658, -0.016586}, {0.014137, -0.013435}, {0.013954, -0.008774}, {0.011108, -0.004215}, {0.006332, -0.001050}, {0.000837, 0.000029}, {-0.004017, -0.000952}, {-0.007088, -0.003260}, {-0.007744, -0.005642}, {-0.006081, -0.006622}, {-0.002945, -0.004868}},
                             {{0.118408, -0.080200}, {0.134277, -0.056305}, {0.140259, -0.028198}, {0.135742, 0.000000}, {0.121887, 0.024521}, {0.101196, 0.042450}, {0.076904, 0.052124}, {0.052399, 0.053284}, {0.030701, 0.047028}, {0.014122, 0.035370}, {0.003853, 0.021011}, {-0.000114, 0.006664}, {0.001164, -0.005318}, {0.005867, -0.013351}, {0.011810, -0.016815}, {0.016907, -0.016052}, {0.019516, -0.012268}, {0.018768, -0.007126}, {0.014687, -0.002434}, {0.008041, 0.000275}, {0.000235, 0.000056}, {-0.007088, -0.003260}, {-0.012398, -0.009033}, {-0.014664, -0.015976}},
                             {{0.056122, -0.057098}, {0.084106, -0.057007}, {0.107300, -0.044983}, {0.121887, -0.024521}, {0.125854, 0.000000}, {0.119202, 0.023972}, {0.103577, 0.043427}, {0.081909, 0.055481}, {0.057861, 0.058838}, {0.035156, 0.053833}, {0.016830, 0.042145}, {0.004852, 0.026459}, {-0.000169, 0.009865}, {0.001029, -0.004700}, {0.006607, -0.015030}, {0.014053, -0.020004}, {0.020721, -0.019684}, {0.024338, -0.015305}, {0.023483, -0.008911}, {0.017792, -0.002949}, {0.008041, 0.000275}, {-0.004017, -0.000952}, {-0.016052, -0.007381}, {-0.025589, -0.018646}},
                             {{0.015945, -0.024414}, {0.044403, -0.045166}, {0.074768, -0.050659}, {0.101196, -0.042450}, {0.119202, -0.023972}, {0.126099, 0.000000}, {0.121460, 0.024429}, {0.106750, 0.044769}, {0.085083, 0.057648}, {0.060303, 0.061340}, {0.036591, 0.056030}, {0.017319, 0.043396}, {0.004826, 0.026321}, {-0.000141, 0.008270}, {0.001638, -0.007481}, {0.008095, -0.018417}, {0.016327, -0.023239}, {0.023254, -0.022095}, {0.026199, -0.016479}, {0.023483, -0.008911}, {0.014687, -0.002434}, {0.000837, 0.000029}, {-0.015823, -0.003748}, {-0.032227, -0.014816}},
                             {{-0.003527, 0.008835}, {0.017197, -0.026337}, {0.046143, -0.046936}, {0.076904, -0.052124}, {0.103577, -0.043427}, {0.121460, -0.024429}, {0.128052, 0.000000}, {0.122864, 0.024704}, {0.107422, 0.045044}, {0.084961, 0.057587}, {0.059662, 0.060699}, {0.035614, 0.054565}, {0.016403, 0.041107}, {0.004288, 0.023361}, {-0.000086, 0.005005}, {0.002317, -0.010582}, {0.009155, -0.020828}, {0.017258, -0.024551}, {0.023254, -0.022095}, {0.024338, -0.015305}, {0.018768, -0.007126}, {0.006332, -0.001050}, {-0.011635, -0.000398}, {-0.032379, -0.007671}},
                             {{-0.006546, 0.035706}, {0.002331, -0.005840}, {0.023849, -0.036530}, {0.052399, -0.053284}, {0.081909, -0.055481}, {0.106750, -0.044769}, {0.122864, -0.024704}, {0.127686, 0.000000}, {0.121155, 0.024368}, {0.104919, 0.043976}, {0.082214, 0.055664}, {0.057037, 0.058014}, {0.033539, 0.051361}, {0.015068, 0.037750}, {0.003725, 0.020309}, {-0.000045, 0.002653}, {0.002598, -0.011864}, {0.009155, -0.020828}, {0.016327, -0.023239}, {0.020721, -0.019684}, {0.019516, -0.012268}, {0.011108, -0.004215}, {-0.004520, 0.000750}, {-0.025711, -0.000879}},
                             {{0.000889, 0.052002}, {-0.002192, 0.011948}, {0.009003, -0.022552}, {0.030701, -0.047028}, {0.057861, -0.058838}, {0.085083, -0.057648}, {0.107422, -0.045044}, {0.121155, -0.024368}, {0.124329, 0.000000}, {0.116882, 0.023499}, {0.100464, 0.042114}, {0.078247, 0.053009}, {0.054047, 0.054962}, {0.031647, 0.048462}, {0.014160, 0.035461}, {0.003494, 0.019058}, {-0.000045, 0.002653}, {0.002317, -0.010582}, {0.008095, -0.018417}, {0.014053, -0.020004}, {0.016907, -0.016052}, {0.013954, -0.008774}, {0.003738, -0.001419}, {-0.013634, 0.002260}},
                             {{0.012383, 0.056519}, {0.000412, 0.024109}, {0.001492, -0.008133}, {0.014122, -0.035370}, {0.035156, -0.053833}, {0.060303, -0.061340}, {0.084961, -0.057587}, {0.104919, -0.043976}, {0.116882, -0.023499}, {0.119141, 0.000000}, {0.111633, 0.022461}, {0.096008, 0.040253}, {0.075012, 0.050812}, {0.052124, 0.053040}, {0.030884, 0.047302}, {0.014160, 0.035461}, {0.003725, 0.020309}, {-0.000086, 0.005005}, {0.001638, -0.007481}, {0.006607, -0.015030}, {0.011810, -0.016815}, {0.014137, -0.013435}, {0.011032, -0.006935}, {0.001026, -0.000390}},
                             {{0.022308, 0.050781}, {0.006451, 0.029449}, {0.000071, 0.004177}, {0.003853, -0.021011}, {0.016830, -0.042145}, {0.036591, -0.056030}, {0.059662, -0.060699}, {0.082214, -0.055664}, {0.100464, -0.042114}, {0.111633, -0.022461}, {0.114014, 0.000000}, {0.107483, 0.021622}, {0.093262, 0.039093}, {0.073730, 0.049957}, {0.052124, 0.053040}, {0.031647, 0.048462}, {0.015068, 0.037750}, {0.004288, 0.023361}, {-0.000141, 0.008270}, {0.001029, -0.004700}, {0.005867, -0.013351}, {0.011658, -0.016586}, {0.015472, -0.014702}, {0.014725, -0.009262}},
                             {{0.026779, 0.038116}, {0.012489, 0.028412}, {0.002777, 0.012680}, {-0.000114, -0.006664}, {0.004852, -0.026459}, {0.017319, -0.043396}, {0.035614, -0.054565}, {0.057037, -0.058014}, {0.078247, -0.053009}, {0.096008, -0.040253}, {0.107483, -0.021622}, {0.110962, 0.000000}, {0.105896, 0.021301}, {0.093262, 0.039093}, {0.075012, 0.050812}, {0.054047, 0.054962}, {0.033539, 0.051361}, {0.016403, 0.041107}, {0.004826, 0.026321}, {-0.000169, 0.009865}, {0.001164, -0.005318}, {0.007343, -0.016708}, {0.015945, -0.022690}, {0.024078, -0.022888}},
                             {{0.024078, 0.022888}, {0.015945, 0.022690}, {0.007343, 0.016708}, {0.001164, 0.005318}, {-0.000169, -0.009865}, {0.004826, -0.026321}, {0.016403, -0.041107}, {0.033539, -0.051361}, {0.054047, -0.054962}, {0.075012, -0.050812}, {0.093262, -0.039093}, {0.105896, -0.021301}, {0.110962, 0.000000}, {0.107483, 0.021622}, {0.096008, 0.040253}, {0.078247, 0.053009}, {0.057037, 0.058014}, {0.035614, 0.054565}, {0.017319, 0.043396}, {0.004852, 0.026459}, {-0.000114, 0.006664}, {0.002777, -0.012680}, {0.012489, -0.028412}, {0.026779, -0.038116}},
                             {{0.014725, 0.009262}, {0.015472, 0.014702}, {0.011658, 0.016586}, {0.005867, 0.013351}, {0.001029, 0.004700}, {-0.000141, -0.008270}, {0.004288, -0.023361}, {0.015068, -0.037750}, {0.031647, -0.048462}, {0.052124, -0.053040}, {0.073730, -0.049957}, {0.093262, -0.039093}, {0.107483, -0.021622}, {0.114014, 0.000000}, {0.111633, 0.022461}, {0.100464, 0.042114}, {0.082214, 0.055664}, {0.059662, 0.060699}, {0.036591, 0.056030}, {0.016830, 0.042145}, {0.003853, 0.021011}, {0.000071, -0.004177}, {0.006451, -0.029449}, {0.022308, -0.050781}},
                             {{0.001026, 0.000390}, {0.011032, 0.006935}, {0.014137, 0.013435}, {0.011810, 0.016815}, {0.006607, 0.015030}, {0.001638, 0.007481}, {-0.000086, -0.005005}, {0.003725, -0.020309}, {0.014160, -0.035461}, {0.030884, -0.047302}, {0.052124, -0.053040}, {0.075012, -0.050812}, {0.096008, -0.040253}, {0.111633, -0.022461}, {0.119141, 0.000000}, {0.116882, 0.023499}, {0.104919, 0.043976}, {0.084961, 0.057587}, {0.060303, 0.061340}, {0.035156, 0.053833}, {0.014122, 0.035370}, {0.001492, 0.008133}, {0.000412, -0.024109}, {0.012383, -0.056519}},
                             {{-0.013634, -0.002260}, {0.003738, 0.001419}, {0.013954, 0.008774}, {0.016907, 0.016052}, {0.014053, 0.020004}, {0.008095, 0.018417}, {0.002317, 0.010582}, {-0.000045, -0.002653}, {0.003494, -0.019058}, {0.014160, -0.035461}, {0.031647, -0.048462}, {0.054047, -0.054962}, {0.078247, -0.053009}, {0.100464, -0.042114}, {0.116882, -0.023499}, {0.124329, 0.000000}, {0.121155, 0.024368}, {0.107422, 0.045044}, {0.085083, 0.057648}, {0.057861, 0.058838}, {0.030701, 0.047028}, {0.009003, 0.022552}, {-0.002192, -0.011948}, {0.000889, -0.052002}},
                             {{-0.025711, 0.000879}, {-0.004520, -0.000750}, {0.011108, 0.004215}, {0.019516, 0.012268}, {0.020721, 0.019684}, {0.016327, 0.023239}, {0.009155, 0.020828}, {0.002598, 0.011864}, {-0.000045, -0.002653}, {0.003725, -0.020309}, {0.015068, -0.037750}, {0.033539, -0.051361}, {0.057037, -0.058014}, {0.082214, -0.055664}, {0.104919, -0.043976}, {0.121155, -0.024368}, {0.127686, 0.000000}, {0.122864, 0.024704}, {0.106750, 0.044769}, {0.081909, 0.055481}, {0.052399, 0.053284}, {0.023849, 0.036530}, {0.002331, 0.005840}, {-0.006546, -0.035706}},
                             {{-0.032379, 0.007671}, {-0.011635, 0.000398}, {0.006332, 0.001050}, {0.018768, 0.007126}, {0.024338, 0.015305}, {0.023254, 0.022095}, {0.017258, 0.024551}, {0.009155, 0.020828}, {0.002317, 0.010582}, {-0.000086, -0.005005}, {0.004288, -0.023361}, {0.016403, -0.041107}, {0.035614, -0.054565}, {0.059662, -0.060699}, {0.084961, -0.057587}, {0.107422, -0.045044}, {0.122864, -0.024704}, {0.128052, 0.000000}, {0.121460, 0.024429}, {0.103577, 0.043427}, {0.076904, 0.052124}, {0.046143, 0.046936}, {0.017197, 0.026337}, {-0.003527, -0.008835}},
                             {{-0.032227, 0.014816}, {-0.015823, 0.003748}, {0.000837, -0.000029}, {0.014687, 0.002434}, {0.023483, 0.008911}, {0.026199, 0.016479}, {0.023254, 0.022095}, {0.016327, 0.023239}, {0.008095, 0.018417}, {0.001638, 0.007481}, {-0.000141, -0.008270}, {0.004826, -0.026321}, {0.017319, -0.043396}, {0.036591, -0.056030}, {0.060303, -0.061340}, {0.085083, -0.057648}, {0.106750, -0.044769}, {0.121460, -0.024429}, {0.126099, 0.000000}, {0.119202, 0.023972}, {0.101196, 0.042450}, {0.074768, 0.050659}, {0.044403, 0.045166}, {0.015945, 0.024414}},
                             {{-0.025589, 0.018646}, {-0.016052, 0.007381}, {-0.004017, 0.000952}, {0.008041, -0.000275}, {0.017792, 0.002949}, {0.023483, 0.008911}, {0.024338, 0.015305}, {0.020721, 0.019684}, {0.014053, 0.020004}, {0.006607, 0.015030}, {0.001029, 0.004700}, {-0.000169, -0.009865}, {0.004852, -0.026459}, {0.016830, -0.042145}, {0.035156, -0.053833}, {0.057861, -0.058838}, {0.081909, -0.055481}, {0.103577, -0.043427}, {0.119202, -0.023972}, {0.125854, 0.000000}, {0.121887, 0.024521}, {0.107300, 0.044983}, {0.084106, 0.057007}, {0.056122, 0.057098}},
                             {{-0.014664, 0.015976}, {-0.012398, 0.009033}, {-0.007088, 0.003260}, {0.000235, -0.000056}, {0.008041, -0.000275}, {0.014687, 0.002434}, {0.018768, 0.007126}, {0.019516, 0.012268}, {0.016907, 0.016052}, {0.011810, 0.016815}, {0.005867, 0.013351}, {0.001164, 0.005318}, {-0.000114, -0.006664}, {0.003853, -0.021011}, {0.014122, -0.035370}, {0.030701, -0.047028}, {0.052399, -0.053284}, {0.076904, -0.052124}, {0.101196, -0.042450}, {0.121887, -0.024521}, {0.135742, 0.000000}, {0.140259, 0.028198}, {0.134277, 0.056305}, {0.118408, 0.080200}},
                             {{-0.002945, 0.004868}, {-0.006081, 0.006622}, {-0.007744, 0.005642}, {-0.007088, 0.003260}, {-0.004017, 0.000952}, {0.000837, -0.000029}, {0.006332, 0.001050}, {0.011108, 0.004215}, {0.013954, 0.008774}, {0.014137, 0.013435}, {0.011658, 0.016586}, {0.007343, 0.016708}, {0.002777, 0.012680}, {0.000071, 0.004177}, {0.001492, -0.008133}, {0.009003, -0.022552}, {0.023849, -0.036530}, {0.046143, -0.046936}, {0.074768, -0.050659}, {0.107300, -0.044983}, {0.140259, -0.028198}, {0.169434, 0.000000}, {0.190674, 0.038361}, {0.200439, 0.084045}},
                             {{0.005337, -0.014816}, {0.000744, -0.001230}, {-0.006081, 0.006622}, {-0.012398, 0.009033}, {-0.016052, 0.007381}, {-0.015823, 0.003748}, {-0.011635, 0.000398}, {-0.004520, -0.000750}, {0.003738, 0.001419}, {0.011032, 0.006935}, {0.015472, 0.014702}, {0.015945, 0.022690}, {0.012489, 0.028412}, {0.006451, 0.029449}, {0.000412, 0.024109}, {-0.002192, 0.011948}, {0.002331, -0.005840}, {0.017197, -0.026337}, {0.044403, -0.045166}, {0.084106, -0.057007}, {0.134277, -0.056305}, {0.190674, -0.038361}, {0.247070, 0.000000}, {0.295898, 0.059509}},
                             {{0.006119, -0.041260}, {0.005337, -0.014816}, {-0.002945, 0.004868}, {-0.014664, 0.015976}, {-0.025589, 0.018646}, {-0.032227, 0.014816}, {-0.032379, 0.007671}, {-0.025711, 0.000879}, {-0.013634, -0.002260}, {0.001026, 0.000390}, {0.014725, 0.009262}, {0.024078, 0.022888}, {0.026779, 0.038116}, {0.022308, 0.050781}, {0.012383, 0.056519}, {0.000889, 0.052002}, {-0.006546, 0.035706}, {-0.003527, 0.008835}, {0.015945, -0.024414}, {0.056122, -0.057098}, {0.118408, -0.080200}, {0.200439, -0.084045}, {0.295898, -0.059509}, {0.394531, 0.000000}}};

static __device__ __constant__ __half2 d_W3[36][36];
static __half2                         W3[36][36] = {{{0.379883, 0.000000}, {0.288330, 0.057983}, {0.199097, 0.083496}, {0.121704, 0.082458}, {0.061768, 0.062805}, {0.021774, 0.033356}, {0.000805, 0.002016}, {-0.004543, -0.024765}, {0.000734, -0.042938}, {0.011147, -0.050903}, {0.021713, -0.049408}, {0.028687, -0.040833}, {0.030029, -0.028519}, {0.025421, -0.015991}, {0.016098, -0.006111}, {0.004238, -0.000702}, {-0.007580, -0.000259}, {-0.017014, -0.004032}, {-0.022491, -0.010345}, {-0.023422, -0.017059}, {-0.020309, -0.022125}, {-0.014534, -0.024017}, {-0.007950, -0.022064}, {-0.002455, -0.016556}, {0.000444, -0.008659}, {0.000014, -0.000053}, {-0.003569, 0.007423}, {-0.009247, 0.012253}, {-0.015343, 0.013611}, {-0.019913, 0.011589}, {-0.021240, 0.007244}, {-0.018250, 0.002388}, {-0.010803, -0.000740}, {0.000149, 0.000041}, {0.012688, 0.006371}, {0.024216, 0.018951}},
                             {{0.288330, -0.057983}, {0.241943, 0.000000}, {0.188599, 0.037933}, {0.134888, 0.056549}, {0.086670, 0.058716}, {0.047882, 0.048706}, {0.020599, 0.031555}, {0.004810, 0.012047}, {-0.001053, -0.005741}, {0.000324, -0.018982}, {0.005764, -0.026321}, {0.012192, -0.027740}, {0.017151, -0.024414}, {0.019104, -0.018143}, {0.017532, -0.011024}, {0.012894, -0.004894}, {0.006313, -0.001047}, {-0.000727, -0.000025}, {-0.006790, -0.001609}, {-0.010796, -0.004967}, {-0.012215, -0.008896}, {-0.011169, -0.012169}, {-0.008339, -0.013771}, {-0.004753, -0.013191}, {-0.001552, -0.010460}, {0.000316, -0.006161}, {0.000317, -0.001245}, {-0.001534, 0.003191}, {-0.004673, 0.006191}, {-0.008102, 0.007187}, {-0.010620, 0.006184}, {-0.011116, 0.003790}, {-0.008827, 0.001155}, {-0.003607, -0.000247}, {0.003983, 0.001089}, {0.012688, 0.006371}},
                             {{0.199097, -0.083496}, {0.188599, -0.037933}, {0.167114, 0.000000}, {0.138428, 0.027832}, {0.106323, 0.044586}, {0.074829, 0.050690}, {0.046997, 0.047821}, {0.025101, 0.038452}, {0.010178, 0.025497}, {0.002157, 0.011765}, {0.000007, -0.000388}, {0.002047, -0.009346}, {0.006313, -0.014359}, {0.010918, -0.015533}, {0.014359, -0.013641}, {0.015717, -0.009880}, {0.014717, -0.005585}, {0.011665, -0.001934}, {0.007320, 0.000250}, {0.002638, 0.000625}, {-0.001448, -0.000666}, {-0.004234, -0.003084}, {-0.005379, -0.005859}, {-0.004963, -0.008202}, {-0.003408, -0.009460}, {-0.001381, -0.009315}, {0.000400, -0.007790}, {0.001344, -0.005268}, {0.001134, -0.002357}, {-0.000187, 0.000248}, {-0.002220, 0.001968}, {-0.004295, 0.002501}, {-0.005634, 0.001922}, {-0.005543, 0.000725}, {-0.003607, -0.000247}, {0.000149, 0.000041}},
                             {{0.121704, -0.082458}, {0.134888, -0.056549}, {0.138428, -0.027832}, {0.132324, 0.000000}, {0.117920, 0.023712}, {0.097656, 0.040924}, {0.074402, 0.050415}, {0.051178, 0.052063}, {0.030670, 0.046967}, {0.014755, 0.036957}, {0.004463, 0.024338}, {-0.000196, 0.011436}, {-0.000054, 0.000247}, {0.003447, -0.007843}, {0.008568, -0.012192}, {0.013618, -0.012939}, {0.017242, -0.010834}, {0.018585, -0.007053}, {0.017456, -0.002893}, {0.014183, 0.000485}, {0.009567, 0.002266}, {0.004597, 0.002115}, {0.000263, 0.000191}, {-0.002691, -0.002932}, {-0.003893, -0.006432}, {-0.003399, -0.009438}, {-0.001665, -0.011230}, {0.000586, -0.011414}, {0.002542, -0.009964}, {0.003498, -0.007275}, {0.003019, -0.003998}, {0.001051, -0.000933}, {-0.002058, 0.001198}, {-0.005634, 0.001922}, {-0.008827, 0.001155}, {-0.010803, -0.000740}},
                             {{0.061768, -0.062805}, {0.086670, -0.058716}, {0.106323, -0.044586}, {0.117920, -0.023712}, {0.119934, 0.000000}, {0.112671, 0.022659}, {0.097717, 0.040955}, {0.077698, 0.052643}, {0.055725, 0.056671}, {0.034851, 0.053406}, {0.017654, 0.044220}, {0.005745, 0.031311}, {-0.000293, 0.017166}, {-0.000904, 0.004131}, {0.002626, -0.005978}, {0.008499, -0.012093}, {0.014778, -0.014038}, {0.019760, -0.012428}, {0.022278, -0.008453}, {0.021820, -0.003616}, {0.018585, 0.000635}, {0.013374, 0.003168}, {0.007351, 0.003382}, {0.001761, 0.001284}, {-0.002348, -0.002558}, {-0.004341, -0.007172}, {-0.004116, -0.011429}, {-0.002119, -0.014290}, {0.000773, -0.015068}, {0.003460, -0.013565}, {0.004864, -0.010117}, {0.004177, -0.005531}, {0.001051, -0.000933}, {-0.004295, 0.002501}, {-0.011116, 0.003790}, {-0.018250, 0.002388}},
                             {{0.021774, -0.033356}, {0.047882, -0.048706}, {0.074829, -0.050690}, {0.097656, -0.040924}, {0.112671, -0.022659}, {0.117920, 0.000000}, {0.113220, 0.022766}, {0.099854, 0.041870}, {0.080505, 0.054535}, {0.058380, 0.059387}, {0.036896, 0.056488}, {0.018845, 0.047180}, {0.006176, 0.033691}, {-0.000318, 0.018600}, {-0.000992, 0.004528}, {0.002851, -0.006485}, {0.009293, -0.013222}, {0.016220, -0.015404}, {0.021729, -0.013664}, {0.024506, -0.009300}, {0.023941, -0.003967}, {0.020248, 0.000692}, {0.014343, 0.003399}, {0.007519, 0.003458}, {0.001218, 0.000887}, {-0.003347, -0.003647}, {-0.005444, -0.008995}, {-0.004974, -0.013809}, {-0.002499, -0.016861}, {0.000887, -0.017288}, {0.003801, -0.014900}, {0.004864, -0.010117}, {0.003019, -0.003998}, {-0.002220, 0.001968}, {-0.010620, 0.006184}, {-0.021240, 0.007244}},
                             {{0.000805, -0.002016}, {0.020599, -0.031555}, {0.046997, -0.047821}, {0.074402, -0.050415}, {0.097717, -0.040955}, {0.113220, -0.022766}, {0.118774, 0.000000}, {0.114136, 0.022949}, {0.100647, 0.042206}, {0.081116, 0.054932}, {0.058716, 0.059723}, {0.036987, 0.056641}, {0.018784, 0.047028}, {0.006088, 0.033173}, {-0.000304, 0.017807}, {-0.000778, 0.003551}, {0.003298, -0.007507}, {0.009933, -0.014130}, {0.016937, -0.016083}, {0.022354, -0.014053}, {0.024857, -0.009438}, {0.023880, -0.003960}, {0.019714, 0.000674}, {0.013336, 0.003160}, {0.006184, 0.002846}, {-0.000242, -0.000176}, {-0.004688, -0.005108}, {-0.006447, -0.010651}, {-0.005524, -0.015335}, {-0.002645, -0.017838}, {0.000887, -0.017288}, {0.003460, -0.013565}, {0.003498, -0.007275}, {-0.000187, 0.000248}, {-0.008102, 0.007187}, {-0.019913, 0.011589}},
                             {{-0.004543, 0.024765}, {0.004810, -0.012047}, {0.025101, -0.038452}, {0.051178, -0.052063}, {0.077698, -0.052643}, {0.099854, -0.041870}, {0.114136, -0.022949}, {0.118591, 0.000000}, {0.113159, 0.022751}, {0.099243, 0.041595}, {0.079529, 0.053864}, {0.057312, 0.058289}, {0.035889, 0.054962}, {0.018097, 0.045319}, {0.005802, 0.031647}, {-0.000284, 0.016602}, {-0.000605, 0.002762}, {0.003447, -0.007843}, {0.009880, -0.014061}, {0.016556, -0.015717}, {0.021561, -0.013557}, {0.023636, -0.008972}, {0.022308, -0.003698}, {0.017914, 0.000613}, {0.011497, 0.002726}, {0.004498, 0.002069}, {-0.001592, -0.001160}, {-0.005577, -0.006073}, {-0.006844, -0.011307}, {-0.005524, -0.015335}, {-0.002499, -0.016861}, {0.000773, -0.015068}, {0.002542, -0.009964}, {0.001134, -0.002357}, {-0.004673, 0.006191}, {-0.015343, 0.013611}},
                             {{0.000734, 0.042938}, {-0.001053, 0.005741}, {0.010178, -0.025497}, {0.030670, -0.046967}, {0.055725, -0.056671}, {0.080505, -0.054535}, {0.100647, -0.042206}, {0.113159, -0.022751}, {0.116272, 0.000000}, {0.110107, 0.022141}, {0.096069, 0.040253}, {0.076660, 0.051941}, {0.055084, 0.056030}, {0.034454, 0.052765}, {0.017365, 0.043488}, {0.005581, 0.030441}, {-0.000276, 0.016129}, {-0.000659, 0.003010}, {0.003086, -0.007023}, {0.009056, -0.012894}, {0.015221, -0.014458}, {0.019791, -0.012444}, {0.021591, -0.008194}, {0.020187, -0.003347}, {0.015945, 0.000546}, {0.009888, 0.002344}, {0.003395, 0.001562}, {-0.002127, -0.001549}, {-0.005577, -0.006073}, {-0.006447, -0.010651}, {-0.004974, -0.013809}, {-0.002119, -0.014290}, {0.000586, -0.011414}, {0.001344, -0.005268}, {-0.001534, 0.003191}, {-0.009247, 0.012253}},
                             {{0.011147, 0.050903}, {0.000324, 0.018982}, {0.002157, -0.011765}, {0.014755, -0.036957}, {0.034851, -0.053406}, {0.058380, -0.059387}, {0.081116, -0.054932}, {0.099243, -0.041595}, {0.110107, -0.022141}, {0.112305, 0.000000}, {0.105835, 0.021286}, {0.092163, 0.038635}, {0.073608, 0.049866}, {0.053040, 0.053955}, {0.033325, 0.051056}, {0.016983, 0.042511}, {0.005562, 0.030334}, {-0.000288, 0.016876}, {-0.000973, 0.004444}, {0.002279, -0.005188}, {0.007717, -0.010979}, {0.013435, -0.012764}, {0.017761, -0.011169}, {0.019577, -0.007435}, {0.018463, -0.003059}, {0.014709, 0.000503}, {0.009262, 0.002195}, {0.003395, 0.001562}, {-0.001592, -0.001160}, {-0.004688, -0.005108}, {-0.005444, -0.008995}, {-0.004116, -0.011429}, {-0.001665, -0.011230}, {0.000400, -0.007790}, {0.000317, -0.001245}, {-0.003569, 0.007423}},
                             {{0.021713, 0.049408}, {0.005764, 0.026321}, {0.000007, 0.000388}, {0.004463, -0.024338}, {0.017654, -0.044220}, {0.036896, -0.056488}, {0.058716, -0.059723}, {0.079529, -0.053864}, {0.096069, -0.040253}, {0.105835, -0.021286}, {0.107727, 0.000000}, {0.101624, 0.020432}, {0.088745, 0.037201}, {0.071228, 0.048279}, {0.051758, 0.052643}, {0.032928, 0.050446}, {0.017075, 0.042755}, {0.005768, 0.031433}, {-0.000320, 0.018707}, {-0.001463, 0.006680}, {0.001268, -0.002888}, {0.006279, -0.008934}, {0.011787, -0.011200}, {0.016190, -0.010185}, {0.018356, -0.006969}, {0.017792, -0.002951}, {0.014709, 0.000503}, {0.009888, 0.002344}, {0.004498, 0.002069}, {-0.000242, -0.000176}, {-0.003347, -0.003647}, {-0.004341, -0.007172}, {-0.003399, -0.009438}, {-0.001381, -0.009315}, {0.000316, -0.006161}, {0.000014, -0.000053}},
                             {{0.028687, 0.040833}, {0.012192, 0.027740}, {0.002047, 0.009346}, {-0.000196, -0.011436}, {0.005745, -0.031311}, {0.018845, -0.047180}, {0.036987, -0.056641}, {0.057312, -0.058289}, {0.076660, -0.051941}, {0.092163, -0.038635}, {0.101624, -0.020432}, {0.103699, 0.000000}, {0.098328, 0.019775}, {0.086548, 0.036285}, {0.070129, 0.047485}, {0.051514, 0.052399}, {0.033264, 0.050964}, {0.017593, 0.044067}, {0.006126, 0.033417}, {-0.000360, 0.021042}, {-0.001980, 0.009041}, {0.000360, -0.000820}, {0.005196, -0.007393}, {0.010811, -0.010277}, {0.015610, -0.009811}, {0.018356, -0.006969}, {0.018463, -0.003059}, {0.015945, 0.000546}, {0.011497, 0.002726}, {0.006184, 0.002846}, {0.001218, 0.000887}, {-0.002348, -0.002558}, {-0.003893, -0.006432}, {-0.003408, -0.009460}, {-0.001552, -0.010460}, {0.000444, -0.008659}},
                             {{0.030029, 0.028519}, {0.017151, 0.024414}, {0.006313, 0.014359}, {-0.000054, -0.000247}, {-0.000293, -0.017166}, {0.006176, -0.033691}, {0.018784, -0.047028}, {0.035889, -0.054962}, {0.055084, -0.056030}, {0.073608, -0.049866}, {0.088745, -0.037201}, {0.098328, -0.019775}, {0.101074, 0.000000}, {0.096619, 0.019424}, {0.085754, 0.035950}, {0.070190, 0.047546}, {0.052155, 0.053070}, {0.034119, 0.052277}, {0.018341, 0.045929}, {0.006519, 0.035553}, {-0.000396, 0.023148}, {-0.002369, 0.010811}, {-0.000173, 0.000394}, {0.004791, -0.006821}, {0.010811, -0.010277}, {0.016190, -0.010185}, {0.019577, -0.007435}, {0.020187, -0.003347}, {0.017914, 0.000613}, {0.013336, 0.003160}, {0.007519, 0.003458}, {0.001761, 0.001284}, {-0.002691, -0.002932}, {-0.004963, -0.008202}, {-0.004753, -0.013191}, {-0.002455, -0.016556}},
                             {{0.025421, 0.015991}, {0.019104, 0.018143}, {0.010918, 0.015533}, {0.003447, 0.007843}, {-0.000904, -0.004131}, {-0.000318, -0.018600}, {0.006088, -0.033173}, {0.018097, -0.045319}, {0.034454, -0.052765}, {0.053040, -0.053955}, {0.071228, -0.048279}, {0.086548, -0.036285}, {0.096619, -0.019424}, {0.100037, 0.000000}, {0.096375, 0.019394}, {0.086243, 0.036163}, {0.071167, 0.048218}, {0.053314, 0.054230}, {0.035156, 0.053833}, {0.019028, 0.047668}, {0.006821, 0.037170}, {-0.000417, 0.024399}, {-0.002512, 0.011467}, {-0.000173, 0.000394}, {0.005196, -0.007393}, {0.011787, -0.011200}, {0.017761, -0.011169}, {0.021591, -0.008194}, {0.022308, -0.003698}, {0.019714, 0.000674}, {0.014343, 0.003399}, {0.007351, 0.003382}, {0.000263, 0.000191}, {-0.005379, -0.005859}, {-0.008339, -0.013771}, {-0.007950, -0.022064}},
                             {{0.016098, 0.006111}, {0.017532, 0.011024}, {0.014359, 0.013641}, {0.008568, 0.012192}, {0.002626, 0.005978}, {-0.000992, -0.004528}, {-0.000304, -0.017807}, {0.005802, -0.031647}, {0.017365, -0.043488}, {0.033325, -0.051056}, {0.051758, -0.052643}, {0.070129, -0.047485}, {0.085754, -0.035950}, {0.096375, -0.019394}, {0.100464, 0.000000}, {0.097351, 0.019577}, {0.087524, 0.036682}, {0.072510, 0.049103}, {0.054443, 0.055389}, {0.035950, 0.055054}, {0.019455, 0.048706}, {0.006931, 0.037781}, {-0.000417, 0.024399}, {-0.002369, 0.010811}, {0.000360, -0.000820}, {0.006279, -0.008934}, {0.013435, -0.012764}, {0.019791, -0.012444}, {0.023636, -0.008972}, {0.023880, -0.003960}, {0.020248, 0.000692}, {0.013374, 0.003168}, {0.004597, 0.002115}, {-0.004234, -0.003084}, {-0.011169, -0.012169}, {-0.014534, -0.024017}},
                             {{0.004238, 0.000702}, {0.012894, 0.004894}, {0.015717, 0.009880}, {0.013618, 0.012939}, {0.008499, 0.012093}, {0.002851, 0.006485}, {-0.000778, -0.003551}, {-0.000284, -0.016602}, {0.005581, -0.030441}, {0.016983, -0.042511}, {0.032928, -0.050446}, {0.051514, -0.052399}, {0.070190, -0.047546}, {0.086243, -0.036163}, {0.097351, -0.019577}, {0.101685, 0.000000}, {0.098694, 0.019852}, {0.088806, 0.037231}, {0.073547, 0.049835}, {0.055145, 0.056091}, {0.036255, 0.055511}, {0.019455, 0.048706}, {0.006821, 0.037170}, {-0.000396, 0.023148}, {-0.001980, 0.009041}, {0.001268, -0.002888}, {0.007717, -0.010979}, {0.015221, -0.014458}, {0.021561, -0.013557}, {0.024857, -0.009438}, {0.023941, -0.003967}, {0.018585, 0.000635}, {0.009567, 0.002266}, {-0.001448, -0.000666}, {-0.012215, -0.008896}, {-0.020309, -0.022125}},
                             {{-0.007580, 0.000259}, {0.006313, 0.001047}, {0.014717, 0.005585}, {0.017242, 0.010834}, {0.014778, 0.014038}, {0.009293, 0.013222}, {0.003298, 0.007507}, {-0.000605, -0.002762}, {-0.000276, -0.016129}, {0.005562, -0.030334}, {0.017075, -0.042755}, {0.033264, -0.050964}, {0.052155, -0.053070}, {0.071167, -0.048218}, {0.087524, -0.036682}, {0.098694, -0.019852}, {0.103027, 0.000000}, {0.099854, 0.020096}, {0.089661, 0.037598}, {0.073975, 0.050110}, {0.055145, 0.056091}, {0.035950, 0.055054}, {0.019028, 0.047668}, {0.006519, 0.035553}, {-0.000360, 0.021042}, {-0.001463, 0.006680}, {0.002279, -0.005188}, {0.009056, -0.012894}, {0.016556, -0.015717}, {0.022354, -0.014053}, {0.024506, -0.009300}, {0.021820, -0.003616}, {0.014183, 0.000485}, {0.002638, 0.000625}, {-0.010796, -0.004967}, {-0.023422, -0.017059}},
                             {{-0.017014, 0.004032}, {-0.000727, 0.000025}, {0.011665, 0.001934}, {0.018585, 0.007053}, {0.019760, 0.012428}, {0.016220, 0.015404}, {0.009933, 0.014130}, {0.003447, 0.007843}, {-0.000659, -0.003010}, {-0.000288, -0.016876}, {0.005768, -0.031433}, {0.017593, -0.044067}, {0.034119, -0.052277}, {0.053314, -0.054230}, {0.072510, -0.049103}, {0.088806, -0.037231}, {0.099854, -0.020096}, {0.103943, 0.000000}, {0.100342, 0.020172}, {0.089661, 0.037598}, {0.073547, 0.049835}, {0.054443, 0.055389}, {0.035156, 0.053833}, {0.018341, 0.045929}, {0.006126, 0.033417}, {-0.000320, 0.018707}, {-0.000973, 0.004444}, {0.003086, -0.007023}, {0.009880, -0.014061}, {0.016937, -0.016083}, {0.021729, -0.013664}, {0.022278, -0.008453}, {0.017456, -0.002893}, {0.007320, 0.000250}, {-0.006790, -0.001609}, {-0.022491, -0.010345}},
                             {{-0.022491, 0.010345}, {-0.006790, 0.001609}, {0.007320, -0.000250}, {0.017456, 0.002893}, {0.022278, 0.008453}, {0.021729, 0.013664}, {0.016937, 0.016083}, {0.009880, 0.014061}, {0.003086, 0.007023}, {-0.000973, -0.004444}, {-0.000320, -0.018707}, {0.006126, -0.033417}, {0.018341, -0.045929}, {0.035156, -0.053833}, {0.054443, -0.055389}, {0.073547, -0.049835}, {0.089661, -0.037598}, {0.100342, -0.020172}, {0.103943, 0.000000}, {0.099854, 0.020096}, {0.088806, 0.037231}, {0.072510, 0.049103}, {0.053314, 0.054230}, {0.034119, 0.052277}, {0.017593, 0.044067}, {0.005768, 0.031433}, {-0.000288, 0.016876}, {-0.000659, 0.003010}, {0.003447, -0.007843}, {0.009933, -0.014130}, {0.016220, -0.015404}, {0.019760, -0.012428}, {0.018585, -0.007053}, {0.011665, -0.001934}, {-0.000727, -0.000025}, {-0.017014, -0.004032}},
                             {{-0.023422, 0.017059}, {-0.010796, 0.004967}, {0.002638, -0.000625}, {0.014183, -0.000485}, {0.021820, 0.003616}, {0.024506, 0.009300}, {0.022354, 0.014053}, {0.016556, 0.015717}, {0.009056, 0.012894}, {0.002279, 0.005188}, {-0.001463, -0.006680}, {-0.000360, -0.021042}, {0.006519, -0.035553}, {0.019028, -0.047668}, {0.035950, -0.055054}, {0.055145, -0.056091}, {0.073975, -0.050110}, {0.089661, -0.037598}, {0.099854, -0.020096}, {0.103027, 0.000000}, {0.098694, 0.019852}, {0.087524, 0.036682}, {0.071167, 0.048218}, {0.052155, 0.053070}, {0.033264, 0.050964}, {0.017075, 0.042755}, {0.005562, 0.030334}, {-0.000276, 0.016129}, {-0.000605, 0.002762}, {0.003298, -0.007507}, {0.009293, -0.013222}, {0.014778, -0.014038}, {0.017242, -0.010834}, {0.014717, -0.005585}, {0.006313, -0.001047}, {-0.007580, -0.000259}},
                             {{-0.020309, 0.022125}, {-0.012215, 0.008896}, {-0.001448, 0.000666}, {0.009567, -0.002266}, {0.018585, -0.000635}, {0.023941, 0.003967}, {0.024857, 0.009438}, {0.021561, 0.013557}, {0.015221, 0.014458}, {0.007717, 0.010979}, {0.001268, 0.002888}, {-0.001980, -0.009041}, {-0.000396, -0.023148}, {0.006821, -0.037170}, {0.019455, -0.048706}, {0.036255, -0.055511}, {0.055145, -0.056091}, {0.073547, -0.049835}, {0.088806, -0.037231}, {0.098694, -0.019852}, {0.101685, 0.000000}, {0.097351, 0.019577}, {0.086243, 0.036163}, {0.070190, 0.047546}, {0.051514, 0.052399}, {0.032928, 0.050446}, {0.016983, 0.042511}, {0.005581, 0.030441}, {-0.000284, 0.016602}, {-0.000778, 0.003551}, {0.002851, -0.006485}, {0.008499, -0.012093}, {0.013618, -0.012939}, {0.015717, -0.009880}, {0.012894, -0.004894}, {0.004238, -0.000702}},
                             {{-0.014534, 0.024017}, {-0.011169, 0.012169}, {-0.004234, 0.003084}, {0.004597, -0.002115}, {0.013374, -0.003168}, {0.020248, -0.000692}, {0.023880, 0.003960}, {0.023636, 0.008972}, {0.019791, 0.012444}, {0.013435, 0.012764}, {0.006279, 0.008934}, {0.000360, 0.000820}, {-0.002369, -0.010811}, {-0.000417, -0.024399}, {0.006931, -0.037781}, {0.019455, -0.048706}, {0.035950, -0.055054}, {0.054443, -0.055389}, {0.072510, -0.049103}, {0.087524, -0.036682}, {0.097351, -0.019577}, {0.100464, 0.000000}, {0.096375, 0.019394}, {0.085754, 0.035950}, {0.070129, 0.047485}, {0.051758, 0.052643}, {0.033325, 0.051056}, {0.017365, 0.043488}, {0.005802, 0.031647}, {-0.000304, 0.017807}, {-0.000992, 0.004528}, {0.002626, -0.005978}, {0.008568, -0.012192}, {0.014359, -0.013641}, {0.017532, -0.011024}, {0.016098, -0.006111}},
                             {{-0.007950, 0.022064}, {-0.008339, 0.013771}, {-0.005379, 0.005859}, {0.000263, -0.000191}, {0.007351, -0.003382}, {0.014343, -0.003399}, {0.019714, -0.000674}, {0.022308, 0.003698}, {0.021591, 0.008194}, {0.017761, 0.011169}, {0.011787, 0.011200}, {0.005196, 0.007393}, {-0.000173, -0.000394}, {-0.002512, -0.011467}, {-0.000417, -0.024399}, {0.006821, -0.037170}, {0.019028, -0.047668}, {0.035156, -0.053833}, {0.053314, -0.054230}, {0.071167, -0.048218}, {0.086243, -0.036163}, {0.096375, -0.019394}, {0.100037, 0.000000}, {0.096619, 0.019424}, {0.086548, 0.036285}, {0.071228, 0.048279}, {0.053040, 0.053955}, {0.034454, 0.052765}, {0.018097, 0.045319}, {0.006088, 0.033173}, {-0.000318, 0.018600}, {-0.000904, 0.004131}, {0.003447, -0.007843}, {0.010918, -0.015533}, {0.019104, -0.018143}, {0.025421, -0.015991}},
                             {{-0.002455, 0.016556}, {-0.004753, 0.013191}, {-0.004963, 0.008202}, {-0.002691, 0.002932}, {0.001761, -0.001284}, {0.007519, -0.003458}, {0.013336, -0.003160}, {0.017914, -0.000613}, {0.020187, 0.003347}, {0.019577, 0.007435}, {0.016190, 0.010185}, {0.010811, 0.010277}, {0.004791, 0.006821}, {-0.000173, -0.000394}, {-0.002369, -0.010811}, {-0.000396, -0.023148}, {0.006519, -0.035553}, {0.018341, -0.045929}, {0.034119, -0.052277}, {0.052155, -0.053070}, {0.070190, -0.047546}, {0.085754, -0.035950}, {0.096619, -0.019424}, {0.101074, 0.000000}, {0.098328, 0.019775}, {0.088745, 0.037201}, {0.073608, 0.049866}, {0.055084, 0.056030}, {0.035889, 0.054962}, {0.018784, 0.047028}, {0.006176, 0.033691}, {-0.000293, 0.017166}, {-0.000054, 0.000247}, {0.006313, -0.014359}, {0.017151, -0.024414}, {0.030029, -0.028519}},
                             {{0.000444, 0.008659}, {-0.001552, 0.010460}, {-0.003408, 0.009460}, {-0.003893, 0.006432}, {-0.002348, 0.002558}, {0.001218, -0.000887}, {0.006184, -0.002846}, {0.011497, -0.002726}, {0.015945, -0.000546}, {0.018463, 0.003059}, {0.018356, 0.006969}, {0.015610, 0.009811}, {0.010811, 0.010277}, {0.005196, 0.007393}, {0.000360, 0.000820}, {-0.001980, -0.009041}, {-0.000360, -0.021042}, {0.006126, -0.033417}, {0.017593, -0.044067}, {0.033264, -0.050964}, {0.051514, -0.052399}, {0.070129, -0.047485}, {0.086548, -0.036285}, {0.098328, -0.019775}, {0.103699, 0.000000}, {0.101624, 0.020432}, {0.092163, 0.038635}, {0.076660, 0.051941}, {0.057312, 0.058289}, {0.036987, 0.056641}, {0.018845, 0.047180}, {0.005745, 0.031311}, {-0.000196, 0.011436}, {0.002047, -0.009346}, {0.012192, -0.027740}, {0.028687, -0.040833}},
                             {{0.000014, 0.000053}, {0.000316, 0.006161}, {-0.001381, 0.009315}, {-0.003399, 0.009438}, {-0.004341, 0.007172}, {-0.003347, 0.003647}, {-0.000242, 0.000176}, {0.004498, -0.002069}, {0.009888, -0.002344}, {0.014709, -0.000503}, {0.017792, 0.002951}, {0.018356, 0.006969}, {0.016190, 0.010185}, {0.011787, 0.011200}, {0.006279, 0.008934}, {0.001268, 0.002888}, {-0.001463, -0.006680}, {-0.000320, -0.018707}, {0.005768, -0.031433}, {0.017075, -0.042755}, {0.032928, -0.050446}, {0.051758, -0.052643}, {0.071228, -0.048279}, {0.088745, -0.037201}, {0.101624, -0.020432}, {0.107727, 0.000000}, {0.105835, 0.021286}, {0.096069, 0.040253}, {0.079529, 0.053864}, {0.058716, 0.059723}, {0.036896, 0.056488}, {0.017654, 0.044220}, {0.004463, 0.024338}, {0.000007, -0.000388}, {0.005764, -0.026321}, {0.021713, -0.049408}},
                             {{-0.003569, -0.007423}, {0.000317, 0.001245}, {0.000400, 0.007790}, {-0.001665, 0.011230}, {-0.004116, 0.011429}, {-0.005444, 0.008995}, {-0.004688, 0.005108}, {-0.001592, 0.001160}, {0.003395, -0.001562}, {0.009262, -0.002195}, {0.014709, -0.000503}, {0.018463, 0.003059}, {0.019577, 0.007435}, {0.017761, 0.011169}, {0.013435, 0.012764}, {0.007717, 0.010979}, {0.002279, 0.005188}, {-0.000973, -0.004444}, {-0.000288, -0.016876}, {0.005562, -0.030334}, {0.016983, -0.042511}, {0.033325, -0.051056}, {0.053040, -0.053955}, {0.073608, -0.049866}, {0.092163, -0.038635}, {0.105835, -0.021286}, {0.112305, 0.000000}, {0.110107, 0.022141}, {0.099243, 0.041595}, {0.081116, 0.054932}, {0.058380, 0.059387}, {0.034851, 0.053406}, {0.014755, 0.036957}, {0.002157, 0.011765}, {0.000324, -0.018982}, {0.011147, -0.050903}},
                             {{-0.009247, -0.012253}, {-0.001534, -0.003191}, {0.001344, 0.005268}, {0.000586, 0.011414}, {-0.002119, 0.014290}, {-0.004974, 0.013809}, {-0.006447, 0.010651}, {-0.005577, 0.006073}, {-0.002127, 0.001549}, {0.003395, -0.001562}, {0.009888, -0.002344}, {0.015945, -0.000546}, {0.020187, 0.003347}, {0.021591, 0.008194}, {0.019791, 0.012444}, {0.015221, 0.014458}, {0.009056, 0.012894}, {0.003086, 0.007023}, {-0.000659, -0.003010}, {-0.000276, -0.016129}, {0.005581, -0.030441}, {0.017365, -0.043488}, {0.034454, -0.052765}, {0.055084, -0.056030}, {0.076660, -0.051941}, {0.096069, -0.040253}, {0.110107, -0.022141}, {0.116272, 0.000000}, {0.113159, 0.022751}, {0.100647, 0.042206}, {0.080505, 0.054535}, {0.055725, 0.056671}, {0.030670, 0.046967}, {0.010178, 0.025497}, {-0.001053, -0.005741}, {0.000734, -0.042938}},
                             {{-0.015343, -0.013611}, {-0.004673, -0.006191}, {0.001134, 0.002357}, {0.002542, 0.009964}, {0.000773, 0.015068}, {-0.002499, 0.016861}, {-0.005524, 0.015335}, {-0.006844, 0.011307}, {-0.005577, 0.006073}, {-0.001592, 0.001160}, {0.004498, -0.002069}, {0.011497, -0.002726}, {0.017914, -0.000613}, {0.022308, 0.003698}, {0.023636, 0.008972}, {0.021561, 0.013557}, {0.016556, 0.015717}, {0.009880, 0.014061}, {0.003447, 0.007843}, {-0.000605, -0.002762}, {-0.000284, -0.016602}, {0.005802, -0.031647}, {0.018097, -0.045319}, {0.035889, -0.054962}, {0.057312, -0.058289}, {0.079529, -0.053864}, {0.099243, -0.041595}, {0.113159, -0.022751}, {0.118591, 0.000000}, {0.114136, 0.022949}, {0.099854, 0.041870}, {0.077698, 0.052643}, {0.051178, 0.052063}, {0.025101, 0.038452}, {0.004810, 0.012047}, {-0.004543, -0.024765}},
                             {{-0.019913, -0.011589}, {-0.008102, -0.007187}, {-0.000187, -0.000248}, {0.003498, 0.007275}, {0.003460, 0.013565}, {0.000887, 0.017288}, {-0.002645, 0.017838}, {-0.005524, 0.015335}, {-0.006447, 0.010651}, {-0.004688, 0.005108}, {-0.000242, 0.000176}, {0.006184, -0.002846}, {0.013336, -0.003160}, {0.019714, -0.000674}, {0.023880, 0.003960}, {0.024857, 0.009438}, {0.022354, 0.014053}, {0.016937, 0.016083}, {0.009933, 0.014130}, {0.003298, 0.007507}, {-0.000778, -0.003551}, {-0.000304, -0.017807}, {0.006088, -0.033173}, {0.018784, -0.047028}, {0.036987, -0.056641}, {0.058716, -0.059723}, {0.081116, -0.054932}, {0.100647, -0.042206}, {0.114136, -0.022949}, {0.118774, 0.000000}, {0.113220, 0.022766}, {0.097717, 0.040955}, {0.074402, 0.050415}, {0.046997, 0.047821}, {0.020599, 0.031555}, {0.000805, 0.002016}},
                             {{-0.021240, -0.007244}, {-0.010620, -0.006184}, {-0.002220, -0.001968}, {0.003019, 0.003998}, {0.004864, 0.010117}, {0.003801, 0.014900}, {0.000887, 0.017288}, {-0.002499, 0.016861}, {-0.004974, 0.013809}, {-0.005444, 0.008995}, {-0.003347, 0.003647}, {0.001218, -0.000887}, {0.007519, -0.003458}, {0.014343, -0.003399}, {0.020248, -0.000692}, {0.023941, 0.003967}, {0.024506, 0.009300}, {0.021729, 0.013664}, {0.016220, 0.015404}, {0.009293, 0.013222}, {0.002851, 0.006485}, {-0.000992, -0.004528}, {-0.000318, -0.018600}, {0.006176, -0.033691}, {0.018845, -0.047180}, {0.036896, -0.056488}, {0.058380, -0.059387}, {0.080505, -0.054535}, {0.099854, -0.041870}, {0.113220, -0.022766}, {0.117920, 0.000000}, {0.112671, 0.022659}, {0.097656, 0.040924}, {0.074829, 0.050690}, {0.047882, 0.048706}, {0.021774, 0.033356}},
                             {{-0.018250, -0.002388}, {-0.011116, -0.003790}, {-0.004295, -0.002501}, {0.001051, 0.000933}, {0.004177, 0.005531}, {0.004864, 0.010117}, {0.003460, 0.013565}, {0.000773, 0.015068}, {-0.002119, 0.014290}, {-0.004116, 0.011429}, {-0.004341, 0.007172}, {-0.002348, 0.002558}, {0.001761, -0.001284}, {0.007351, -0.003382}, {0.013374, -0.003168}, {0.018585, -0.000635}, {0.021820, 0.003616}, {0.022278, 0.008453}, {0.019760, 0.012428}, {0.014778, 0.014038}, {0.008499, 0.012093}, {0.002626, 0.005978}, {-0.000904, -0.004131}, {-0.000293, -0.017166}, {0.005745, -0.031311}, {0.017654, -0.044220}, {0.034851, -0.053406}, {0.055725, -0.056671}, {0.077698, -0.052643}, {0.097717, -0.040955}, {0.112671, -0.022659}, {0.119934, 0.000000}, {0.117920, 0.023712}, {0.106323, 0.044586}, {0.086670, 0.058716}, {0.061768, 0.062805}},
                             {{-0.010803, 0.000740}, {-0.008827, -0.001155}, {-0.005634, -0.001922}, {-0.002058, -0.001198}, {0.001051, 0.000933}, {0.003019, 0.003998}, {0.003498, 0.007275}, {0.002542, 0.009964}, {0.000586, 0.011414}, {-0.001665, 0.011230}, {-0.003399, 0.009438}, {-0.003893, 0.006432}, {-0.002691, 0.002932}, {0.000263, -0.000191}, {0.004597, -0.002115}, {0.009567, -0.002266}, {0.014183, -0.000485}, {0.017456, 0.002893}, {0.018585, 0.007053}, {0.017242, 0.010834}, {0.013618, 0.012939}, {0.008568, 0.012192}, {0.003447, 0.007843}, {-0.000054, -0.000247}, {-0.000196, -0.011436}, {0.004463, -0.024338}, {0.014755, -0.036957}, {0.030670, -0.046967}, {0.051178, -0.052063}, {0.074402, -0.050415}, {0.097656, -0.040924}, {0.117920, -0.023712}, {0.132324, 0.000000}, {0.138428, 0.027832}, {0.134888, 0.056549}, {0.121704, 0.082458}},
                             {{0.000149, -0.000041}, {-0.003607, 0.000247}, {-0.005543, -0.000725}, {-0.005634, -0.001922}, {-0.004295, -0.002501}, {-0.002220, -0.001968}, {-0.000187, -0.000248}, {0.001134, 0.002357}, {0.001344, 0.005268}, {0.000400, 0.007790}, {-0.001381, 0.009315}, {-0.003408, 0.009460}, {-0.004963, 0.008202}, {-0.005379, 0.005859}, {-0.004234, 0.003084}, {-0.001448, 0.000666}, {0.002638, -0.000625}, {0.007320, -0.000250}, {0.011665, 0.001934}, {0.014717, 0.005585}, {0.015717, 0.009880}, {0.014359, 0.013641}, {0.010918, 0.015533}, {0.006313, 0.014359}, {0.002047, 0.009346}, {0.000007, 0.000388}, {0.002157, -0.011765}, {0.010178, -0.025497}, {0.025101, -0.038452}, {0.046997, -0.047821}, {0.074829, -0.050690}, {0.106323, -0.044586}, {0.138428, -0.027832}, {0.167114, 0.000000}, {0.188599, 0.037933}, {0.199097, 0.083496}},
                             {{0.012688, -0.006371}, {0.003983, -0.001089}, {-0.003607, 0.000247}, {-0.008827, -0.001155}, {-0.011116, -0.003790}, {-0.010620, -0.006184}, {-0.008102, -0.007187}, {-0.004673, -0.006191}, {-0.001534, -0.003191}, {0.000317, 0.001245}, {0.000316, 0.006161}, {-0.001552, 0.010460}, {-0.004753, 0.013191}, {-0.008339, 0.013771}, {-0.011169, 0.012169}, {-0.012215, 0.008896}, {-0.010796, 0.004967}, {-0.006790, 0.001609}, {-0.000727, 0.000025}, {0.006313, 0.001047}, {0.012894, 0.004894}, {0.017532, 0.011024}, {0.019104, 0.018143}, {0.017151, 0.024414}, {0.012192, 0.027740}, {0.005764, 0.026321}, {0.000324, 0.018982}, {-0.001053, 0.005741}, {0.004810, -0.012047}, {0.020599, -0.031555}, {0.047882, -0.048706}, {0.086670, -0.058716}, {0.134888, -0.056549}, {0.188599, -0.037933}, {0.241943, 0.000000}, {0.288330, 0.057983}},
                             {{0.024216, -0.018951}, {0.012688, -0.006371}, {0.000149, -0.000041}, {-0.010803, 0.000740}, {-0.018250, -0.002388}, {-0.021240, -0.007244}, {-0.019913, -0.011589}, {-0.015343, -0.013611}, {-0.009247, -0.012253}, {-0.003569, -0.007423}, {0.000014, 0.000053}, {0.000444, 0.008659}, {-0.002455, 0.016556}, {-0.007950, 0.022064}, {-0.014534, 0.024017}, {-0.020309, 0.022125}, {-0.023422, 0.017059}, {-0.022491, 0.010345}, {-0.017014, 0.004032}, {-0.007580, 0.000259}, {0.004238, 0.000702}, {0.016098, 0.006111}, {0.025421, 0.015991}, {0.030029, 0.028519}, {0.028687, 0.040833}, {0.021713, 0.049408}, {0.011147, 0.050903}, {0.000734, 0.042938}, {-0.004543, 0.024765}, {0.000805, -0.002016}, {0.021774, -0.033356}, {0.061768, -0.062805}, {0.121704, -0.082458}, {0.199097, -0.083496}, {0.288330, -0.057983}, {0.379883, 0.000000}}};

static __device__ __constant__ __half2 d_W4[48][48];
static __half2                         W4[48][48] = {{{0.372559, 0.000000}, {0.284424, 0.057190}, {0.198242, 0.083130}, {0.122986, 0.083313}, {0.064209, 0.065308}, {0.024353, 0.037323}, {0.002768, 0.006931}, {-0.003611, -0.019684}, {0.000658, -0.038483}, {0.010468, -0.047791}, {0.021072, -0.047943}, {0.028824, -0.041016}, {0.031555, -0.029984}, {0.028702, -0.018051}, {0.021072, -0.007996}, {0.010490, -0.001740}, {-0.000782, -0.000027}, {-0.010559, -0.002502}, {-0.017197, -0.007912}, {-0.019897, -0.014488}, {-0.018723, -0.020386}, {-0.014572, -0.024078}, {-0.008881, -0.024658}, {-0.003260, -0.021988}, {0.000854, -0.016647}, {0.002499, -0.009796}, {0.001356, -0.002819}, {-0.002220, 0.002941}, {-0.007320, 0.006493}, {-0.012718, 0.007401}, {-0.017136, 0.005844}, {-0.019592, 0.002563}, {-0.019531, -0.001337}, {-0.016998, -0.004646}, {-0.012611, -0.006332}, {-0.007389, -0.005779}, {-0.002510, -0.002930}, {0.000949, 0.001697}, {0.002291, 0.007111}, {0.001372, 0.012085}, {-0.001323, 0.015442}, {-0.004761, 0.016312}, {-0.007561, 0.014435}, {-0.008278, 0.010216}, {-0.005737, 0.004749}, {0.000665, -0.000357}, {0.010765, -0.003263}, {0.023560, -0.002268}},
                             {{0.284424, -0.057190}, {0.239380, 0.000000}, {0.187378, 0.037689}, {0.135010, 0.056580}, {0.087708, 0.059418}, {0.049438, 0.050262}, {0.022141, 0.033905}, {0.005962, 0.014931}, {-0.000504, -0.002745}, {0.000279, -0.016342}, {0.005344, -0.024399}, {0.011780, -0.026794}, {0.017166, -0.024429}, {0.019943, -0.018951}, {0.019424, -0.012215}, {0.015854, -0.006020}, {0.010117, -0.001678}, {0.003489, 0.000119}, {-0.002705, -0.000641}, {-0.007370, -0.003389}, {-0.009842, -0.007172}, {-0.010010, -0.010902}, {-0.008232, -0.013611}, {-0.005268, -0.014626}, {-0.002037, -0.013733}, {0.000572, -0.011147}, {0.001897, -0.007439}, {0.001634, -0.003399}, {-0.000123, 0.000163}, {-0.002926, 0.002596}, {-0.006096, 0.003548}, {-0.008881, 0.003029}, {-0.010643, 0.001393}, {-0.010994, -0.000753}, {-0.009880, -0.002701}, {-0.007591, -0.003813}, {-0.004688, -0.003668}, {-0.001863, -0.002174}, {0.000228, 0.000407}, {0.001132, 0.003515}, {0.000728, 0.006413}, {-0.000716, 0.008362}, {-0.002571, 0.008812}, {-0.003960, 0.007561}, {-0.003933, 0.004852}, {-0.001686, 0.001396}, {0.003229, -0.001735}, {0.010765, -0.003263}},
                             {{0.198242, -0.083130}, {0.187378, -0.037689}, {0.165894, 0.000000}, {0.137451, 0.027649}, {0.105896, 0.044373}, {0.074829, 0.050720}, {0.047424, 0.048248}, {0.025711, 0.039398}, {0.010750, 0.026932}, {0.002481, 0.013527}, {-0.000025, 0.001478}, {0.001676, -0.007652}, {0.005745, -0.013077}, {0.010391, -0.014793}, {0.014160, -0.013451}, {0.016083, -0.010109}, {0.015778, -0.005989}, {0.013435, -0.002228}, {0.009651, 0.000330}, {0.005245, 0.001243}, {0.001088, 0.000501}, {-0.002104, -0.001533}, {-0.003899, -0.004246}, {-0.004196, -0.006935}, {-0.003231, -0.008972}, {-0.001471, -0.009911}, {0.000493, -0.009605}, {0.002085, -0.008171}, {0.002872, -0.005974}, {0.002649, -0.003508}, {0.001462, -0.001297}, {-0.000412, 0.000240}, {-0.002546, 0.000868}, {-0.004467, 0.000585}, {-0.005768, -0.000395}, {-0.006195, -0.001693}, {-0.005714, -0.002869}, {-0.004505, -0.003525}, {-0.002918, -0.003407}, {-0.001380, -0.002466}, {-0.000284, -0.000882}, {0.000112, 0.000982}, {-0.000228, 0.002665}, {-0.001085, 0.003719}, {-0.002012, 0.003843}, {-0.002417, 0.002983}, {-0.001686, 0.001396}, {0.000665, -0.000357}},
                             {{0.122986, -0.083313}, {0.135010, -0.056580}, {0.137451, -0.027649}, {0.130737, 0.000000}, {0.116211, 0.023361}, {0.096130, 0.040314}, {0.073364, 0.049713}, {0.050720, 0.051605}, {0.030685, 0.047028}, {0.015038, 0.037659}, {0.004719, 0.025726}, {-0.000228, 0.013344}, {-0.000531, 0.002424}, {0.002510, -0.005714}, {0.007317, -0.010414}, {0.012314, -0.011703}, {0.016220, -0.010193}, {0.018158, -0.006893}, {0.017838, -0.002958}, {0.015457, 0.000528}, {0.011612, 0.002750}, {0.007137, 0.003284}, {0.002914, 0.002123}, {-0.000330, -0.000360}, {-0.002142, -0.003540}, {-0.002411, -0.006691}, {-0.001357, -0.009148}, {0.000536, -0.010445}, {0.002649, -0.010384}, {0.004368, -0.009087}, {0.005219, -0.006912}, {0.004951, -0.004391}, {0.003592, -0.002090}, {0.001414, -0.000482}, {-0.001127, 0.000147}, {-0.003510, -0.000240}, {-0.005264, -0.001438}, {-0.006073, -0.003048}, {-0.005852, -0.004578}, {-0.004753, -0.005550}, {-0.003149, -0.005627}, {-0.001510, -0.004688}, {-0.000325, -0.002861}, {0.000042, -0.000490}, {-0.000560, 0.001921}, {-0.002012, 0.003843}, {-0.003933, 0.004852}, {-0.005737, 0.004749}},
                             {{0.064209, -0.065308}, {0.087708, -0.059418}, {0.105896, -0.044373}, {0.116211, -0.023361}, {0.117432, 0.000000}, {0.109985, 0.022110}, {0.095337, 0.039948}, {0.075989, 0.051453}, {0.054810, 0.055756}, {0.034668, 0.053131}, {0.017914, 0.044861}, {0.006042, 0.032959}, {-0.000336, 0.019653}, {-0.001566, 0.007153}, {0.001254, -0.002853}, {0.006542, -0.009315}, {0.012566, -0.011940}, {0.017746, -0.011162}, {0.020950, -0.007950}, {0.021561, -0.003574}, {0.019608, 0.000670}, {0.015656, 0.003708}, {0.010582, 0.004868}, {0.005440, 0.003963}, {0.001183, 0.001288}, {-0.001514, -0.002502}, {-0.002361, -0.006554}, {-0.001485, -0.010010}, {0.000626, -0.012199}, {0.003252, -0.012749}, {0.005611, -0.011673}, {0.007034, -0.009315}, {0.007095, -0.006294}, {0.005707, -0.003321}, {0.003111, -0.001060}, {-0.000168, 0.000022}, {-0.003464, -0.000237}, {-0.006111, -0.001671}, {-0.007603, -0.003817}, {-0.007706, -0.006027}, {-0.006523, -0.007614}, {-0.004475, -0.008003}, {-0.002213, -0.006870}, {-0.000482, -0.004242}, {0.000042, -0.000490}, {-0.001085, 0.003719}, {-0.003960, 0.007561}, {-0.008278, 0.010216}},
                             {{0.024353, -0.037323}, {0.049438, -0.050262}, {0.074829, -0.050720}, {0.096130, -0.040314}, {0.109985, -0.022110}, {0.114563, 0.000000}, {0.109741, 0.022079}, {0.096924, 0.040649}, {0.078491, 0.053192}, {0.057434, 0.058411}, {0.036804, 0.056366}, {0.019241, 0.048187}, {0.006584, 0.035919}, {-0.000374, 0.021866}, {-0.001845, 0.008430}, {0.001099, -0.002501}, {0.006813, -0.009697}, {0.013428, -0.012756}, {0.019211, -0.012077}, {0.022873, -0.008682}, {0.023697, -0.003929}, {0.021683, 0.000741}, {0.017395, 0.004124}, {0.011826, 0.005440}, {0.006115, 0.004456}, {0.001353, 0.001474}, {-0.001684, -0.002783}, {-0.002649, -0.007355}, {-0.001672, -0.011276}, {0.000706, -0.013756}, {0.003668, -0.014381}, {0.006321, -0.013138}, {0.007881, -0.010437}, {0.007866, -0.006977}, {0.006165, -0.003588}, {0.003069, -0.001047}, {-0.000801, 0.000105}, {-0.004650, -0.000318}, {-0.007683, -0.002100}, {-0.009293, -0.004665}, {-0.009209, -0.007202}, {-0.007584, -0.008850}, {-0.004963, -0.008873}, {-0.002213, -0.006870}, {-0.000325, -0.002861}, {-0.000228, 0.002665}, {-0.002571, 0.008812}, {-0.007561, 0.014435}},
                             {{0.002768, -0.006931}, {0.022141, -0.033905}, {0.047424, -0.048248}, {0.073364, -0.049713}, {0.095337, -0.039948}, {0.109741, -0.022079}, {0.114868, 0.000000}, {0.110413, 0.022217}, {0.097717, 0.040985}, {0.079224, 0.053680}, {0.057983, 0.058990}, {0.037140, 0.056915}, {0.019394, 0.048584}, {0.006615, 0.036072}, {-0.000372, 0.021774}, {-0.001775, 0.008102}, {0.001307, -0.002974}, {0.007179, -0.010216}, {0.013931, -0.013237}, {0.019791, -0.012436}, {0.023407, -0.008888}, {0.024124, -0.003998}, {0.021912, 0.000750}, {0.017395, 0.004124}, {0.011612, 0.005341}, {0.005745, 0.004185}, {0.000918, 0.001000}, {-0.002085, -0.003445}, {-0.002932, -0.008141}, {-0.001791, -0.012077}, {0.000742, -0.014465}, {0.003796, -0.014885}, {0.006428, -0.013367}, {0.007843, -0.010384}, {0.007553, -0.006699}, {0.005501, -0.003201}, {0.002043, -0.000697}, {-0.002115, 0.000277}, {-0.006096, -0.000417}, {-0.009048, -0.002474}, {-0.010345, -0.005196}, {-0.009781, -0.007648}, {-0.007584, -0.008850}, {-0.004475, -0.008003}, {-0.001510, -0.004688}, {0.000112, 0.000982}, {-0.000716, 0.008362}, {-0.004761, 0.016312}},
                             {{-0.003611, 0.019684}, {0.005962, -0.014931}, {0.025711, -0.039398}, {0.050720, -0.051605}, {0.075989, -0.051453}, {0.096924, -0.040649}, {0.110413, -0.022217}, {0.114685, 0.000000}, {0.109619, 0.022049}, {0.096619, 0.040497}, {0.078003, 0.052856}, {0.056915, 0.057892}, {0.036346, 0.055664}, {0.018906, 0.047363}, {0.006416, 0.034973}, {-0.000358, 0.020950}, {-0.001666, 0.007610}, {0.001383, -0.003147}, {0.007114, -0.010124}, {0.013649, -0.012970}, {0.019257, -0.012108}, {0.022659, -0.008606}, {0.023209, -0.003849}, {0.020935, 0.000716}, {0.016449, 0.003897}, {0.010773, 0.004955}, {0.005093, 0.003710}, {0.000482, 0.000525}, {-0.002312, -0.003820}, {-0.003000, -0.008331}, {-0.001781, -0.012016}, {0.000725, -0.014130}, {0.003647, -0.014297}, {0.006062, -0.012604}, {0.007202, -0.009537}, {0.006641, -0.005894}, {0.004375, -0.002546}, {0.000816, -0.000278}, {-0.003286, 0.000430}, {-0.007030, -0.000481}, {-0.009575, -0.002617}, {-0.010345, -0.005196}, {-0.009209, -0.007202}, {-0.006523, -0.007614}, {-0.003149, -0.005627}, {-0.000284, -0.000882}, {0.000728, 0.006413}, {-0.001323, 0.015442}},
                             {{0.000658, 0.038483}, {-0.000504, 0.002745}, {0.010750, -0.026932}, {0.030685, -0.047028}, {0.054810, -0.055756}, {0.078491, -0.053192}, {0.097717, -0.040985}, {0.109619, -0.022049}, {0.112732, 0.000000}, {0.106995, 0.021515}, {0.093811, 0.039337}, {0.075500, 0.051147}, {0.054962, 0.055908}, {0.035065, 0.053711}, {0.018265, 0.045746}, {0.006222, 0.033905}, {-0.000351, 0.020523}, {-0.001704, 0.007782}, {0.001096, -0.002493}, {0.006454, -0.009186}, {0.012596, -0.011963}, {0.017883, -0.011238}, {0.021088, -0.008003}, {0.021622, -0.003586}, {0.019501, 0.000667}, {0.015305, 0.003626}, {0.010010, 0.004604}, {0.004711, 0.003433}, {0.000426, 0.000464}, {-0.002159, -0.003567}, {-0.002781, -0.007721}, {-0.001643, -0.011078}, {0.000664, -0.012947}, {0.003315, -0.012993}, {0.005444, -0.011322}, {0.006351, -0.008415}, {0.005661, -0.005020}, {0.003407, -0.001984}, {0.000026, -0.000009}, {-0.003744, 0.000490}, {-0.007030, -0.000481}, {-0.009048, -0.002474}, {-0.009293, -0.004665}, {-0.007706, -0.006027}, {-0.004753, -0.005550}, {-0.001380, -0.002466}, {0.001132, 0.003515}, {0.001372, 0.012085}},
                             {{0.010468, 0.047791}, {0.000279, 0.016342}, {0.002481, -0.013527}, {0.015038, -0.037659}, {0.034668, -0.053131}, {0.057434, -0.058411}, {0.079224, -0.053680}, {0.096619, -0.040497}, {0.106995, -0.021515}, {0.109131, 0.000000}, {0.103149, 0.020737}, {0.090210, 0.037842}, {0.072632, 0.049225}, {0.052979, 0.053894}, {0.033966, 0.052002}, {0.017822, 0.044647}, {0.006161, 0.033600}, {-0.000359, 0.020981}, {-0.001945, 0.008881}, {0.000438, -0.000998}, {0.005325, -0.007576}, {0.011055, -0.010506}, {0.016098, -0.010117}, {0.019287, -0.007320}, {0.020020, -0.003319}, {0.018280, 0.000625}, {0.014572, 0.003452}, {0.009773, 0.004494}, {0.004894, 0.003567}, {0.000879, 0.000957}, {-0.001617, -0.002674}, {-0.002331, -0.006470}, {-0.001422, -0.009590}, {0.000584, -0.011368}, {0.002935, -0.011505}, {0.004841, -0.010071}, {0.005661, -0.007500}, {0.005047, -0.004478}, {0.003033, -0.001765}, {0.000026, -0.000009}, {-0.003286, 0.000430}, {-0.006096, -0.000417}, {-0.007683, -0.002100}, {-0.007603, -0.003817}, {-0.005852, -0.004578}, {-0.002918, -0.003407}, {0.000228, 0.000407}, {0.002291, 0.007111}},
                             {{0.021072, 0.047943}, {0.005344, 0.024399}, {-0.000025, -0.001478}, {0.004719, -0.025726}, {0.017914, -0.044861}, {0.036804, -0.056366}, {0.057983, -0.058990}, {0.078003, -0.052856}, {0.093811, -0.039337}, {0.103149, -0.020737}, {0.104858, 0.000000}, {0.099060, 0.019928}, {0.086853, 0.036407}, {0.070190, 0.047546}, {0.051544, 0.052429}, {0.033356, 0.051086}, {0.017761, 0.044495}, {0.006283, 0.034271}, {-0.000382, 0.022354}, {-0.002348, 0.010719}, {-0.000445, 0.001012}, {0.003998, -0.005692}, {0.009445, -0.008972}, {0.014420, -0.009064}, {0.017792, -0.006756}, {0.018921, -0.003138}, {0.017700, 0.000606}, {0.014549, 0.003447}, {0.010216, 0.004700}, {0.005653, 0.004116}, {0.001749, 0.001905}, {-0.000831, -0.001373}, {-0.001780, -0.004944}, {-0.001187, -0.008003}, {0.000509, -0.009926}, {0.002642, -0.010353}, {0.004478, -0.009308}, {0.005398, -0.007153}, {0.005047, -0.004478}, {0.003407, -0.001984}, {0.000816, -0.000278}, {-0.002115, 0.000277}, {-0.004650, -0.000318}, {-0.006111, -0.001671}, {-0.006073, -0.003048}, {-0.004505, -0.003525}, {-0.001863, -0.002174}, {0.000949, 0.001697}},
                             {{0.028824, 0.041016}, {0.011780, 0.026794}, {0.001676, 0.007652}, {-0.000228, -0.013344}, {0.006042, -0.032959}, {0.019241, -0.048187}, {0.037140, -0.056915}, {0.056915, -0.057892}, {0.075500, -0.051147}, {0.090210, -0.037842}, {0.099060, -0.019928}, {0.100830, 0.000000}, {0.095642, 0.019241}, {0.084290, 0.035339}, {0.068665, 0.046539}, {0.050903, 0.051788}, {0.033356, 0.051086}, {0.018066, 0.045258}, {0.006546, 0.035706}, {-0.000415, 0.024261}, {-0.002813, 0.012848}, {-0.001345, 0.003061}, {0.002789, -0.003967}, {0.008133, -0.007725}, {0.013252, -0.008331}, {0.016983, -0.006447}, {0.018600, -0.003084}, {0.017914, 0.000613}, {0.015221, 0.003607}, {0.011215, 0.005157}, {0.006775, 0.004936}, {0.002794, 0.003044}, {-0.000022, -0.000037}, {-0.001291, -0.003586}, {-0.001012, -0.006821}, {0.000465, -0.009071}, {0.002531, -0.009926}, {0.004478, -0.009308}, {0.005661, -0.007500}, {0.005661, -0.005020}, {0.004375, -0.002546}, {0.002043, -0.000697}, {-0.000801, 0.000105}, {-0.003464, -0.000237}, {-0.005264, -0.001438}, {-0.005714, -0.002869}, {-0.004688, -0.003668}, {-0.002510, -0.002930}},
                             {{0.031555, 0.029984}, {0.017166, 0.024429}, {0.005745, 0.013077}, {-0.000531, -0.002424}, {-0.000336, -0.019653}, {0.006584, -0.035919}, {0.019394, -0.048584}, {0.036346, -0.055664}, {0.054962, -0.055908}, {0.072632, -0.049225}, {0.086853, -0.036407}, {0.095642, -0.019241}, {0.097839, 0.000000}, {0.093384, 0.018784}, {0.082947, 0.034790}, {0.068176, 0.046173}, {0.051025, 0.051910}, {0.033844, 0.051819}, {0.018600, 0.046570}, {0.006870, 0.037476}, {-0.000449, 0.026245}, {-0.003237, 0.014778}, {-0.002069, 0.004707}, {0.001938, -0.002758}, {0.007366, -0.007000}, {0.012772, -0.008026}, {0.016922, -0.006424}, {0.019028, -0.003155}, {0.018768, 0.000641}, {0.016357, 0.003878}, {0.012459, 0.005733}, {0.007935, 0.005783}, {0.003716, 0.004047}, {0.000577, 0.000953}, {-0.001007, -0.002794}, {-0.000947, -0.006382}, {0.000465, -0.009071}, {0.002642, -0.010353}, {0.004841, -0.010071}, {0.006351, -0.008415}, {0.006641, -0.005894}, {0.005501, -0.003201}, {0.003069, -0.001047}, {-0.000168, 0.000022}, {-0.003510, -0.000240}, {-0.006195, -0.001693}, {-0.007591, -0.003813}, {-0.007389, -0.005779}},
                             {{0.028702, 0.018051}, {0.019943, 0.018951}, {0.010391, 0.014793}, {0.002510, 0.005714}, {-0.001566, -0.007153}, {-0.000374, -0.021866}, {0.006615, -0.036072}, {0.018906, -0.047363}, {0.035065, -0.053711}, {0.052979, -0.053894}, {0.070190, -0.047546}, {0.084290, -0.035339}, {0.093384, -0.018784}, {0.096191, 0.000000}, {0.092407, 0.018585}, {0.082642, 0.034668}, {0.068420, 0.046356}, {0.051666, 0.052551}, {0.034546, 0.052917}, {0.019165, 0.048004}, {0.007168, 0.039063}, {-0.000476, 0.027832}, {-0.003529, 0.016113}, {-0.002491, 0.005669}, {0.001563, -0.002224}, {0.007210, -0.006851}, {0.012962, -0.008148}, {0.017502, -0.006645}, {0.019958, -0.003307}, {0.019928, 0.000681}, {0.017593, 0.004169}, {0.013580, 0.006248}, {0.008797, 0.006413}, {0.004253, 0.004631}, {0.000797, 0.001318}, {-0.001007, -0.002794}, {-0.001012, -0.006821}, {0.000509, -0.009926}, {0.002935, -0.011505}, {0.005444, -0.011322}, {0.007202, -0.009537}, {0.007553, -0.006699}, {0.006165, -0.003588}, {0.003111, -0.001060}, {-0.001127, 0.000147}, {-0.005768, -0.000395}, {-0.009880, -0.002701}, {-0.012611, -0.006332}},
                             {{0.021072, 0.007996}, {0.019424, 0.012215}, {0.014160, 0.013451}, {0.007317, 0.010414}, {0.001254, 0.002853}, {-0.001845, -0.008430}, {-0.000372, -0.021774}, {0.006416, -0.034973}, {0.018265, -0.045746}, {0.033966, -0.052002}, {0.051544, -0.052429}, {0.068665, -0.046539}, {0.082947, -0.034790}, {0.092407, -0.018585}, {0.095703, 0.000000}, {0.092407, 0.018585}, {0.083130, 0.034851}, {0.069092, 0.046814}, {0.052429, 0.053314}, {0.035217, 0.053925}, {0.019623, 0.049133}, {0.007366, 0.040161}, {-0.000491, 0.028702}, {-0.003653, 0.016678}, {-0.002581, 0.005875}, {0.001641, -0.002337}, {0.007557, -0.007179}, {0.013611, -0.008553}, {0.018417, -0.006992}, {0.021027, -0.003485}, {0.020996, 0.000718}, {0.018524, 0.004387}, {0.014236, 0.006546}, {0.009117, 0.006645}, {0.004253, 0.004631}, {0.000577, 0.000953}, {-0.001291, -0.003586}, {-0.001187, -0.008003}, {0.000584, -0.011368}, {0.003315, -0.012993}, {0.006062, -0.012604}, {0.007843, -0.010384}, {0.007866, -0.006977}, {0.005707, -0.003321}, {0.001414, -0.000482}, {-0.004467, 0.000585}, {-0.010994, -0.000753}, {-0.016998, -0.004646}},
                             {{0.010490, 0.001740}, {0.015854, 0.006020}, {0.016083, 0.010109}, {0.012314, 0.011703}, {0.006542, 0.009315}, {0.001099, 0.002501}, {-0.001775, -0.008102}, {-0.000358, -0.020950}, {0.006222, -0.033905}, {0.017822, -0.044647}, {0.033356, -0.051086}, {0.050903, -0.051788}, {0.068176, -0.046173}, {0.082642, -0.034668}, {0.092407, -0.018585}, {0.096008, 0.000000}, {0.092957, 0.018692}, {0.083801, 0.035126}, {0.069824, 0.047302}, {0.053009, 0.053925}, {0.035614, 0.054565}, {0.019836, 0.049683}, {0.007427, 0.040497}, {-0.000492, 0.028793}, {-0.003613, 0.016495}, {-0.002399, 0.005459}, {0.002035, -0.002895}, {0.008179, -0.007767}, {0.014404, -0.009056}, {0.019302, -0.007324}, {0.021851, -0.003622}, {0.021637, 0.000740}, {0.018860, 0.004471}, {0.014236, 0.006546}, {0.008797, 0.006413}, {0.003716, 0.004047}, {-0.000022, -0.000037}, {-0.001780, -0.004944}, {-0.001422, -0.009590}, {0.000664, -0.012947}, {0.003647, -0.014297}, {0.006428, -0.013367}, {0.007881, -0.010437}, {0.007095, -0.006294}, {0.003592, -0.002090}, {-0.002546, 0.000868}, {-0.010643, 0.001393}, {-0.019531, -0.001337}},
                             {{-0.000782, 0.000027}, {0.010117, 0.001678}, {0.015778, 0.005989}, {0.016220, 0.010193}, {0.012566, 0.011940}, {0.006813, 0.009697}, {0.001307, 0.002974}, {-0.001666, -0.007610}, {-0.000351, -0.020523}, {0.006161, -0.033600}, {0.017761, -0.044495}, {0.033356, -0.051086}, {0.051025, -0.051910}, {0.068420, -0.046356}, {0.083130, -0.034851}, {0.092957, -0.018692}, {0.096619, 0.000000}, {0.093567, 0.018814}, {0.084290, 0.035339}, {0.070190, 0.047546}, {0.053192, 0.054108}, {0.035645, 0.054626}, {0.019791, 0.049561}, {0.007366, 0.040161}, {-0.000483, 0.028244}, {-0.003462, 0.015808}, {-0.002069, 0.004707}, {0.002537, -0.003609}, {0.008789, -0.008354}, {0.015038, -0.009453}, {0.019821, -0.007526}, {0.022156, -0.003674}, {0.021637, 0.000740}, {0.018524, 0.004387}, {0.013580, 0.006248}, {0.007935, 0.005783}, {0.002794, 0.003044}, {-0.000831, -0.001373}, {-0.002331, -0.006470}, {-0.001643, -0.011078}, {0.000725, -0.014130}, {0.003796, -0.014885}, {0.006321, -0.013138}, {0.007034, -0.009315}, {0.004951, -0.004391}, {-0.000412, 0.000240}, {-0.008881, 0.003029}, {-0.019592, 0.002563}},
                             {{-0.010559, 0.002502}, {0.003489, -0.000119}, {0.013435, 0.002228}, {0.018158, 0.006893}, {0.017746, 0.011162}, {0.013428, 0.012756}, {0.007179, 0.010216}, {0.001383, 0.003147}, {-0.001704, -0.007782}, {-0.000359, -0.020981}, {0.006283, -0.034271}, {0.018066, -0.045258}, {0.033844, -0.051819}, {0.051666, -0.052551}, {0.069092, -0.046814}, {0.083801, -0.035126}, {0.093567, -0.018814}, {0.097046, 0.000000}, {0.093811, 0.018860}, {0.084290, 0.035339}, {0.070007, 0.047424}, {0.052917, 0.053833}, {0.035370, 0.054169}, {0.019531, 0.048889}, {0.007221, 0.039368}, {-0.000468, 0.027374}, {-0.003273, 0.014946}, {-0.001738, 0.003956}, {0.002939, -0.004185}, {0.009171, -0.008713}, {0.015282, -0.009605}, {0.019821, -0.007526}, {0.021851, -0.003622}, {0.020996, 0.000718}, {0.017593, 0.004169}, {0.012459, 0.005733}, {0.006775, 0.004936}, {0.001749, 0.001905}, {-0.001617, -0.002674}, {-0.002781, -0.007721}, {-0.001781, -0.012016}, {0.000742, -0.014465}, {0.003668, -0.014381}, {0.005611, -0.011673}, {0.005219, -0.006912}, {0.001462, -0.001297}, {-0.006096, 0.003548}, {-0.017136, 0.005844}},
                             {{-0.017197, 0.007912}, {-0.002705, 0.000641}, {0.009651, -0.000330}, {0.017838, 0.002958}, {0.020950, 0.007950}, {0.019211, 0.012077}, {0.013931, 0.013237}, {0.007114, 0.010124}, {0.001096, 0.002493}, {-0.001945, -0.008881}, {-0.000382, -0.022354}, {0.006546, -0.035706}, {0.018600, -0.046570}, {0.034546, -0.052917}, {0.052429, -0.053314}, {0.069824, -0.047302}, {0.084290, -0.035339}, {0.093811, -0.018860}, {0.096985, 0.000000}, {0.093445, 0.018799}, {0.083801, 0.035126}, {0.069397, 0.047028}, {0.052307, 0.053223}, {0.034821, 0.053345}, {0.019165, 0.047974}, {0.007050, 0.038422}, {-0.000453, 0.026520}, {-0.003122, 0.014259}, {-0.001535, 0.003494}, {0.003094, -0.004402}, {0.009171, -0.008713}, {0.015038, -0.009453}, {0.019302, -0.007324}, {0.021027, -0.003485}, {0.019928, 0.000681}, {0.016357, 0.003878}, {0.011215, 0.005157}, {0.005653, 0.004116}, {0.000879, 0.000957}, {-0.002159, -0.003567}, {-0.003000, -0.008331}, {-0.001791, -0.012077}, {0.000706, -0.013756}, {0.003252, -0.012749}, {0.004368, -0.009087}, {0.002649, -0.003508}, {-0.002926, 0.002596}, {-0.012718, 0.007401}},
                             {{-0.019897, 0.014488}, {-0.007370, 0.003389}, {0.005245, -0.001243}, {0.015457, -0.000528}, {0.021561, 0.003574}, {0.022873, 0.008682}, {0.019791, 0.012436}, {0.013649, 0.012970}, {0.006454, 0.009186}, {0.000438, 0.000998}, {-0.002348, -0.010719}, {-0.000415, -0.024261}, {0.006870, -0.037476}, {0.019165, -0.048004}, {0.035217, -0.053925}, {0.053009, -0.053925}, {0.070190, -0.047546}, {0.084290, -0.035339}, {0.093445, -0.018799}, {0.096375, 0.000000}, {0.092651, 0.018631}, {0.082886, 0.034729}, {0.068481, 0.046417}, {0.051544, 0.052429}, {0.034271, 0.052490}, {0.018814, 0.047150}, {0.006916, 0.037720}, {-0.000444, 0.026001}, {-0.003067, 0.014000}, {-0.001535, 0.003494}, {0.002939, -0.004185}, {0.008789, -0.008354}, {0.014404, -0.009056}, {0.018417, -0.006992}, {0.019958, -0.003307}, {0.018768, 0.000641}, {0.015221, 0.003607}, {0.010216, 0.004700}, {0.004894, 0.003567}, {0.000426, 0.000464}, {-0.002312, -0.003820}, {-0.002932, -0.008141}, {-0.001672, -0.011276}, {0.000626, -0.012199}, {0.002649, -0.010384}, {0.002872, -0.005974}, {-0.000123, 0.000163}, {-0.007320, 0.006493}},
                             {{-0.018723, 0.020386}, {-0.009842, 0.007172}, {0.001088, -0.000501}, {0.011612, -0.002750}, {0.019608, -0.000670}, {0.023697, 0.003929}, {0.023407, 0.008888}, {0.019257, 0.012108}, {0.012596, 0.011963}, {0.005325, 0.007576}, {-0.000445, -0.001012}, {-0.002813, -0.012848}, {-0.000449, -0.026245}, {0.007168, -0.039063}, {0.019623, -0.049133}, {0.035614, -0.054565}, {0.053192, -0.054108}, {0.070007, -0.047424}, {0.083801, -0.035126}, {0.092651, -0.018631}, {0.095276, 0.000000}, {0.091492, 0.018402}, {0.081726, 0.034271}, {0.067566, 0.045776}, {0.050842, 0.051727}, {0.033813, 0.051819}, {0.018616, 0.046631}, {0.006866, 0.037445}, {-0.000444, 0.026001}, {-0.003122, 0.014259}, {-0.001738, 0.003956}, {0.002537, -0.003609}, {0.008179, -0.007767}, {0.013611, -0.008553}, {0.017502, -0.006645}, {0.019028, -0.003155}, {0.017914, 0.000613}, {0.014549, 0.003447}, {0.009773, 0.004494}, {0.004711, 0.003433}, {0.000482, 0.000525}, {-0.002085, -0.003445}, {-0.002649, -0.007355}, {-0.001485, -0.010010}, {0.000536, -0.010445}, {0.002085, -0.008171}, {0.001634, -0.003399}, {-0.002220, 0.002941}},
                             {{-0.014572, 0.024078}, {-0.010010, 0.010902}, {-0.002104, 0.001533}, {0.007137, -0.003284}, {0.015656, -0.003708}, {0.021683, -0.000741}, {0.024124, 0.003998}, {0.022659, 0.008606}, {0.017883, 0.011238}, {0.011055, 0.010506}, {0.003998, 0.005692}, {-0.001345, -0.003061}, {-0.003237, -0.014778}, {-0.000476, -0.027832}, {0.007366, -0.040161}, {0.019836, -0.049683}, {0.035645, -0.054626}, {0.052917, -0.053833}, {0.069397, -0.047028}, {0.082886, -0.034729}, {0.091492, -0.018402}, {0.094055, 0.000000}, {0.090332, 0.018158}, {0.080811, 0.033875}, {0.066833, 0.045288}, {0.050415, 0.051300}, {0.033661, 0.051575}, {0.018616, 0.046631}, {0.006916, 0.037720}, {-0.000453, 0.026520}, {-0.003273, 0.014946}, {-0.002069, 0.004707}, {0.002035, -0.002895}, {0.007557, -0.007179}, {0.012962, -0.008148}, {0.016922, -0.006424}, {0.018600, -0.003084}, {0.017700, 0.000606}, {0.014572, 0.003452}, {0.010010, 0.004604}, {0.005093, 0.003710}, {0.000918, 0.001000}, {-0.001684, -0.002783}, {-0.002361, -0.006554}, {-0.001357, -0.009148}, {0.000493, -0.009605}, {0.001897, -0.007439}, {0.001356, -0.002819}},
                             {{-0.008881, 0.024658}, {-0.008232, 0.013611}, {-0.003899, 0.004246}, {0.002914, -0.002123}, {0.010582, -0.004868}, {0.017395, -0.004124}, {0.021912, -0.000750}, {0.023209, 0.003849}, {0.021088, 0.008003}, {0.016098, 0.010117}, {0.009445, 0.008972}, {0.002789, 0.003967}, {-0.002069, -0.004707}, {-0.003529, -0.016113}, {-0.000491, -0.028702}, {0.007427, -0.040497}, {0.019791, -0.049561}, {0.035370, -0.054169}, {0.052307, -0.053223}, {0.068481, -0.046417}, {0.081726, -0.034271}, {0.090332, -0.018158}, {0.092957, 0.000000}, {0.089417, 0.017990}, {0.080200, 0.033630}, {0.066589, 0.045105}, {0.050415, 0.051300}, {0.033813, 0.051819}, {0.018814, 0.047150}, {0.007050, 0.038422}, {-0.000468, 0.027374}, {-0.003462, 0.015808}, {-0.002399, 0.005459}, {0.001641, -0.002337}, {0.007210, -0.006851}, {0.012772, -0.008026}, {0.016983, -0.006447}, {0.018921, -0.003138}, {0.018280, 0.000625}, {0.015305, 0.003626}, {0.010773, 0.004955}, {0.005745, 0.004185}, {0.001353, 0.001474}, {-0.001514, -0.002502}, {-0.002411, -0.006691}, {-0.001471, -0.009911}, {0.000572, -0.011147}, {0.002499, -0.009796}},
                             {{-0.003260, 0.021988}, {-0.005268, 0.014626}, {-0.004196, 0.006935}, {-0.000330, 0.000360}, {0.005440, -0.003963}, {0.011826, -0.005440}, {0.017395, -0.004124}, {0.020935, -0.000716}, {0.021622, 0.003586}, {0.019287, 0.007320}, {0.014420, 0.009064}, {0.008133, 0.007725}, {0.001938, 0.002758}, {-0.002491, -0.005669}, {-0.003653, -0.016678}, {-0.000492, -0.028793}, {0.007366, -0.040161}, {0.019531, -0.048889}, {0.034821, -0.053345}, {0.051544, -0.052429}, {0.067566, -0.045776}, {0.080811, -0.033875}, {0.089417, -0.017990}, {0.092346, 0.000000}, {0.089111, 0.017929}, {0.080200, 0.033630}, {0.066833, 0.045288}, {0.050842, 0.051727}, {0.034271, 0.052490}, {0.019165, 0.047974}, {0.007221, 0.039368}, {-0.000483, 0.028244}, {-0.003613, 0.016495}, {-0.002581, 0.005875}, {0.001563, -0.002224}, {0.007366, -0.007000}, {0.013252, -0.008331}, {0.017792, -0.006756}, {0.020020, -0.003319}, {0.019501, 0.000667}, {0.016449, 0.003897}, {0.011612, 0.005341}, {0.006115, 0.004456}, {0.001183, 0.001288}, {-0.002142, -0.003540}, {-0.003231, -0.008972}, {-0.002037, -0.013733}, {0.000854, -0.016647}},
                             {{0.000854, 0.016647}, {-0.002037, 0.013733}, {-0.003231, 0.008972}, {-0.002142, 0.003540}, {0.001183, -0.001288}, {0.006115, -0.004456}, {0.011612, -0.005341}, {0.016449, -0.003897}, {0.019501, -0.000667}, {0.020020, 0.003319}, {0.017792, 0.006756}, {0.013252, 0.008331}, {0.007366, 0.007000}, {0.001563, 0.002224}, {-0.002581, -0.005875}, {-0.003613, -0.016495}, {-0.000483, -0.028244}, {0.007221, -0.039368}, {0.019165, -0.047974}, {0.034271, -0.052490}, {0.050842, -0.051727}, {0.066833, -0.045288}, {0.080200, -0.033630}, {0.089111, -0.017929}, {0.092346, 0.000000}, {0.089417, 0.017990}, {0.080811, 0.033875}, {0.067566, 0.045776}, {0.051544, 0.052429}, {0.034821, 0.053345}, {0.019531, 0.048889}, {0.007366, 0.040161}, {-0.000492, 0.028793}, {-0.003653, 0.016678}, {-0.002491, 0.005669}, {0.001938, -0.002758}, {0.008133, -0.007725}, {0.014420, -0.009064}, {0.019287, -0.007320}, {0.021622, -0.003586}, {0.020935, 0.000716}, {0.017395, 0.004124}, {0.011826, 0.005440}, {0.005440, 0.003963}, {-0.000330, -0.000360}, {-0.004196, -0.006935}, {-0.005268, -0.014626}, {-0.003260, -0.021988}},
                             {{0.002499, 0.009796}, {0.000572, 0.011147}, {-0.001471, 0.009911}, {-0.002411, 0.006691}, {-0.001514, 0.002502}, {0.001353, -0.001474}, {0.005745, -0.004185}, {0.010773, -0.004955}, {0.015305, -0.003626}, {0.018280, -0.000625}, {0.018921, 0.003138}, {0.016983, 0.006447}, {0.012772, 0.008026}, {0.007210, 0.006851}, {0.001641, 0.002337}, {-0.002399, -0.005459}, {-0.003462, -0.015808}, {-0.000468, -0.027374}, {0.007050, -0.038422}, {0.018814, -0.047150}, {0.033813, -0.051819}, {0.050415, -0.051300}, {0.066589, -0.045105}, {0.080200, -0.033630}, {0.089417, -0.017990}, {0.092957, 0.000000}, {0.090332, 0.018158}, {0.081726, 0.034271}, {0.068481, 0.046417}, {0.052307, 0.053223}, {0.035370, 0.054169}, {0.019791, 0.049561}, {0.007427, 0.040497}, {-0.000491, 0.028702}, {-0.003529, 0.016113}, {-0.002069, 0.004707}, {0.002789, -0.003967}, {0.009445, -0.008972}, {0.016098, -0.010117}, {0.021088, -0.008003}, {0.023209, -0.003849}, {0.021912, 0.000750}, {0.017395, 0.004124}, {0.010582, 0.004868}, {0.002914, 0.002123}, {-0.003899, -0.004246}, {-0.008232, -0.013611}, {-0.008881, -0.024658}},
                             {{0.001356, 0.002819}, {0.001897, 0.007439}, {0.000493, 0.009605}, {-0.001357, 0.009148}, {-0.002361, 0.006554}, {-0.001684, 0.002783}, {0.000918, -0.001000}, {0.005093, -0.003710}, {0.010010, -0.004604}, {0.014572, -0.003452}, {0.017700, -0.000606}, {0.018600, 0.003084}, {0.016922, 0.006424}, {0.012962, 0.008148}, {0.007557, 0.007179}, {0.002035, 0.002895}, {-0.002069, -0.004707}, {-0.003273, -0.014946}, {-0.000453, -0.026520}, {0.006916, -0.037720}, {0.018616, -0.046631}, {0.033661, -0.051575}, {0.050415, -0.051300}, {0.066833, -0.045288}, {0.080811, -0.033875}, {0.090332, -0.018158}, {0.094055, 0.000000}, {0.091492, 0.018402}, {0.082886, 0.034729}, {0.069397, 0.047028}, {0.052917, 0.053833}, {0.035645, 0.054626}, {0.019836, 0.049683}, {0.007366, 0.040161}, {-0.000476, 0.027832}, {-0.003237, 0.014778}, {-0.001345, 0.003061}, {0.003998, -0.005692}, {0.011055, -0.010506}, {0.017883, -0.011238}, {0.022659, -0.008606}, {0.024124, -0.003998}, {0.021683, 0.000741}, {0.015656, 0.003708}, {0.007137, 0.003284}, {-0.002104, -0.001533}, {-0.010010, -0.010902}, {-0.014572, -0.024078}},
                             {{-0.002220, -0.002941}, {0.001634, 0.003399}, {0.002085, 0.008171}, {0.000536, 0.010445}, {-0.001485, 0.010010}, {-0.002649, 0.007355}, {-0.002085, 0.003445}, {0.000482, -0.000525}, {0.004711, -0.003433}, {0.009773, -0.004494}, {0.014549, -0.003447}, {0.017914, -0.000613}, {0.019028, 0.003155}, {0.017502, 0.006645}, {0.013611, 0.008553}, {0.008179, 0.007767}, {0.002537, 0.003609}, {-0.001738, -0.003956}, {-0.003122, -0.014259}, {-0.000444, -0.026001}, {0.006866, -0.037445}, {0.018616, -0.046631}, {0.033813, -0.051819}, {0.050842, -0.051727}, {0.067566, -0.045776}, {0.081726, -0.034271}, {0.091492, -0.018402}, {0.095276, 0.000000}, {0.092651, 0.018631}, {0.083801, 0.035126}, {0.070007, 0.047424}, {0.053192, 0.054108}, {0.035614, 0.054565}, {0.019623, 0.049133}, {0.007168, 0.039063}, {-0.000449, 0.026245}, {-0.002813, 0.012848}, {-0.000445, 0.001012}, {0.005325, -0.007576}, {0.012596, -0.011963}, {0.019257, -0.012108}, {0.023407, -0.008888}, {0.023697, -0.003929}, {0.019608, 0.000670}, {0.011612, 0.002750}, {0.001088, 0.000501}, {-0.009842, -0.007172}, {-0.018723, -0.020386}},
                             {{-0.007320, -0.006493}, {-0.000123, -0.000163}, {0.002872, 0.005974}, {0.002649, 0.010384}, {0.000626, 0.012199}, {-0.001672, 0.011276}, {-0.002932, 0.008141}, {-0.002312, 0.003820}, {0.000426, -0.000464}, {0.004894, -0.003567}, {0.010216, -0.004700}, {0.015221, -0.003607}, {0.018768, -0.000641}, {0.019958, 0.003307}, {0.018417, 0.006992}, {0.014404, 0.009056}, {0.008789, 0.008354}, {0.002939, 0.004185}, {-0.001535, -0.003494}, {-0.003067, -0.014000}, {-0.000444, -0.026001}, {0.006916, -0.037720}, {0.018814, -0.047150}, {0.034271, -0.052490}, {0.051544, -0.052429}, {0.068481, -0.046417}, {0.082886, -0.034729}, {0.092651, -0.018631}, {0.096375, 0.000000}, {0.093445, 0.018799}, {0.084290, 0.035339}, {0.070190, 0.047546}, {0.053009, 0.053925}, {0.035217, 0.053925}, {0.019165, 0.048004}, {0.006870, 0.037476}, {-0.000415, 0.024261}, {-0.002348, 0.010719}, {0.000438, -0.000998}, {0.006454, -0.009186}, {0.013649, -0.012970}, {0.019791, -0.012436}, {0.022873, -0.008682}, {0.021561, -0.003574}, {0.015457, 0.000528}, {0.005245, 0.001243}, {-0.007370, -0.003389}, {-0.019897, -0.014488}},
                             {{-0.012718, -0.007401}, {-0.002926, -0.002596}, {0.002649, 0.003508}, {0.004368, 0.009087}, {0.003252, 0.012749}, {0.000706, 0.013756}, {-0.001791, 0.012077}, {-0.003000, 0.008331}, {-0.002159, 0.003567}, {0.000879, -0.000957}, {0.005653, -0.004116}, {0.011215, -0.005157}, {0.016357, -0.003878}, {0.019928, -0.000681}, {0.021027, 0.003485}, {0.019302, 0.007324}, {0.015038, 0.009453}, {0.009171, 0.008713}, {0.003094, 0.004402}, {-0.001535, -0.003494}, {-0.003122, -0.014259}, {-0.000453, -0.026520}, {0.007050, -0.038422}, {0.019165, -0.047974}, {0.034821, -0.053345}, {0.052307, -0.053223}, {0.069397, -0.047028}, {0.083801, -0.035126}, {0.093445, -0.018799}, {0.096985, 0.000000}, {0.093811, 0.018860}, {0.084290, 0.035339}, {0.069824, 0.047302}, {0.052429, 0.053314}, {0.034546, 0.052917}, {0.018600, 0.046570}, {0.006546, 0.035706}, {-0.000382, 0.022354}, {-0.001945, 0.008881}, {0.001096, -0.002493}, {0.007114, -0.010124}, {0.013931, -0.013237}, {0.019211, -0.012077}, {0.020950, -0.007950}, {0.017838, -0.002958}, {0.009651, 0.000330}, {-0.002705, -0.000641}, {-0.017197, -0.007912}},
                             {{-0.017136, -0.005844}, {-0.006096, -0.003548}, {0.001462, 0.001297}, {0.005219, 0.006912}, {0.005611, 0.011673}, {0.003668, 0.014381}, {0.000742, 0.014465}, {-0.001781, 0.012016}, {-0.002781, 0.007721}, {-0.001617, 0.002674}, {0.001749, -0.001905}, {0.006775, -0.004936}, {0.012459, -0.005733}, {0.017593, -0.004169}, {0.020996, -0.000718}, {0.021851, 0.003622}, {0.019821, 0.007526}, {0.015282, 0.009605}, {0.009171, 0.008713}, {0.002939, 0.004185}, {-0.001738, -0.003956}, {-0.003273, -0.014946}, {-0.000468, -0.027374}, {0.007221, -0.039368}, {0.019531, -0.048889}, {0.035370, -0.054169}, {0.052917, -0.053833}, {0.070007, -0.047424}, {0.084290, -0.035339}, {0.093811, -0.018860}, {0.097046, 0.000000}, {0.093567, 0.018814}, {0.083801, 0.035126}, {0.069092, 0.046814}, {0.051666, 0.052551}, {0.033844, 0.051819}, {0.018066, 0.045258}, {0.006283, 0.034271}, {-0.000359, 0.020981}, {-0.001704, 0.007782}, {0.001383, -0.003147}, {0.007179, -0.010216}, {0.013428, -0.012756}, {0.017746, -0.011162}, {0.018158, -0.006893}, {0.013435, -0.002228}, {0.003489, 0.000119}, {-0.010559, -0.002502}},
                             {{-0.019592, -0.002563}, {-0.008881, -0.003029}, {-0.000412, -0.000240}, {0.004951, 0.004391}, {0.007034, 0.009315}, {0.006321, 0.013138}, {0.003796, 0.014885}, {0.000725, 0.014130}, {-0.001643, 0.011078}, {-0.002331, 0.006470}, {-0.000831, 0.001373}, {0.002794, -0.003044}, {0.007935, -0.005783}, {0.013580, -0.006248}, {0.018524, -0.004387}, {0.021637, -0.000740}, {0.022156, 0.003674}, {0.019821, 0.007526}, {0.015038, 0.009453}, {0.008789, 0.008354}, {0.002537, 0.003609}, {-0.002069, -0.004707}, {-0.003462, -0.015808}, {-0.000483, -0.028244}, {0.007366, -0.040161}, {0.019791, -0.049561}, {0.035645, -0.054626}, {0.053192, -0.054108}, {0.070190, -0.047546}, {0.084290, -0.035339}, {0.093567, -0.018814}, {0.096619, 0.000000}, {0.092957, 0.018692}, {0.083130, 0.034851}, {0.068420, 0.046356}, {0.051025, 0.051910}, {0.033356, 0.051086}, {0.017761, 0.044495}, {0.006161, 0.033600}, {-0.000351, 0.020523}, {-0.001666, 0.007610}, {0.001307, -0.002974}, {0.006813, -0.009697}, {0.012566, -0.011940}, {0.016220, -0.010193}, {0.015778, -0.005989}, {0.010117, -0.001678}, {-0.000782, -0.000027}},
                             {{-0.019531, 0.001337}, {-0.010643, -0.001393}, {-0.002546, -0.000868}, {0.003592, 0.002090}, {0.007095, 0.006294}, {0.007881, 0.010437}, {0.006428, 0.013367}, {0.003647, 0.014297}, {0.000664, 0.012947}, {-0.001422, 0.009590}, {-0.001780, 0.004944}, {-0.000022, 0.000037}, {0.003716, -0.004047}, {0.008797, -0.006413}, {0.014236, -0.006546}, {0.018860, -0.004471}, {0.021637, -0.000740}, {0.021851, 0.003622}, {0.019302, 0.007324}, {0.014404, 0.009056}, {0.008179, 0.007767}, {0.002035, 0.002895}, {-0.002399, -0.005459}, {-0.003613, -0.016495}, {-0.000492, -0.028793}, {0.007427, -0.040497}, {0.019836, -0.049683}, {0.035614, -0.054565}, {0.053009, -0.053925}, {0.069824, -0.047302}, {0.083801, -0.035126}, {0.092957, -0.018692}, {0.096008, 0.000000}, {0.092407, 0.018585}, {0.082642, 0.034668}, {0.068176, 0.046173}, {0.050903, 0.051788}, {0.033356, 0.051086}, {0.017822, 0.044647}, {0.006222, 0.033905}, {-0.000358, 0.020950}, {-0.001775, 0.008102}, {0.001099, -0.002501}, {0.006542, -0.009315}, {0.012314, -0.011703}, {0.016083, -0.010109}, {0.015854, -0.006020}, {0.010490, -0.001740}},
                             {{-0.016998, 0.004646}, {-0.010994, 0.000753}, {-0.004467, -0.000585}, {0.001414, 0.000482}, {0.005707, 0.003321}, {0.007866, 0.006977}, {0.007843, 0.010384}, {0.006062, 0.012604}, {0.003315, 0.012993}, {0.000584, 0.011368}, {-0.001187, 0.008003}, {-0.001291, 0.003586}, {0.000577, -0.000953}, {0.004253, -0.004631}, {0.009117, -0.006645}, {0.014236, -0.006546}, {0.018524, -0.004387}, {0.020996, -0.000718}, {0.021027, 0.003485}, {0.018417, 0.006992}, {0.013611, 0.008553}, {0.007557, 0.007179}, {0.001641, 0.002337}, {-0.002581, -0.005875}, {-0.003653, -0.016678}, {-0.000491, -0.028702}, {0.007366, -0.040161}, {0.019623, -0.049133}, {0.035217, -0.053925}, {0.052429, -0.053314}, {0.069092, -0.046814}, {0.083130, -0.034851}, {0.092407, -0.018585}, {0.095703, 0.000000}, {0.092407, 0.018585}, {0.082947, 0.034790}, {0.068665, 0.046539}, {0.051544, 0.052429}, {0.033966, 0.052002}, {0.018265, 0.045746}, {0.006416, 0.034973}, {-0.000372, 0.021774}, {-0.001845, 0.008430}, {0.001254, -0.002853}, {0.007317, -0.010414}, {0.014160, -0.013451}, {0.019424, -0.012215}, {0.021072, -0.007996}},
                             {{-0.012611, 0.006332}, {-0.009880, 0.002701}, {-0.005768, 0.000395}, {-0.001127, -0.000147}, {0.003111, 0.001060}, {0.006165, 0.003588}, {0.007553, 0.006699}, {0.007202, 0.009537}, {0.005444, 0.011322}, {0.002935, 0.011505}, {0.000509, 0.009926}, {-0.001012, 0.006821}, {-0.001007, 0.002794}, {0.000797, -0.001318}, {0.004253, -0.004631}, {0.008797, -0.006413}, {0.013580, -0.006248}, {0.017593, -0.004169}, {0.019928, -0.000681}, {0.019958, 0.003307}, {0.017502, 0.006645}, {0.012962, 0.008148}, {0.007210, 0.006851}, {0.001563, 0.002224}, {-0.002491, -0.005669}, {-0.003529, -0.016113}, {-0.000476, -0.027832}, {0.007168, -0.039063}, {0.019165, -0.048004}, {0.034546, -0.052917}, {0.051666, -0.052551}, {0.068420, -0.046356}, {0.082642, -0.034668}, {0.092407, -0.018585}, {0.096191, 0.000000}, {0.093384, 0.018784}, {0.084290, 0.035339}, {0.070190, 0.047546}, {0.052979, 0.053894}, {0.035065, 0.053711}, {0.018906, 0.047363}, {0.006615, 0.036072}, {-0.000374, 0.021866}, {-0.001566, 0.007153}, {0.002510, -0.005714}, {0.010391, -0.014793}, {0.019943, -0.018951}, {0.028702, -0.018051}},
                             {{-0.007389, 0.005779}, {-0.007591, 0.003813}, {-0.006195, 0.001693}, {-0.003510, 0.000240}, {-0.000168, -0.000022}, {0.003069, 0.001047}, {0.005501, 0.003201}, {0.006641, 0.005894}, {0.006351, 0.008415}, {0.004841, 0.010071}, {0.002642, 0.010353}, {0.000465, 0.009071}, {-0.000947, 0.006382}, {-0.001007, 0.002794}, {0.000577, -0.000953}, {0.003716, -0.004047}, {0.007935, -0.005783}, {0.012459, -0.005733}, {0.016357, -0.003878}, {0.018768, -0.000641}, {0.019028, 0.003155}, {0.016922, 0.006424}, {0.012772, 0.008026}, {0.007366, 0.007000}, {0.001938, 0.002758}, {-0.002069, -0.004707}, {-0.003237, -0.014778}, {-0.000449, -0.026245}, {0.006870, -0.037476}, {0.018600, -0.046570}, {0.033844, -0.051819}, {0.051025, -0.051910}, {0.068176, -0.046173}, {0.082947, -0.034790}, {0.093384, -0.018784}, {0.097839, 0.000000}, {0.095642, 0.019241}, {0.086853, 0.036407}, {0.072632, 0.049225}, {0.054962, 0.055908}, {0.036346, 0.055664}, {0.019394, 0.048584}, {0.006584, 0.035919}, {-0.000336, 0.019653}, {-0.000531, 0.002424}, {0.005745, -0.013077}, {0.017166, -0.024429}, {0.031555, -0.029984}},
                             {{-0.002510, 0.002930}, {-0.004688, 0.003668}, {-0.005714, 0.002869}, {-0.005264, 0.001438}, {-0.003464, 0.000237}, {-0.000801, -0.000105}, {0.002043, 0.000697}, {0.004375, 0.002546}, {0.005661, 0.005020}, {0.005661, 0.007500}, {0.004478, 0.009308}, {0.002531, 0.009926}, {0.000465, 0.009071}, {-0.001012, 0.006821}, {-0.001291, 0.003586}, {-0.000022, 0.000037}, {0.002794, -0.003044}, {0.006775, -0.004936}, {0.011215, -0.005157}, {0.015221, -0.003607}, {0.017914, -0.000613}, {0.018600, 0.003084}, {0.016983, 0.006447}, {0.013252, 0.008331}, {0.008133, 0.007725}, {0.002789, 0.003967}, {-0.001345, -0.003061}, {-0.002813, -0.012848}, {-0.000415, -0.024261}, {0.006546, -0.035706}, {0.018066, -0.045258}, {0.033356, -0.051086}, {0.050903, -0.051788}, {0.068665, -0.046539}, {0.084290, -0.035339}, {0.095642, -0.019241}, {0.100830, 0.000000}, {0.099060, 0.019928}, {0.090210, 0.037842}, {0.075500, 0.051147}, {0.056915, 0.057892}, {0.037140, 0.056915}, {0.019241, 0.048187}, {0.006042, 0.032959}, {-0.000228, 0.013344}, {0.001676, -0.007652}, {0.011780, -0.026794}, {0.028824, -0.041016}},
                             {{0.000949, -0.001697}, {-0.001863, 0.002174}, {-0.004505, 0.003525}, {-0.006073, 0.003048}, {-0.006111, 0.001671}, {-0.004650, 0.000318}, {-0.002115, -0.000277}, {0.000816, 0.000278}, {0.003407, 0.001984}, {0.005047, 0.004478}, {0.005398, 0.007153}, {0.004478, 0.009308}, {0.002642, 0.010353}, {0.000509, 0.009926}, {-0.001187, 0.008003}, {-0.001780, 0.004944}, {-0.000831, 0.001373}, {0.001749, -0.001905}, {0.005653, -0.004116}, {0.010216, -0.004700}, {0.014549, -0.003447}, {0.017700, -0.000606}, {0.018921, 0.003138}, {0.017792, 0.006756}, {0.014420, 0.009064}, {0.009445, 0.008972}, {0.003998, 0.005692}, {-0.000445, -0.001012}, {-0.002348, -0.010719}, {-0.000382, -0.022354}, {0.006283, -0.034271}, {0.017761, -0.044495}, {0.033356, -0.051086}, {0.051544, -0.052429}, {0.070190, -0.047546}, {0.086853, -0.036407}, {0.099060, -0.019928}, {0.104858, 0.000000}, {0.103149, 0.020737}, {0.093811, 0.039337}, {0.078003, 0.052856}, {0.057983, 0.058990}, {0.036804, 0.056366}, {0.017914, 0.044861}, {0.004719, 0.025726}, {-0.000025, 0.001478}, {0.005344, -0.024399}, {0.021072, -0.047943}},
                             {{0.002291, -0.007111}, {0.000228, -0.000407}, {-0.002918, 0.003407}, {-0.005852, 0.004578}, {-0.007603, 0.003817}, {-0.007683, 0.002100}, {-0.006096, 0.000417}, {-0.003286, -0.000430}, {0.000026, 0.000009}, {0.003033, 0.001765}, {0.005047, 0.004478}, {0.005661, 0.007500}, {0.004841, 0.010071}, {0.002935, 0.011505}, {0.000584, 0.011368}, {-0.001422, 0.009590}, {-0.002331, 0.006470}, {-0.001617, 0.002674}, {0.000879, -0.000957}, {0.004894, -0.003567}, {0.009773, -0.004494}, {0.014572, -0.003452}, {0.018280, -0.000625}, {0.020020, 0.003319}, {0.019287, 0.007320}, {0.016098, 0.010117}, {0.011055, 0.010506}, {0.005325, 0.007576}, {0.000438, 0.000998}, {-0.001945, -0.008881}, {-0.000359, -0.020981}, {0.006161, -0.033600}, {0.017822, -0.044647}, {0.033966, -0.052002}, {0.052979, -0.053894}, {0.072632, -0.049225}, {0.090210, -0.037842}, {0.103149, -0.020737}, {0.109131, 0.000000}, {0.106995, 0.021515}, {0.096619, 0.040497}, {0.079224, 0.053680}, {0.057434, 0.058411}, {0.034668, 0.053131}, {0.015038, 0.037659}, {0.002481, 0.013527}, {0.000279, -0.016342}, {0.010468, -0.047791}},
                             {{0.001372, -0.012085}, {0.001132, -0.003515}, {-0.001380, 0.002466}, {-0.004753, 0.005550}, {-0.007706, 0.006027}, {-0.009293, 0.004665}, {-0.009048, 0.002474}, {-0.007030, 0.000481}, {-0.003744, -0.000490}, {0.000026, 0.000009}, {0.003407, 0.001984}, {0.005661, 0.005020}, {0.006351, 0.008415}, {0.005444, 0.011322}, {0.003315, 0.012993}, {0.000664, 0.012947}, {-0.001643, 0.011078}, {-0.002781, 0.007721}, {-0.002159, 0.003567}, {0.000426, -0.000464}, {0.004711, -0.003433}, {0.010010, -0.004604}, {0.015305, -0.003626}, {0.019501, -0.000667}, {0.021622, 0.003586}, {0.021088, 0.008003}, {0.017883, 0.011238}, {0.012596, 0.011963}, {0.006454, 0.009186}, {0.001096, 0.002493}, {-0.001704, -0.007782}, {-0.000351, -0.020523}, {0.006222, -0.033905}, {0.018265, -0.045746}, {0.035065, -0.053711}, {0.054962, -0.055908}, {0.075500, -0.051147}, {0.093811, -0.039337}, {0.106995, -0.021515}, {0.112732, 0.000000}, {0.109619, 0.022049}, {0.097717, 0.040985}, {0.078491, 0.053192}, {0.054810, 0.055756}, {0.030685, 0.047028}, {0.010750, 0.026932}, {-0.000504, -0.002745}, {0.000658, -0.038483}},
                             {{-0.001323, -0.015442}, {0.000728, -0.006413}, {-0.000284, 0.000882}, {-0.003149, 0.005627}, {-0.006523, 0.007614}, {-0.009209, 0.007202}, {-0.010345, 0.005196}, {-0.009575, 0.002617}, {-0.007030, 0.000481}, {-0.003286, -0.000430}, {0.000816, 0.000278}, {0.004375, 0.002546}, {0.006641, 0.005894}, {0.007202, 0.009537}, {0.006062, 0.012604}, {0.003647, 0.014297}, {0.000725, 0.014130}, {-0.001781, 0.012016}, {-0.003000, 0.008331}, {-0.002312, 0.003820}, {0.000482, -0.000525}, {0.005093, -0.003710}, {0.010773, -0.004955}, {0.016449, -0.003897}, {0.020935, -0.000716}, {0.023209, 0.003849}, {0.022659, 0.008606}, {0.019257, 0.012108}, {0.013649, 0.012970}, {0.007114, 0.010124}, {0.001383, 0.003147}, {-0.001666, -0.007610}, {-0.000358, -0.020950}, {0.006416, -0.034973}, {0.018906, -0.047363}, {0.036346, -0.055664}, {0.056915, -0.057892}, {0.078003, -0.052856}, {0.096619, -0.040497}, {0.109619, -0.022049}, {0.114685, 0.000000}, {0.110413, 0.022217}, {0.096924, 0.040649}, {0.075989, 0.051453}, {0.050720, 0.051605}, {0.025711, 0.039398}, {0.005962, 0.014931}, {-0.003611, -0.019684}},
                             {{-0.004761, -0.016312}, {-0.000716, -0.008362}, {0.000112, -0.000982}, {-0.001510, 0.004688}, {-0.004475, 0.008003}, {-0.007584, 0.008850}, {-0.009781, 0.007648}, {-0.010345, 0.005196}, {-0.009048, 0.002474}, {-0.006096, 0.000417}, {-0.002115, -0.000277}, {0.002043, 0.000697}, {0.005501, 0.003201}, {0.007553, 0.006699}, {0.007843, 0.010384}, {0.006428, 0.013367}, {0.003796, 0.014885}, {0.000742, 0.014465}, {-0.001791, 0.012077}, {-0.002932, 0.008141}, {-0.002085, 0.003445}, {0.000918, -0.001000}, {0.005745, -0.004185}, {0.011612, -0.005341}, {0.017395, -0.004124}, {0.021912, -0.000750}, {0.024124, 0.003998}, {0.023407, 0.008888}, {0.019791, 0.012436}, {0.013931, 0.013237}, {0.007179, 0.010216}, {0.001307, 0.002974}, {-0.001775, -0.008102}, {-0.000372, -0.021774}, {0.006615, -0.036072}, {0.019394, -0.048584}, {0.037140, -0.056915}, {0.057983, -0.058990}, {0.079224, -0.053680}, {0.097717, -0.040985}, {0.110413, -0.022217}, {0.114868, 0.000000}, {0.109741, 0.022079}, {0.095337, 0.039948}, {0.073364, 0.049713}, {0.047424, 0.048248}, {0.022141, 0.033905}, {0.002768, 0.006931}},
                             {{-0.007561, -0.014435}, {-0.002571, -0.008812}, {-0.000228, -0.002665}, {-0.000325, 0.002861}, {-0.002213, 0.006870}, {-0.004963, 0.008873}, {-0.007584, 0.008850}, {-0.009209, 0.007202}, {-0.009293, 0.004665}, {-0.007683, 0.002100}, {-0.004650, 0.000318}, {-0.000801, -0.000105}, {0.003069, 0.001047}, {0.006165, 0.003588}, {0.007866, 0.006977}, {0.007881, 0.010437}, {0.006321, 0.013138}, {0.003668, 0.014381}, {0.000706, 0.013756}, {-0.001672, 0.011276}, {-0.002649, 0.007355}, {-0.001684, 0.002783}, {0.001353, -0.001474}, {0.006115, -0.004456}, {0.011826, -0.005440}, {0.017395, -0.004124}, {0.021683, -0.000741}, {0.023697, 0.003929}, {0.022873, 0.008682}, {0.019211, 0.012077}, {0.013428, 0.012756}, {0.006813, 0.009697}, {0.001099, 0.002501}, {-0.001845, -0.008430}, {-0.000374, -0.021866}, {0.006584, -0.035919}, {0.019241, -0.048187}, {0.036804, -0.056366}, {0.057434, -0.058411}, {0.078491, -0.053192}, {0.096924, -0.040649}, {0.109741, -0.022079}, {0.114563, 0.000000}, {0.109985, 0.022110}, {0.096130, 0.040314}, {0.074829, 0.050720}, {0.049438, 0.050262}, {0.024353, 0.037323}},
                             {{-0.008278, -0.010216}, {-0.003960, -0.007561}, {-0.001085, -0.003719}, {0.000042, 0.000490}, {-0.000482, 0.004242}, {-0.002213, 0.006870}, {-0.004475, 0.008003}, {-0.006523, 0.007614}, {-0.007706, 0.006027}, {-0.007603, 0.003817}, {-0.006111, 0.001671}, {-0.003464, 0.000237}, {-0.000168, -0.000022}, {0.003111, 0.001060}, {0.005707, 0.003321}, {0.007095, 0.006294}, {0.007034, 0.009315}, {0.005611, 0.011673}, {0.003252, 0.012749}, {0.000626, 0.012199}, {-0.001485, 0.010010}, {-0.002361, 0.006554}, {-0.001514, 0.002502}, {0.001183, -0.001288}, {0.005440, -0.003963}, {0.010582, -0.004868}, {0.015656, -0.003708}, {0.019608, -0.000670}, {0.021561, 0.003574}, {0.020950, 0.007950}, {0.017746, 0.011162}, {0.012566, 0.011940}, {0.006542, 0.009315}, {0.001254, 0.002853}, {-0.001566, -0.007153}, {-0.000336, -0.019653}, {0.006042, -0.032959}, {0.017914, -0.044861}, {0.034668, -0.053131}, {0.054810, -0.055756}, {0.075989, -0.051453}, {0.095337, -0.039948}, {0.109985, -0.022110}, {0.117432, 0.000000}, {0.116211, 0.023361}, {0.105896, 0.044373}, {0.087708, 0.059418}, {0.064209, 0.065308}},
                             {{-0.005737, -0.004749}, {-0.003933, -0.004852}, {-0.002012, -0.003843}, {-0.000560, -0.001921}, {0.000042, 0.000490}, {-0.000325, 0.002861}, {-0.001510, 0.004688}, {-0.003149, 0.005627}, {-0.004753, 0.005550}, {-0.005852, 0.004578}, {-0.006073, 0.003048}, {-0.005264, 0.001438}, {-0.003510, 0.000240}, {-0.001127, -0.000147}, {0.001414, 0.000482}, {0.003592, 0.002090}, {0.004951, 0.004391}, {0.005219, 0.006912}, {0.004368, 0.009087}, {0.002649, 0.010384}, {0.000536, 0.010445}, {-0.001357, 0.009148}, {-0.002411, 0.006691}, {-0.002142, 0.003540}, {-0.000330, 0.000360}, {0.002914, -0.002123}, {0.007137, -0.003284}, {0.011612, -0.002750}, {0.015457, -0.000528}, {0.017838, 0.002958}, {0.018158, 0.006893}, {0.016220, 0.010193}, {0.012314, 0.011703}, {0.007317, 0.010414}, {0.002510, 0.005714}, {-0.000531, -0.002424}, {-0.000228, -0.013344}, {0.004719, -0.025726}, {0.015038, -0.037659}, {0.030685, -0.047028}, {0.050720, -0.051605}, {0.073364, -0.049713}, {0.096130, -0.040314}, {0.116211, -0.023361}, {0.130737, 0.000000}, {0.137451, 0.027649}, {0.135010, 0.056580}, {0.122986, 0.083313}},
                             {{0.000665, 0.000357}, {-0.001686, -0.001396}, {-0.002417, -0.002983}, {-0.002012, -0.003843}, {-0.001085, -0.003719}, {-0.000228, -0.002665}, {0.000112, -0.000982}, {-0.000284, 0.000882}, {-0.001380, 0.002466}, {-0.002918, 0.003407}, {-0.004505, 0.003525}, {-0.005714, 0.002869}, {-0.006195, 0.001693}, {-0.005768, 0.000395}, {-0.004467, -0.000585}, {-0.002546, -0.000868}, {-0.000412, -0.000240}, {0.001462, 0.001297}, {0.002649, 0.003508}, {0.002872, 0.005974}, {0.002085, 0.008171}, {0.000493, 0.009605}, {-0.001471, 0.009911}, {-0.003231, 0.008972}, {-0.004196, 0.006935}, {-0.003899, 0.004246}, {-0.002104, 0.001533}, {0.001088, -0.000501}, {0.005245, -0.001243}, {0.009651, -0.000330}, {0.013435, 0.002228}, {0.015778, 0.005989}, {0.016083, 0.010109}, {0.014160, 0.013451}, {0.010391, 0.014793}, {0.005745, 0.013077}, {0.001676, 0.007652}, {-0.000025, -0.001478}, {0.002481, -0.013527}, {0.010750, -0.026932}, {0.025711, -0.039398}, {0.047424, -0.048248}, {0.074829, -0.050720}, {0.105896, -0.044373}, {0.137451, -0.027649}, {0.165894, 0.000000}, {0.187378, 0.037689}, {0.198242, 0.083130}},
                             {{0.010765, 0.003263}, {0.003229, 0.001735}, {-0.001686, -0.001396}, {-0.003933, -0.004852}, {-0.003960, -0.007561}, {-0.002571, -0.008812}, {-0.000716, -0.008362}, {0.000728, -0.006413}, {0.001132, -0.003515}, {0.000228, -0.000407}, {-0.001863, 0.002174}, {-0.004688, 0.003668}, {-0.007591, 0.003813}, {-0.009880, 0.002701}, {-0.010994, 0.000753}, {-0.010643, -0.001393}, {-0.008881, -0.003029}, {-0.006096, -0.003548}, {-0.002926, -0.002596}, {-0.000123, -0.000163}, {0.001634, 0.003399}, {0.001897, 0.007439}, {0.000572, 0.011147}, {-0.002037, 0.013733}, {-0.005268, 0.014626}, {-0.008232, 0.013611}, {-0.010010, 0.010902}, {-0.009842, 0.007172}, {-0.007370, 0.003389}, {-0.002705, 0.000641}, {0.003489, -0.000119}, {0.010117, 0.001678}, {0.015854, 0.006020}, {0.019424, 0.012215}, {0.019943, 0.018951}, {0.017166, 0.024429}, {0.011780, 0.026794}, {0.005344, 0.024399}, {0.000279, 0.016342}, {-0.000504, 0.002745}, {0.005962, -0.014931}, {0.022141, -0.033905}, {0.049438, -0.050262}, {0.087708, -0.059418}, {0.135010, -0.056580}, {0.187378, -0.037689}, {0.239380, 0.000000}, {0.284424, 0.057190}},
                             {{0.023560, 0.002268}, {0.010765, 0.003263}, {0.000665, 0.000357}, {-0.005737, -0.004749}, {-0.008278, -0.010216}, {-0.007561, -0.014435}, {-0.004761, -0.016312}, {-0.001323, -0.015442}, {0.001372, -0.012085}, {0.002291, -0.007111}, {0.000949, -0.001697}, {-0.002510, 0.002930}, {-0.007389, 0.005779}, {-0.012611, 0.006332}, {-0.016998, 0.004646}, {-0.019531, 0.001337}, {-0.019592, -0.002563}, {-0.017136, -0.005844}, {-0.012718, -0.007401}, {-0.007320, -0.006493}, {-0.002220, -0.002941}, {0.001356, 0.002819}, {0.002499, 0.009796}, {0.000854, 0.016647}, {-0.003260, 0.021988}, {-0.008881, 0.024658}, {-0.014572, 0.024078}, {-0.018723, 0.020386}, {-0.019897, 0.014488}, {-0.017197, 0.007912}, {-0.010559, 0.002502}, {-0.000782, 0.000027}, {0.010490, 0.001740}, {0.021072, 0.007996}, {0.028702, 0.018051}, {0.031555, 0.029984}, {0.028824, 0.041016}, {0.021072, 0.047943}, {0.010468, 0.047791}, {0.000658, 0.038483}, {-0.003611, 0.019684}, {0.002768, -0.006931}, {0.024353, -0.037323}, {0.064209, -0.065308}, {0.122986, -0.083313}, {0.198242, -0.083130}, {0.284424, -0.057190}, {0.372559, 0.000000}}};

static __device__ __constant__ __half d_phi_6[30][6];
static __half                         phi_6[30][6] = {{-3, -1, 3, 3, -1, -3},
                              {-3, 3, -1, -1, 3, -3},
                              {-3, -3, -3, 3, 1, -3},
                              {1, 1, 1, 3, -1, -3},
                              {1, 1, 1, -3, -1, 3},
                              {-3, 1, -1, -3, -3, -3},
                              {-3, 1, 3, -3, -3, -3},
                              {-3, -1, 1, -3, 1, -1},
                              {-3, -1, -3, 1, -3, -3},
                              {-3, -3, 1, -3, 3, -3},
                              {-3, 1, 3, 1, -3, -3},
                              {-3, -1, -3, 1, 1, -3},
                              {1, 1, 3, -1, -3, 3},
                              {1, 1, 3, 3, -1, 3},
                              {1, 1, 1, -3, 3, -1},
                              {1, 1, 1, -1, 3, -3},
                              {-3, -1, -1, -1, 3, -1},
                              {-3, -3, -1, 1, -1, -3},
                              {-3, -3, -3, 1, -3, -1},
                              {-3, 1, 1, -3, -1, -3},
                              {-3, 3, -3, 1, 1, -3},
                              {-3, 1, -3, -3, -3, -1},
                              {1, 1, -3, 3, 1, 3},
                              {1, 1, -3, -3, 1, -3},
                              {1, 1, 3, -1, 3, 3},
                              {1, 1, -3, 1, 3, 3},
                              {1, 1, -1, -1, 3, -1},
                              {1, 1, -1, 3, -1, -1},
                              {1, 1, -1, 3, -3, -1},
                              {1, 1, -3, 1, -1, -1}};

static __device__ __constant__ __half d_phi_12[30][12];
static __half                         phi_12[30][12] = {{-3, 1, -3, -3, -3, 3, -3, -1, 1, 1, 1, -3},
                                {-3, 3, 1, -3, 1, 3, -1, -1, 1, 3, 3, 3},
                                {-3, 3, 3, 1, -3, 3, -1, 1, 3, -3, 3, -3},
                                {-3, -3, -1, 3, 3, 3, -3, 3, -3, 1, -1, -3},
                                {-3, -1, -1, 1, 3, 1, 1, -1, 1, -1, -3, 1},
                                {-3, -3, 3, 1, -3, -3, -3, -1, 3, -1, 1, 3},
                                {1, -1, 3, -1, -1, -1, -3, -1, 1, 1, 1, -3},
                                {-1, -3, 3, -1, -3, -3, -3, -1, 1, -1, 1, -3},
                                {-3, -1, 3, 1, -3, -1, -3, 3, 1, 3, 3, 1},
                                {-3, -1, -1, -3, -3, -1, -3, 3, 1, 3, -1, -3},
                                {-3, 3, -3, 3, 3, -3, -1, -1, 3, 3, 1, -3},
                                {-3, -1, -3, -1, -1, -3, 3, 3, -1, -1, 1, -3},
                                {-3, -1, 3, -3, -3, -1, -3, 1, -1, -3, 3, 3},
                                {-3, 1, -1, -1, 3, 3, -3, -1, -1, -3, -1, -3},
                                {1, 3, -3, 1, 3, 3, 3, 1, -1, 1, -1, 3},
                                {-3, 1, 3, -1, -1, -3, -3, -1, -1, 3, 1, -3},
                                {-1, -1, -1, -1, 1, -3, -1, 3, 3, -1, -3, 1},
                                {-1, 1, 1, -1, 1, 3, 3, -1, -1, -3, 1, -3},
                                {-3, 1, 3, 3, -1, -1, -3, 3, 3, -3, 3, -3},
                                {-3, -3, 3, -3, -1, 3, 3, 3, -1, -3, 1, -3},
                                {3, 1, 3, 1, 3, -3, -1, 1, 3, 1, -1, -3},
                                {-3, 3, 1, 3, -3, 1, 1, 1, 1, 3, -3, 3},
                                {-3, 3, 3, 3, -1, -3, -3, -1, -3, 1, 3, -3},
                                {3, -1, -3, 3, -3, -1, 3, 3, 3, -3, -1, -3},
                                {-3, -1, 1, -3, 1, 3, 3, 3, -1, -3, 3, 3},
                                {-3, 3, 1, -1, 3, 3, -3, 1, -1, 1, -1, 1},
                                {-1, 1, 3, -3, 1, -1, 1, -1, -1, -3, 1, -1},
                                {-3, -3, 3, 3, 3, -3, -1, 1, -3, 3, 1, -3},
                                {1, -1, 3, 1, 1, -1, -1, -1, 1, 3, -3, 1},
                                {-3, 3, -3, 3, -3, -3, 3, -1, -1, 1, 3, -3}};

static __device__ __constant__ __half d_phi_18[30][18];
static __half                         phi_18[30][18] = {{-1, 3, -1, -3, 3, 1, -3, -1, 3, -3, -1, -1, 1, 1, 1, -1, -1, -1},
                                {3, -3, 3, -1, 1, 3, -3, -1, -3, -3, -1, -3, 3, 1, -1, 3, -3, 3},
                                {-3, 3, 1, -1, -1, 3, -3, -1, 1, 1, 1, 1, 1, -1, 3, -1, -3, -1},
                                {-3, -3, 3, 3, 3, 1, -3, 1, 3, 3, 1, -3, -3, 3, -1, -3, -1, 1},
                                {1, 1, -1, -1, -3, -1, 1, -3, -3, -3, 1, -3, -1, -1, 1, -1, 3, 1},
                                {3, -3, 1, 1, 3, -1, 1, -1, -1, -3, 1, 1, -1, 3, 3, -3, 3, -1},
                                {-3, 3, -1, 1, 3, 1, -3, -1, 1, 1, -3, 1, 3, 3, -1, -3, -3, -3},
                                {1, 1, -3, 3, 3, 1, 3, -3, 3, -1, 1, 1, -1, 1, -3, -3, -1, 3},
                                {-3, 1, -3, -3, 1, -3, -3, 3, 1, -3, -1, -3, -3, -3, -1, 1, 1, 3},
                                {3, -1, 3, 1, -3, -3, -1, 1, -3, -3, 3, 3, 3, 1, 3, -3, 3, -3},
                                {-3, -3, -3, 1, -3, 3, 1, 1, 3, -3, -3, 1, 3, -1, 3, -3, -3, 3},
                                {-3, -3, 3, 3, 3, -1, -1, -3, -1, -1, -1, 3, 1, -3, -3, -1, 3, -1},
                                {-3, -1, -3, -3, 1, 1, -1, -3, -1, -3, -1, -1, 3, 3, -1, 3, 1, 3},
                                {1, 1, -3, -3, -3, -3, 1, 3, -3, 3, 3, 1, -3, -1, 3, -1, -3, 1},
                                {-3, 3, -1, -3, -1, -3, 1, 1, -3, -3, -1, -1, 3, -3, 1, 3, 1, 1},
                                {3, 1, -3, 1, -3, 3, 3, -1, -3, -3, -1, -3, -3, 3, -3, -1, 1, 3},
                                {-3, -1, -3, -1, -3, 1, 3, -3, -1, 3, 3, 3, 1, -1, -3, 3, -1, -3},
                                {-3, -1, 3, 3, -1, 3, -1, -3, -1, 1, -1, -3, -1, -1, -1, 3, 3, 1},
                                {-3, 1, -3, -1, -1, 3, 1, -3, -3, -3, -1, -3, -3, 1, 1, 1, -1, -1},
                                {3, 3, 3, -3, -1, -3, -1, 3, -1, 1, -1, -3, 1, -3, -3, -1, 3, 3},
                                {-3, 1, 1, -3, 1, 1, 3, -3, -1, -3, -1, 3, -3, 3, -1, -1, -1, -3},
                                {1, -3, -1, -3, 3, 3, -1, -3, 1, -3, -3, -1, -3, -1, 1, 3, 3, 3},
                                {-3, -3, 1, -1, -1, 1, 1, -3, -1, 3, 3, 3, 3, -1, 3, 1, 3, 1},
                                {3, -1, -3, 1, -3, -3, -3, 3, 3, -1, 1, -3, -1, 3, 1, 1, 3, 3},
                                {3, -1, -1, 1, -3, -1, -3, -1, -3, -3, -1, -3, 1, 1, 1, -3, -3, 3},
                                {-3, -3, 1, -3, 3, 3, 3, -1, 3, 1, 1, -3, -3, -3, 3, -3, -1, -1},
                                {-3, -1, -1, -3, 1, -3, 3, -1, -1, -3, 3, 3, -3, -1, 3, -1, -1, -1},
                                {-3, -3, 3, 3, -3, 1, 3, -1, -3, 1, -1, -3, 3, -3, -1, -1, -1, 3},
                                {-1, -3, 1, -3, -3, -3, 1, 1, 3, 3, -3, 3, 3, -3, -1, 3, -3, 1},
                                {-3, 3, 1, -1, -1, -1, -1, 1, -1, 3, 3, -3, -1, 1, 3, -1, 3, -1}};

static __device__ __constant__ __half d_phi_24[30][24];
static __half                         phi_24[30][24] = {{-1, -3, 3, -1, 3, 1, 3, -1, 1, -3, -1, -3, -1, 1, 3, -3, -1, -3, 3, 3, 3, -3, -3, -3},
                                {-1, -3, 3, 1, 1, -3, 1, -3, -3, 1, -3, -1, -1, 3, -3, 3, 3, 3, -3, 1, 3, 3, -3, -3},
                                {-1, -3, -3, 1, -1, -1, -3, 1, 3, -1, -3, -1, -1, -3, 1, 1, 3, 1, -3, -1, -1, 3, -3, -3},
                                {1, -3, 3, -1, -3, -1, 3, 3, 1, -1, 1, 1, 3, -3, -1, -3, -3, -3, -1, 3, -3, -1, -3, -3},
                                {-1, 3, -3, -3, -1, 3, -1, -1, 1, 3, 1, 3, -1, -1, -3, 1, 3, 1, -1, -3, 1, -1, -3, -3},
                                {-3, -1, 1, -3, -3, 1, 1, -3, 3, -1, -1, -3, 1, 3, 1, -1, -3, -1, -3, 1, -3, -3, -3, -3},
                                {-3, 3, 1, 3, -1, 1, -3, 1, -3, 1, -1, -3, -1, -3, -3, -3, -3, -1, -1, -1, 1, 1, -3, -3},
                                {-3, 1, 3, -1, 1, -1, 3, -3, 3, -1, -3, -1, -3, 3, -1, -1, -1, -3, -1, -1, -3, 3, 3, -3},
                                {-3, 1, -3, 3, -1, -1, -1, -3, 3, 1, -1, -3, -1, 1, 3, -1, 1, -1, 1, -3, -3, -3, -3, -3},
                                {1, 1, -1, -3, -1, 1, 1, -3, 1, -1, 1, -3, 3, -3, -3, 3, -1, -3, 1, 3, -3, 1, -3, -3},
                                {-3, -3, -3, -1, 3, -3, 3, 1, 3, 1, -3, -1, -1, -3, 1, 1, 3, 1, -1, -3, 3, 1, 3, -3},
                                {-3, 3, -1, 3, 1, -1, -1, -1, 3, 3, 1, 1, 1, 3, 3, 1, -3, -3, -1, 1, -3, 1, 3, -3},
                                {3, -3, 3, -1, -3, 1, 3, 1, -1, -1, -3, -1, 3, -3, 3, -1, -1, 3, 3, -3, -3, 3, -3, -3},
                                {-3, 3, -1, 3, -1, 3, 3, 1, 1, -3, 1, 3, -3, 3, -3, -3, -1, 1, 3, -3, -1, -1, -3, -3},
                                {-3, 1, -3, -1, -1, 3, 1, 3, -3, 1, -1, 3, 3, -1, -3, 3, -3, -1, -1, -3, -3, -3, 3, -3},
                                {-3, -1, -1, -3, 1, -3, -3, -1, -1, 3, -1, 1, -1, 3, 1, -3, -1, 3, 1, 1, -1, -1, -3, -3},
                                {-3, -3, 1, -1, 3, 3, -3, -1, 1, -1, -1, 1, 1, -1, -1, 3, -3, 1, -3, 1, -1, -1, -1, -3},
                                {3, -1, 3, -1, 1, -3, 1, 1, -3, -3, 3, -3, -1, -1, -1, -1, -1, -3, -3, -1, 1, 1, -3, -3},
                                {-3, 1, -3, 1, -3, -3, 1, -3, 1, -3, -3, -3, -3, -3, 1, -3, -3, 1, 1, -3, 1, 1, -3, -3},
                                {-3, -3, 3, 3, 1, -1, -1, -1, 1, -3, -1, 1, -1, 3, -3, -1, -3, -1, -1, 1, -3, 3, -1, -3},
                                {-3, -3, -1, -1, -1, -3, 1, -1, -3, -1, 3, -3, 1, -3, 3, -3, 3, 3, 1, -1, -1, 1, -3, -3},
                                {3, -1, 1, -1, 3, -3, 1, 1, 3, -1, -3, 3, 1, -3, 3, -1, -1, -1, -1, 1, -3, -3, -3, -3},
                                {-3, 1, -3, 3, -3, 1, -3, 3, 1, -1, -3, -1, -3, -3, -3, -3, 1, 3, -1, 1, 3, 3, 3, -3},
                                {-3, -1, 1, -3, -1, -1, 1, 1, 1, 3, 3, -1, 1, -1, 1, -1, -1, -3, -3, -3, 3, 1, -1, -3},
                                {-3, 3, -1, -3, -1, -1, -1, 3, -1, -1, 3, -3, -1, 3, -3, 3, -3, -1, 3, 1, 1, -1, -3, -3},
                                {-3, 1, -1, -3, -3, -1, 1, -3, -1, -3, 1, 1, -1, 1, 1, 3, 3, 3, -1, 1, -1, 1, -1, -3},
                                {-1, 3, -1, -1, 3, 3, -1, -1, -1, 3, -1, -3, 1, 3, 1, 1, -3, -3, -3, -1, -3, -1, -3, -3},
                                {3, -3, -3, -1, 3, 3, -3, -1, 3, 1, 1, 1, 3, -1, 3, -3, -1, 3, -1, 3, 1, -1, -3, -3},
                                {-3, 1, -3, 1, -3, 1, 1, 3, 1, -3, -3, -1, 1, 3, -1, -3, 3, 1, -1, -3, -3, -3, -3, -3},
                                {3, -3, -1, 1, 3, -1, -1, -3, -1, 3, -1, -3, -1, -3, 3, -1, 3, 1, 1, -3, 3, -3, -3, -3}};

static __device__ __constant__ int d_primeNums[168];
static int                         primeNums[168] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};

static constexpr uint32_t N_TONES_PER_PRB = 12;
static constexpr uint32_t LOWER_BYTE_BMSK = 255;
static constexpr uint32_t LOWER_BIT_BMSK  = 1;
static constexpr uint32_t MU_0_HZ = 15000;
static constexpr float RAD_TO_USEC = 1000000.0/(2.0*M_PI);
static constexpr float MAX_DB   = 99.9; // Maximum reportable SINR/RSSI/RSRP in dB
static constexpr float MIN_DB   =-99.9; // Minimum reportable SINR/RSSI/RSRP in dB
static constexpr float MIN_DB_LIN    = 1.0232929922807537e-10; // pow(10,MIN_DB/10)
static constexpr float FILT_BIAS_LIN = 1.1220184543019633 ; // Bias correction factor for noise filtering (0.5dB)

// Calculate r_base vector
static inline __device__ void LowPaprSeqGen(__half2* rbase, int m_zc, int u, int v)
{
    if(m_zc < 36)
    {
        if(threadIdx.x < m_zc)
        {
            switch(m_zc)
            {
            case 6: {
                rbase[threadIdx.x] = {hcos(__float2half(M_PI) * d_phi_6[u][threadIdx.x] / __float2half(4.0)), hsin(__float2half(M_PI) * d_phi_6[u][threadIdx.x] / __float2half(4.0))};
                break;
            }
            case 12: {
                rbase[threadIdx.x] = {hcos(__float2half(M_PI) * d_phi_12[u][threadIdx.x] / __float2half(4.0)), hsin(__float2half(M_PI) * d_phi_12[u][threadIdx.x] / __float2half(4.0))};
                break;
            }
            case 18: {
                rbase[threadIdx.x] = {hcos(__float2half(M_PI) * d_phi_18[u][threadIdx.x] / __float2half(4.0)), hsin(__float2half(M_PI) * d_phi_18[u][threadIdx.x] / __float2half(4.0))};
                break;
            }
            case 24: {
                rbase[threadIdx.x] = {hcos(__float2half(M_PI) * d_phi_24[u][threadIdx.x] / __float2half(4.0)), hsin(__float2half(M_PI) * d_phi_24[u][threadIdx.x] / __float2half(4.0))};
                break;
            }
            case 30: {
                rbase[threadIdx.x] = {hcos(M_PI * (u + 1) * (threadIdx.x + 1) * (threadIdx.x + 2) / 31.0), -hsin(M_PI * (u + 1) * (threadIdx.x + 1) * (threadIdx.x + 2) / 31.0)};
                break;
            }
            }
        }

        return;
    }
    else
    {
        int idx = 0;
        while(m_zc > d_primeNums[idx])
        {
            idx++;
        }

        idx--;

        float qbar = d_primeNums[idx] * (u + 1) / 31.0;
        float q    = (int)(qbar + 0.5) + (v * (((int)(2 * qbar) & 1) * -2 + 1));
        if(threadIdx.x < m_zc)
        {
            int m              = threadIdx.x % d_primeNums[idx];
            rbase[threadIdx.x] = {__float2half(cos(M_PI * q * m * (m + 1) / d_primeNums[idx])), __float2half(-sin(M_PI * q * m * (m + 1) / d_primeNums[idx]))};
        }
    }
}

static __global__ void
pucchF3RxKernel(pucchF3RxDynDescr_t* pDynDescr)
{
    // Create two tiles within a single warp. These tiles act independently in terms of synchronization and reductions
    auto                      cta  = cg::this_thread_block();
    cg::thread_block_tile<32> tile = cg::tiled_partition<32>(cta);

    uint32_t uci_num = blockIdx.x;

    // Shared memory for each group. This can be optimized later by dynamically launching based on the actual antennas
    // and data/dmrs symbols

    // We alias the dmrs symbols onto the data since we use that before getting any data. Find the max between the two sizes
    // so we don't overrun the buffer
    constexpr uint32_t shm_round = std::max(MAX_DATA_SYMS_F3 * F3_DATA_FETCH_SCS, MAX_DMRS_SYMS_F3 * N_TONES_PER_PRB * F3_MAX_PRBS);

    __shared__ __half2 y_data[F3_GROUPS_PER_BLOCK * shm_round * F3_MAX_RX_ANTENNA];
    __shared__ __half2 y_ch_est[F3_GROUPS_PER_BLOCK * MAX_DMRS_SYMS_F3 * N_TONES_PER_PRB * F3_MAX_PRBS * F3_MAX_RX_ANTENNA]; // 12288
    __shared__ __half2 r_base[F3_GROUPS_PER_BLOCK * F3_MAX_PRBS * N_TONES_PER_PRB];                                          // 768
    __shared__ __half2 x_dmrs[F3_GROUPS_PER_BLOCK * N_TONES_PER_PRB * F3_MAX_PRBS * MAX_DMRS_SYMS_F3];
    __shared__ __half2 z_data[F3_GROUPS_PER_BLOCK * MAX_DATA_SYMS_F3 * F3_MAX_PRBS * N_TONES_PER_PRB]; // 10752
    __shared__ int     cs[F3_GROUPS_PER_BLOCK * F3_MAX_SYMS];
    __shared__ float   ch_first_hop[F3_GROUPS_PER_BLOCK * F3_MAX_PRBS * N_TONES_PER_PRB];
    __shared__ float   ch_second_hop[F3_GROUPS_PER_BLOCK * F3_MAX_PRBS * N_TONES_PER_PRB];
    __shared__ float   eq_first_hop[F3_GROUPS_PER_BLOCK * F3_MAX_PRBS * N_TONES_PER_PRB];
    __shared__ float   eq_second_hop[F3_GROUPS_PER_BLOCK * F3_MAX_PRBS * N_TONES_PER_PRB];
    __shared__ float   rx_energy_reduc[F3_CG_SIZE / 32];
    __shared__ float   rssi_linear_reduc[F3_CG_SIZE / 32];
    __shared__ float   r_tilde_reduc[F3_CG_SIZE / 32];
    __shared__ __half2 sc_corr_reduc[F3_CG_SIZE / 32];

    // Per-group shared memory carveouts
    __half2* uci_data_s        = &y_data[0];
    __half2* uci_dmrs_s        = &y_data[0]; // Aliased
    __half2* uci_x_dmrs        = &x_dmrs[0];
    __half2* uci_r_base        = &r_base[0];
    __half2* uci_ch_est        = &y_ch_est[0];
    __half2* uci_z_data        = &z_data[0];
    __half2* uci_z             = &y_data[0]; // Aliased
    __half2* uci_scrmLLR       = &z_data[0]; // Aliased
    int*     uci_cs            = &cs[0];
    float*   uci_ch_first_hop  = &ch_first_hop[0];
    float*   uci_ch_second_hop = &ch_second_hop[0];
    float*   uci_eq_first_hop  = &eq_first_hop[0];
    float*   uci_eq_second_hop = &eq_second_hop[0];
    __half2  tmp;
    float2   tmpf;

    // UCI data for this group
    auto uci_data = &pDynDescr->uciPrms[uci_num];

    // Moved Gold sequence generations from CPU to GPU
    uint32_t randomSeqScrm[144];
    uint8_t  u[2];
    uint8_t  v[2];
    uint16_t csCommon[F3_MAX_SYMS];

    uint16_t E_tot            = uci_data->E_tot;
    uint16_t dataScramblingId = uci_data->dataScramblingId;
    uint16_t rnti             = uci_data->rnti;
    //descrambling random sequence
    uint16_t round            = ceil(float(E_tot)/32.0);
    int cInit                 = rnti * 32768 + dataScramblingId;
    int seqStart              = 0;
    for(int i = 0; i < round; i++)
    {
        uint32_t g       = descrambling::gold32n(cInit, seqStart);
        randomSeqScrm[i] = g;
        seqStart        += 32;
    }

    //csCommon
    uint16_t pucchHoppingId = uci_data->pucchHoppingId;
    uint16_t slotNum        = uci_data->slotNum;
    uint8_t  startSymTemp   = uci_data->startSym;
    uint8_t  Counter        = 0;
    uint32_t g              = descrambling::gold32n(pucchHoppingId, 112 * slotNum + 8 * startSymTemp);

    for(int i = 0; i < uci_data->nSym; i++)
    {
        if(Counter == 4)
        {
            startSymTemp += 4;
            g             = descrambling::gold32n(pucchHoppingId, 112 * slotNum + 8 * startSymTemp);
            Counter       = 0;
        }

        csCommon[i] = (g >> (Counter * 8) & LOWER_BYTE_BMSK);
        Counter++;
    }

    //u, v
    if(uci_data->groupHopFlag)
    {
        uint32_t g    = descrambling::gold32n(floor(pucchHoppingId / 30.0), 16 * slotNum);
        uint8_t  f_ss = pucchHoppingId % 30;

        // first hop
        uint8_t f_gh  = (g & LOWER_BYTE_BMSK) % 30;
        u[0]          = (f_ss + f_gh) % 30;

        // second hop
        if(uci_data->freqHopFlag)
        {
            f_gh = ((g >> 8) & LOWER_BYTE_BMSK) % 30;
            u[1] = (f_ss + f_gh) % 30;
        } else {
            u[1] = u[0];
        }
    } else {
        uint8_t uTemp = pucchHoppingId % 30;
        u[0]          = uTemp;
        u[1]          = uTemp;
    }

    if(uci_data->sequenceHopFlag)
    {
        uint32_t g = descrambling::gold32n(32 * floor(pucchHoppingId / 30.0) + pucchHoppingId % 30, 2 * slotNum);
        v[0] = g & LOWER_BIT_BMSK;

        if(uci_data->freqHopFlag)
        {
            v[1] = (g >> 1) & LOWER_BIT_BMSK;
        } else {
            v[1] = v[0];
        }
    } else {
        v[0] = 0;
        v[1] = 0;
    }

    // cell idx
    int16_t cellIdx  = uci_data->cellIdx;
    int16_t numRxAnt = pDynDescr->pCellPrms[cellIdx].nRxAnt;

    tensor_ref<const __half2> tDataRx(pDynDescr->pCellPrms[cellIdx].tDataRx.pAddr, pDynDescr->pCellPrms[cellIdx].tDataRx.strides);

    // Lane without our group
    int lane     = cta.thread_rank();
    int dmrs_idx = 0;
    int data_idx = 0;

    uint32_t prb_size = uci_data->prbSize;
    uint32_t tot_scs  = prb_size * N_TONES_PER_PRB;

    constexpr int prbBlockSize = 4;
    constexpr int scsBlockSize = prbBlockSize * N_TONES_PER_PRB;

    // Initialize shared memory
    if(lane < uci_data->nSym)
    {
        uci_cs[lane] = (csCommon[lane] + 0) % 12;
    }

    for(int i = lane; i < F3_MAX_PRBS * N_TONES_PER_PRB; i += F3_CG_SIZE)
    {
        uci_ch_first_hop[lane]  = 0.0;
        uci_ch_second_hop[lane] = 0.0;
    }

    // Load DMRS symbols. The DMRS symbols are loaded first since there are possibly fewer of them total than data
    // symbols, and we need to load the data symbols in blocks to conserve memory. F3 is different than F1 in
    // that the DMRS symbols aren't every other symbol, and instead can be anywhere.
    float rssi_linear_temp = 0;
    
    int check_sym = 0;
    for(int i = lane; i < tot_scs; i += F3_CG_SIZE)
    {
        int firstHopSc = (uci_data->startPrb + uci_data->bwpStart) * N_TONES_PER_PRB + i;
        if(uci_data->freqHopFlag)
        {
            for(int sym = uci_data->startSym; sym < uci_data->startSym + uci_data->nSym / 2; sym++)
            {
                if(uci_data->SetSymDmrs[dmrs_idx] == check_sym)
                {
                    for(int a = 0; a < numRxAnt; a++)
                    {
                        tmp = tDataRx(firstHopSc, sym, a);
                        tmpf = __half22float2(tmp);
                        rssi_linear_temp += tmpf.x*tmpf.x + tmpf.y*tmpf.y;
                        uci_dmrs_s[a * uci_data->nSym_dmrs * tot_scs + dmrs_idx * tot_scs + i] = tmp;
                    }
                    dmrs_idx++;
                }

                check_sym++;
            }

            int secondHopSc = (uci_data->secondHopPrb + uci_data->bwpStart) * N_TONES_PER_PRB + i;
            for(int sym = uci_data->startSym + uci_data->nSym / 2; sym < uci_data->startSym + uci_data->nSym; sym++)
            {
                if(uci_data->SetSymDmrs[dmrs_idx] == check_sym)
                {
                    for(int a = 0; a < numRxAnt; a++)
                    {
                        tmp = tDataRx(secondHopSc, sym, a);
                        tmpf = __half22float2(tmp);
                        rssi_linear_temp += tmpf.x*tmpf.x + tmpf.y*tmpf.y;
                        uci_dmrs_s[a * uci_data->nSym_dmrs * tot_scs + dmrs_idx * tot_scs + i] = tmp;
                    }
                    dmrs_idx++;
                }

                check_sym++;
            }
        }
        else
        {
            for(int sym = uci_data->startSym; sym < uci_data->startSym + uci_data->nSym; sym++)
            {
                if(uci_data->SetSymDmrs[dmrs_idx] == check_sym)
                {
                    for(int a = 0; a < numRxAnt; a++)
                    {
                        tmp = tDataRx(firstHopSc, sym, a);
                        tmpf = __half22float2(tmp);
                        rssi_linear_temp += tmpf.x*tmpf.x + tmpf.y*tmpf.y;
                        uci_dmrs_s[a * uci_data->nSym_dmrs * tot_scs + dmrs_idx * tot_scs + i] = tmp;
                    }

                    dmrs_idx++;
                }

                check_sym++;
            }
        }
    }

    cta.sync();

    rssi_linear_temp = cg::reduce(tile, rssi_linear_temp, cg::plus<float>());

    // Generate the r_base vector in shared memory and make the initial channel estimates
    for(int sym = 0; sym < uci_data->nSym_dmrs; sym++)
    {
        bool firstHop = false;
        if((sym == 0 && !uci_data->AddDmrsFlag) || (sym <= 1 && uci_data->AddDmrsFlag))
        {
            firstHop = true;
        }

        if(firstHop)
        {
            LowPaprSeqGen(uci_r_base, tot_scs, u[0], v[0]);
        }
        else
        {
            if(uci_data->groupHopFlag)
            {
                if(!uci_data->sequenceHopFlag)
                {
                    LowPaprSeqGen(uci_r_base, tot_scs, u[1], v[0]);
                }
                /*else {
          // Commented out printf; TODO add appropriate error checking in setup
          // Should not be possible          
          printf("ERROR! Cannot have !firstHop && groupHopFlag && sequenceHopFlag\n");
        }*/
            }
            else if(!uci_data->sequenceHopFlag)
            {
                LowPaprSeqGen(uci_r_base, tot_scs, u[0], v[0]);
            }
            else if(uci_data->sequenceHopFlag)
            {
                LowPaprSeqGen(uci_r_base, tot_scs, u[0], v[1]);
            }
        }

        cta.sync();

        __half2 x_dmrs;
        for(int i = lane; i < tot_scs; i += F3_CG_SIZE)
        {
            x_dmrs = {cosf(i * (2.0 * (M_PI / 12.0)) * uci_cs[uci_data->SetSymDmrs[sym]]),
                      sinf(i * (2.0 * (M_PI / 12.0)) * uci_cs[uci_data->SetSymDmrs[sym]])};
            x_dmrs = complex_mul(uci_r_base[i], x_dmrs);

            uci_x_dmrs[sym * tot_scs + i] = x_dmrs;

            for(int a = 0; a < numRxAnt; a++)
            {
                uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + i] =
                    complex_conjmul(uci_dmrs_s[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + i], x_dmrs);
            }
        }

        cta.sync();
    }

    // Filter channel estimates in the frequency domain using W* filters. This is done by a GEMV operation
    // where each thread is calculating one inner product from a row in W.
    if(uci_data->prbSize < 4)
    {
        __half2* Ws[3] = {&d_W1[0][0], &d_W2[0][0], &d_W3[0][0]};
        __half2* W     = Ws[uci_data->prbSize - 1];

        for(int a = 0; a < numRxAnt; a++)
        {
            for(int sym = 0; sym < uci_data->nSym_dmrs; sym++)
            {
                __half2 accum = {0.0, 0.0};
                if(lane < tot_scs)
                {
                    for(int sc = 0; sc < tot_scs; sc++)
                    {
                        accum += complex_mul(W[lane * tot_scs + sc], uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + sc]);
                    }
                }

                cta.sync();

                if(lane < tot_scs)
                {
                    uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + lane] = accum;
                }
                cta.sync();
            }
        }
    }
    else
    {
        int first_pass = tot_scs / scsBlockSize;
        int block;

        // Do first set of multiplies on all full blocks
        for(int a = 0; a < numRxAnt; a++)
        {
            for(int sym = 0; sym < uci_data->nSym_dmrs; sym++)
            {
                __half2 accum = {0.0, 0.0};

                // Iterate over all the blocks of 4
                for(block = 0; block < first_pass; block++)
                {
                    if(lane < scsBlockSize)
                    {
                        for(int sc = 0; sc < scsBlockSize; sc++)
                        {
                            accum += complex_mul(d_W4[lane][sc], uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + (block * scsBlockSize) + sc]);
                        }
                    }

                    cta.sync();

                    if(lane < scsBlockSize)
                    {
                        uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + (block * scsBlockSize) + lane] = accum;
                    }
                }

                cta.sync();

                // Now if we have a partial block, do that one here.
                if((block * scsBlockSize < tot_scs) && lane < scsBlockSize)
                {
                    accum = {0.0, 0.0};

                    int start = block * scsBlockSize - (scsBlockSize - (tot_scs - block * scsBlockSize));
                    for(int sc = 0; sc < scsBlockSize; sc++)
                    {
                        accum += complex_mul(d_W4[lane][sc], uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + start + sc]);
                    }

                    cta.sync();

                    uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + start + lane] = accum;

                    cta.sync();
                }
            }
        }
    }

    cta.sync();

    // Derive equalizer coefficients.
  // if (threadIdx.x == 0) {
  //   for (int sc = 0; sc < tot_scs; sc++) {
  //     for (int a = 0; a < pDynDescr->numRxAnt; a++) {
  //       auto tmp = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + sc];
  //       uci_ch_first_hop[sc] += __half2float(tmp.x*tmp.x+tmp.y*tmp.y);
  //     }
  //     uci_eq_first_hop[sc] = (1+uci_data->noiseVar) * 1/(uci_ch_first_hop[sc]+uci_data->noiseVar);
  //   }

  //   if (uci_data->nSym_dmrs >= 2) {
  //     int symNum = uci_data->nSym_dmrs >> 1;
  //     for (int sc = 0; sc < tot_scs; sc++) {
  //       for (int a = 0; a < pDynDescr->numRxAnt; a++) {
  //         auto tmp = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + symNum*tot_scs + sc];
  //         uci_ch_second_hop[sc] += __half2float(tmp.x*tmp.x+tmp.y*tmp.y);
  //       }

  //       uci_eq_second_hop[sc] = (1+uci_data->noiseVar) * 1/(uci_ch_second_hop[sc]+uci_data->noiseVar);
  //     }
  //   }
  // }


    // Calculate RE energy to compare against DTX threshold. A full CTA reduction is performed to compute
    // the total power
    float rx_energy = 0.0;
    float r_tilde   = 0.0;
    int   num_samps = tot_scs * uci_data->nSym_dmrs * numRxAnt;
    for(int tid = lane; tid < num_samps; tid += F3_CG_SIZE)
    {
        rx_energy += __half2float(uci_ch_est[tid].x * uci_ch_est[tid].x + uci_ch_est[tid].y * uci_ch_est[tid].y);
    }

    for(int a = 0; a < numRxAnt; a++)
    {
        for(int sym = 0; sym < uci_data->nSym_dmrs; sym++)
        {
            for(int prb = lane; prb < tot_scs; prb += F3_CG_SIZE)
            {
                auto tmp = uci_dmrs_s[a * uci_data->nSym_dmrs * tot_scs + sym * tot_scs + prb] -
                           complex_mul(uci_x_dmrs[sym * tot_scs + prb], uci_ch_est[a * tot_scs * uci_data->nSym_dmrs + sym * tot_scs + prb]);
                r_tilde += static_cast<float>(tmp.x * tmp.x + tmp.y * tmp.y);
            }
        }
    }

    // Correlate and sum adjacent subcarriers for Timing Advance
    __half2 sum_sc_corr = {0.0,0.0};
    for(int i = lane; i< num_samps; i+=F3_CG_SIZE)
    {
        if(((i+1)%tot_scs)!=0)
        {
            sum_sc_corr += complex_conjmul(uci_ch_est[i+1],uci_ch_est[i]);
        }
    }
    cta.sync();

    sum_sc_corr = cg::reduce(tile, sum_sc_corr, cg::plus<__half2>());
    rx_energy = cg::reduce(tile, rx_energy, cg::plus<float>()) / (float)num_samps;
    r_tilde   = cg::reduce(tile, r_tilde, cg::plus<float>()) / (float)(numRxAnt * uci_data->nSym_dmrs * tot_scs);

    if(tile.thread_rank() == 0)
    {
        rx_energy_reduc[tile.meta_group_rank()]     = rx_energy;
        r_tilde_reduc[tile.meta_group_rank()]       = r_tilde;
        sc_corr_reduc[tile.meta_group_rank()]       = sum_sc_corr;
        rssi_linear_reduc[tile.meta_group_rank()]   = rssi_linear_temp;
    }

    cta.sync();
    
    rx_energy           = 0.0;
    r_tilde             = 0.0;
    rssi_linear_temp    = 0.0;
    sum_sc_corr         = {0.0,0.0};
    if(cta.thread_rank() == 0)
    {
        for(int i = 0; i < F3_CG_SIZE / 32; i++)
        {
            rx_energy           += rx_energy_reduc[i];
            r_tilde             += r_tilde_reduc[i];
            sum_sc_corr         += sc_corr_reduc[i];
            rssi_linear_temp    += rssi_linear_reduc[i];
        }

        r_tilde_reduc[0] = MIN_DB;
        float rsrp_dB    = MIN_DB;
        float rssi_dB    = MIN_DB;
        float sinr_dB    = MIN_DB;
        float taEstMicroSec = 0.0;

        if(rx_energy > MIN_DB_LIN)
        {
            r_tilde *= FILT_BIAS_LIN;
            if (r_tilde > MIN_DB_LIN)
            {
                r_tilde_reduc[0]   = 10 * log10(r_tilde);
            }

            // TA report
            float  angle = atan2f(__half2float(sum_sc_corr.y),__half2float(sum_sc_corr.x));
            uint32_t scs = MU_0_HZ<<pDynDescr->pCellPrms[cellIdx].mu;
            taEstMicroSec = -RAD_TO_USEC*angle/scs;

            rsrp_dB = 10 * log10(rx_energy); // value in dBm
            rssi_dB =  10 * log10(rssi_linear_temp/static_cast<float>(uci_data->nSym_dmrs));
            sinr_dB = rsrp_dB - r_tilde_reduc[0];        
        }

        pDynDescr->pNoiseVar[uci_num]  = r_tilde;

        rx_energy_reduc[0] = rx_energy;
        r_tilde_reduc[1]   = r_tilde; // Store linear version for other threads later

        // SINR report
        pDynDescr->pSinr[uci_num] = std::min({MAX_DB, sinr_dB});

        // RSRP report
        pDynDescr->pRsrp[uci_num] = std::min({MAX_DB, rsrp_dB});

        // RSSI report
        pDynDescr->pRssi[uci_num] = std::min({MAX_DB, rssi_dB});

        // Interference level report 
        pDynDescr->pInterf[uci_num] = std::min({MAX_DB, r_tilde_reduc[0]}); // value in dB

        // TA report
        pDynDescr->pTaEst[uci_num]  = taEstMicroSec;
    }

    cta.sync();

    if(cta.thread_rank() == 0)
    {
        if(rx_energy_reduc[0] < uci_data->DTXthreshold)
        {
            pDynDescr->pDTXflags[uci_num] = 1;
        }
    }

    float noiseVar_est = r_tilde_reduc[1];
    // Derive equalizer coefficients.
    bool TdiModePf3 = true;
    if (threadIdx.x == 0)
    {
        for (int sc = 0; sc < tot_scs; sc++)
        {
            if((TdiModePf3) && (uci_data->nSym_dmrs==4))
            {
                for (int a = 0; a < numRxAnt; a++)
                {
                    auto dmrs0 = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + sc];
                    auto dmrs1 = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + tot_scs + sc];
                    auto tmp  = dmrs0 + dmrs1; //dmrs0+dmrs1
                    uci_ch_first_hop[sc] += (__half2float(tmp.x*tmp.x+tmp.y*tmp.y)/4.0);
                    // average the first two DMRS ChEst and store it back to the first DMRS ChEst
                    uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + sc] = complex_mul(tmp,{0.5,0.0});
                }
            }
            else
            {
                for (int a = 0; a < numRxAnt; a++)
                {
                    auto tmp = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + sc]; //dmrs0
                    uci_ch_first_hop[sc] += __half2float(tmp.x * tmp.x + tmp.y * tmp.y);
                }
            }
            uci_eq_first_hop[sc] = (1.0 + noiseVar_est) / (uci_ch_first_hop[sc] + noiseVar_est);
            
            if(uci_data->nSym_dmrs==2)
            {
                for (int a = 0; a < numRxAnt; a++)
                {
                    auto tmp = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + tot_scs + sc]; //dmrs1
                    uci_ch_second_hop[sc] += __half2float(tmp.x*tmp.x+tmp.y*tmp.y);
                }
                uci_eq_second_hop[sc] = (1.0+noiseVar_est)/(uci_ch_second_hop[sc]+noiseVar_est);
                
#ifdef ENABLE_DEBUG_F3
                    if ((sc==0) && (uci_num==0)){
                        printf("uci_eq_first_hop=%f\n", uci_eq_first_hop[0]);
                        printf("uci_ch_first_hop=%f\n", uci_ch_first_hop[0]);
                        printf("uci_eq_second_hop=%f\n", uci_eq_second_hop[0]);
                        printf("uci_ch_second_hop=%f\n", uci_ch_second_hop[0]);
                    }
#endif
            }   
            else if(uci_data->nSym_dmrs==4)
            {
                if(TdiModePf3)
                {
                    for (int a = 0; a < numRxAnt; a++)
                    {
                        auto dmrs2 = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + 2*tot_scs + sc];
                        auto dmrs3 = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + 3*tot_scs + sc];
                        auto tmp  = dmrs2 + dmrs3; //dmrs2+dmrs3
                        uci_ch_second_hop[sc] += (__half2float(tmp.x*tmp.x+tmp.y*tmp.y)/4.0);
                        // average the last two DMRS ChEst and save back to the third DMRS ChEst.
                        uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + 2*tot_scs + sc] = complex_mul(tmp,{0.5,0.0});
                    }
                }
                else
                {
                    for (int a = 0; a < numRxAnt; a++)
                    {
                        auto tmp = uci_ch_est[a*uci_data->nSym_dmrs*tot_scs + 2*tot_scs + sc]; //dmrs2
                        uci_ch_second_hop[sc] += __half2float(tmp.x * tmp.x + tmp.y * tmp.y);
                    }
                }
                uci_eq_second_hop[sc] = (1.0 + noiseVar_est) / (uci_ch_second_hop[sc] + noiseVar_est);
            }
        }
#ifdef ENABLE_DEBUG_F3
        //////////////////////
        //for debug purpose///
        /////////////////////
        for (int sc = 0; sc < tot_scs; sc++)
        {
            printf("ch first hop = %f\n", uci_ch_first_hop[sc]);
        }
        printf("nSym_dmrs = %d\n", uci_data->nSym_dmrs);
        if(uci_data->nSym_dmrs>=2)
        {
            for (int sc = 0; sc < tot_scs; sc++)
            {
                printf("ch second hop = %f\n", uci_ch_second_hop[sc]);
            }
        }
        //////////////////////////
#endif
    }

    // Now read in all the data symbols and do processing on those. Since there are a large number of data symbols we must do them in blocks
    // to conserve shared memory
    // Assume we're launching with at least 64 threads/block to do this fetching
    int data_blocks = (tot_scs + (F3_DATA_FETCH_SCS - 1)) / tot_scs;
    int startSc = (uci_data->startPrb + uci_data->bwpStart) * N_TONES_PER_PRB;
    for(int dblock = 0; dblock < data_blocks; dblock++)
    {
        data_idx     = 0;
        check_sym    = 0;
        int scs_lane = dblock * F3_DATA_FETCH_SCS + lane;

        if(scs_lane < tot_scs && lane < F3_DATA_FETCH_SCS)
        {
            if(uci_data->freqHopFlag)
            {
                for(int sym = uci_data->startSym; sym < uci_data->startSym + uci_data->nSym / 2; sym++)
                {
                    if(uci_data->SetSymData[data_idx] == check_sym)
                    {
                        for(int a = 0; a < numRxAnt; a++)
                        {
                            uci_data_s[lane * uci_data->nSym_data * numRxAnt + data_idx * numRxAnt + a] = tDataRx(startSc + scs_lane, sym, a);
                        }
                        data_idx++;
                    }

                    check_sym++;
                }

                int secondHopStartSc = (uci_data->secondHopPrb + uci_data->bwpStart) * N_TONES_PER_PRB;
                for(int sym = uci_data->startSym + uci_data->nSym / 2; sym < uci_data->startSym + uci_data->nSym; sym++)
                {
                    if(uci_data->SetSymData[data_idx] == check_sym)
                    {
                        for(int a = 0; a < numRxAnt; a++)
                        {
                            uci_data_s[lane * uci_data->nSym_data * numRxAnt + data_idx * numRxAnt + a] = tDataRx(secondHopStartSc + scs_lane, sym, a);
                        }
                        data_idx++;
                    }

                    check_sym++;
                }
            }
            else
            {
                for(int sym = uci_data->startSym; sym < uci_data->startSym + uci_data->nSym; sym++)
                {
                    if(uci_data->SetSymData[data_idx] == check_sym)
                    {
                        for(int a = 0; a < numRxAnt; a++)
                        {
                            uci_data_s[lane * uci_data->nSym_data * numRxAnt + data_idx * numRxAnt + a] = tDataRx(startSc + scs_lane, sym, a);
                        }
                        data_idx++;
                    }

                    check_sym++;
                }
            }
        }

        cta.sync();

        // Equalize signal in the frequency domain
        if(scs_lane < tot_scs && lane < F3_DATA_FETCH_SCS)
        {
            // First hop
            for(int sym = 0; sym < uci_data->nSym_data / 2; sym++)
            {
                __half2 accum = {0.0, 0.0};
                for(int a = 0; a < numRxAnt; a++)
                {
                    accum += complex_conjmul(uci_data_s[lane * uci_data->nSym_data * numRxAnt + sym * numRxAnt + a], uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + scs_lane]);
                }

                uci_z_data[sym * tot_scs + scs_lane] = {accum.x * __float2half(uci_eq_first_hop[scs_lane]), accum.y * __float2half(uci_eq_first_hop[scs_lane])};
            }

            // Second hop
            for(int sym = uci_data->nSym_data / 2; sym < uci_data->nSym_data; sym++)
            {
                __half2 accum = {0.0, 0.0};
                if(uci_data->nSym_dmrs == 1)
                {
                    for(int a = 0; a < numRxAnt; a++)
                    {
                        accum += complex_conjmul(uci_data_s[lane * uci_data->nSym_data * numRxAnt + sym * numRxAnt + a], uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + scs_lane]);
                    }

                    uci_z_data[sym * tot_scs + scs_lane] = {accum.x * __float2half(uci_eq_first_hop[scs_lane]), accum.y * __float2half(uci_eq_first_hop[scs_lane])};
                }
                else
                {
                    int symNum = uci_data->nSym_dmrs >> 1;
                    for(int a = 0; a < numRxAnt; a++)
                    {
                        // Use the second symbol
                        accum += complex_conjmul(uci_data_s[lane * uci_data->nSym_data * numRxAnt + sym * numRxAnt + a], uci_ch_est[a * uci_data->nSym_dmrs * tot_scs + symNum * tot_scs + scs_lane]);
                    }

                    uci_z_data[sym * tot_scs + scs_lane] = {accum.x * __float2half(uci_eq_second_hop[scs_lane]), accum.y * __float2half(uci_eq_second_hop[scs_lane])};
                }
            }
        }

        cta.sync();
    }

    cta.sync();

    // Do an IDFT on each symbol's subcarrier data.
    for(int i = lane; i < tot_scs * uci_data->nSym_data; i += F3_CG_SIZE)
    {
        int symnum = i / tot_scs;
        int fftidx = i % tot_scs;

        __half2 accum = {0.0, 0.0};
        for(int sc = 0; sc < tot_scs; sc++)
        {
            __half2 tmp = {hcos(2 * M_PI / tot_scs * fftidx * sc), hsin(2 * M_PI / tot_scs * fftidx * sc)};
            accum += complex_mul(uci_z_data[symnum * tot_scs + sc], tmp);
        }

        uci_z[symnum * tot_scs + fftidx] = {accum.x * __float2half(sqrtf(tot_scs) / tot_scs), accum.y * __float2half(sqrtf(tot_scs) / tot_scs)};
    }

    cta.sync();

    // Demodulate
    if(uci_data->pi2Bpsk)
    {
        __half* out = reinterpret_cast<__half*>(&uci_scrmLLR[0]);
        for(int i = lane; i < tot_scs * uci_data->nSym_data; i += F3_CG_SIZE)
        {
            __half2 tmp = complex_mul({1, -1}, uci_z[i]);
            __half* ri  = (__half*)(&tmp) + (i % 2);
            out[i]      = __float2half(2.0 / sqrtf(2.0) * __half2float(*ri) / noiseVar_est);
        }
    }
    else
    {
        for(int i = lane; i < tot_scs * uci_data->nSym_data; i += F3_CG_SIZE)
        {
            uci_scrmLLR[i].x = __float2half(2.0 * __half2float(uci_z[i].x) / noiseVar_est);
            uci_scrmLLR[i].y = __float2half(2.0 * __half2float(uci_z[i].y) / noiseVar_est);
        }
    }

    cta.sync();
    
#ifdef ENABLE_DEBUG_F3
        if (uci_num==0)
        {
            for(int ii = 0; ii<tot_scs * uci_data->nSym_data; ii += F3_CG_SIZE)
            {
                printf("uci_scrmLLR = %f, ", __half2float(uci_scrmLLR[ii].x));
            }
        }
#endif
    // Write output values to global for next kernel
    for (int i = lane; i < uci_data->E_tot; i += F3_CG_SIZE) {
        int      idx                            = i / 32;
        uint32_t off                            = i % 32;
        __half*  scrm                           = reinterpret_cast<__half*>(&uci_scrmLLR[0]) + i;
        pDynDescr->pDescramLLRaddrs[uci_num][i] = __hmul((__half)(1 - 2 * ((randomSeqScrm[idx] & (1U << off)) > 0)), *scrm);
    }

    if(threadIdx.x == 0)
    {
        pDynDescr->pDTXflags[uci_num] = 0;
    }
}

} // namespace pucch_F3

using namespace pucch_F3;

/**
 * Loads the constant tables into constant memory
 */
void pucchF3Rx::InitConstantMem(cudaStream_t strm)
{
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_W1, W1, sizeof(W1), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_W2, W2, sizeof(W2), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_W3, W3, sizeof(W3), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_W4, W4, sizeof(W4), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_phi_6, phi_6, sizeof(phi_6), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_phi_12, phi_12, sizeof(phi_12), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_phi_18, phi_18, sizeof(phi_18), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_phi_24, phi_24, sizeof(phi_24), 0, cudaMemcpyHostToDevice, strm));
    CUDA_CHECK(cudaMemcpyToSymbolAsync(d_primeNums, primeNums, sizeof(primeNums), 0, cudaMemcpyHostToDevice, strm));
}

pucchF3Rx::pucchF3Rx(cudaStream_t strm)
{
   {
      std::lock_guard<std::mutex> lockGaurdConstMemInit(m_mutexConstMemInit);
      if(~isConstMemInited)
      {
         isConstMemInited = true;
         InitConstantMem(strm);
      }
   }
}

 void  pucchF3Rx::kernelSelect(uint16_t           nUcis,
                               pucchF3RxDynDescr_t*     pCpuDynDesc,
                               cuphyPucchF3RxLaunchCfg_t* pLaunchCfg)
{
  // kernel (only one kernel option for now)
  void* kernelFunc = reinterpret_cast<void*>(pucchF3RxKernel);
  CUDA_CHECK(cudaGetFuncBySymbol(&pLaunchCfg->kernelNodeParamsDriver.func, kernelFunc));

  // launch geometry (can change!)
  dim3 gridDim(nUcis);
  dim3 blockDim(F3_CG_SIZE);

  // populate kernel parameters
  CUDA_KERNEL_NODE_PARAMS& kernelNodeParamsDriver = pLaunchCfg->kernelNodeParamsDriver;

  kernelNodeParamsDriver.blockDimX = blockDim.x;
  kernelNodeParamsDriver.blockDimY = blockDim.y;
  kernelNodeParamsDriver.blockDimZ = blockDim.z;

  kernelNodeParamsDriver.gridDimX = gridDim.x;
  kernelNodeParamsDriver.gridDimY = gridDim.y;
  kernelNodeParamsDriver.gridDimZ = gridDim.z;

  kernelNodeParamsDriver.extra      = nullptr;
  kernelNodeParamsDriver.sharedMemBytes = 0;
}

void pucchF3Rx::setup(cuphyTensorPrm_t*          pDataRx, // input slot buffer
                      __half**                   pDescramLLRaddrs,
                      uint8_t*                   pDTXflags,
                      float*                     pSinr,
                      float*                     pRssi,
                      float*                     pRsrp,
                      float*                     pInterf,
                      float*                     pNoiseVar,
                      float*                     pTaEst,
                      uint16_t                   nCells, // number of cells
                      uint16_t                   nF3Ucis,
                      cuphyPucchUciPrm_t*        pF3UciPrms,
                      cuphyPucchCellPrm_t*       pCmnCellPrms, // number of antennas, slot number, hopping idx and input slot buffer
                      bool                       enableCpuToGpuDescrAsyncCpy,
                      pucchF3RxDynDescr_t*       pCpuDynDesc, // pointer to descriptor in cpu
                      void*                      pGpuDynDesc, // pointer to descriptor in gpu
                      cuphyPucchF3RxLaunchCfg_t* pLaunchCfg,  // pointer to launch configuration
                      cudaStream_t               strm)                      // stream to perform copy
{
    pCpuDynDesc->pCellPrms = pCmnCellPrms;
    if(CUPHY_PUCCH_F3_MAX_UCI < nF3Ucis)
    {
        NVLOGE_FMT(NVLOG_PUCCH, AERIAL_CUPHY_EVENT, "Number of PF3 UCIs {} is more than max allocation ({}).  Dropping additional UCIs.",nF3Ucis,CUPHY_PUCCH_F3_MAX_UCI);
        nF3Ucis = CUPHY_PUCCH_F3_MAX_UCI;
    }
    pCpuDynDesc->numUcis   = nF3Ucis;

    for(int uciIdx = 0; uciIdx < nF3Ucis; ++uciIdx)
    {
        uint16_t cellIdx        = pF3UciPrms[uciIdx].cellPrmDynIdx;
        uint8_t nSym            = pF3UciPrms[uciIdx].nSym;
        uint8_t freqHopFlag     = pF3UciPrms[uciIdx].freqHopFlag;
        uint8_t AddDmrsFlag     = pF3UciPrms[uciIdx].AddDmrsFlag;
        uint8_t prbSize         = pF3UciPrms[uciIdx].prbSize;
        uint8_t pi2Bpsk         = pF3UciPrms[uciIdx].pi2Bpsk;
        uint8_t startSym        = pF3UciPrms[uciIdx].startSym;
        uint8_t groupHopFlag    = pF3UciPrms[uciIdx].groupHopFlag;
        uint8_t sequenceHopFlag = pF3UciPrms[uciIdx].sequenceHopFlag;
        uint8_t nSym_data       = 0;
        uint8_t nSym_dmrs = 0;

        //PF3 parameters
        switch(int(nSym))
        {
        case 4:
            if(freqHopFlag)
            {
                nSym_data = 2;
                std::copy(std::begin(SetSymData_4_f), std::end(SetSymData_4_f), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_4_f), std::end(SetSymDmrs_4_f), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            else
            {
                nSym_data = 3;
                std::copy(std::begin(SetSymData_4), std::end(SetSymData_4), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_4), std::end(SetSymDmrs_4), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            break;
        case 5:
            nSym_data = nSym - 2;
            std::copy(std::begin(SetSymData_5), std::end(SetSymData_5), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
            std::copy(std::begin(SetSymDmrs_5), std::end(SetSymDmrs_5), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            break;
        case 6:
            nSym_data = nSym - 2;
            std::copy(std::begin(SetSymData_6), std::end(SetSymData_6), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
            std::copy(std::begin(SetSymDmrs_6), std::end(SetSymDmrs_6), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            break;
        case 7:
            nSym_data = nSym - 2;
            std::copy(std::begin(SetSymData_7), std::end(SetSymData_7), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
            std::copy(std::begin(SetSymDmrs_7), std::end(SetSymDmrs_7), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            break;
        case 8:
            nSym_data = nSym - 2;
            std::copy(std::begin(SetSymData_8), std::end(SetSymData_8), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
            std::copy(std::begin(SetSymDmrs_8), std::end(SetSymDmrs_8), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            break;
        case 9:
            nSym_data = nSym - 2;
            std::copy(std::begin(SetSymData_9), std::end(SetSymData_9), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
            std::copy(std::begin(SetSymDmrs_9), std::end(SetSymDmrs_9), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            break;
        case 10:
            if(AddDmrsFlag)
            {
                nSym_data = nSym - 4;
                std::copy(std::begin(SetSymData_10_add), std::end(SetSymData_10_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_10_add), std::end(SetSymDmrs_10_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            else
            {
                nSym_data = nSym - 2;
                std::copy(std::begin(SetSymData_10), std::end(SetSymData_10), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_10), std::end(SetSymDmrs_10), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            break;
        case 11:
            if(AddDmrsFlag)
            {
                nSym_data = nSym - 4;
                std::copy(std::begin(SetSymData_11_add), std::end(SetSymData_11_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_11_add), std::end(SetSymDmrs_11_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            else
            {
                nSym_data = nSym - 2;
                std::copy(std::begin(SetSymData_11), std::end(SetSymData_11), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_11), std::end(SetSymDmrs_11), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            break;
        case 12:
            if(AddDmrsFlag)
            {
                nSym_data = nSym - 4;
                std::copy(std::begin(SetSymData_12_add), std::end(SetSymData_12_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_12_add), std::end(SetSymDmrs_12_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            else
            {
                nSym_data = nSym - 2;
                std::copy(std::begin(SetSymData_12), std::end(SetSymData_12), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_12), std::end(SetSymDmrs_12), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            break;
        case 13:
            if(AddDmrsFlag)
            {
                nSym_data = nSym - 4;
                std::copy(std::begin(SetSymData_13_add), std::end(SetSymData_13_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_13_add), std::end(SetSymDmrs_13_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            else
            {
                nSym_data = nSym - 2;
                std::copy(std::begin(SetSymData_13), std::end(SetSymData_13), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_13), std::end(SetSymDmrs_13), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            break;
        case 14:
            if(AddDmrsFlag)
            {
                nSym_data = nSym - 4;
                std::copy(std::begin(SetSymData_14_add), std::end(SetSymData_14_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_14_add), std::end(SetSymDmrs_14_add), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            else
            {
                nSym_data = nSym - 2;
                std::copy(std::begin(SetSymData_14), std::end(SetSymData_14), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymData));
                std::copy(std::begin(SetSymDmrs_14), std::end(SetSymDmrs_14), std::begin(pCpuDynDesc->uciPrms[uciIdx].SetSymDmrs));
            }
            break;
        default:
            throw std::out_of_range(fmt::format("Invalid number of symbols ({}) for PUCCH format 3",nSym));
        }
        nSym_dmrs                                     = nSym - nSym_data;

        pCpuDynDesc->uciPrms[uciIdx].freqHopFlag      = freqHopFlag;
        pCpuDynDesc->uciPrms[uciIdx].bwpStart         = pF3UciPrms[uciIdx].bwpStart;
        pCpuDynDesc->uciPrms[uciIdx].startSym         = startSym;
        pCpuDynDesc->uciPrms[uciIdx].startPrb         = pF3UciPrms[uciIdx].startPrb;
        pCpuDynDesc->uciPrms[uciIdx].nSym             = nSym;
        pCpuDynDesc->uciPrms[uciIdx].groupHopFlag     = groupHopFlag;
        pCpuDynDesc->uciPrms[uciIdx].sequenceHopFlag  = sequenceHopFlag;
        pCpuDynDesc->uciPrms[uciIdx].secondHopPrb     = pF3UciPrms[uciIdx].secondHopPrb;
        pCpuDynDesc->uciPrms[uciIdx].pi2Bpsk          = pi2Bpsk;
        pCpuDynDesc->uciPrms[uciIdx].prbSize          = prbSize;
        pCpuDynDesc->uciPrms[uciIdx].AddDmrsFlag      = AddDmrsFlag;
        pCpuDynDesc->uciPrms[uciIdx].noiseVar         = 0.0001;
        pCpuDynDesc->uciPrms[uciIdx].nSym_data        = nSym_data;
        pCpuDynDesc->uciPrms[uciIdx].nSym_dmrs        = nSym_dmrs;
        pCpuDynDesc->uciPrms[uciIdx].uciOutputIdx     = pF3UciPrms[uciIdx].uciOutputIdx;
        pCpuDynDesc->uciPrms[uciIdx].dataScramblingId = pF3UciPrms[uciIdx].dataScramblingId;
        pCpuDynDesc->uciPrms[uciIdx].rnti             = pF3UciPrms[uciIdx].rnti;
        pCpuDynDesc->uciPrms[uciIdx].slotNum          = pCmnCellPrms[cellIdx].slotNum;
        pCpuDynDesc->uciPrms[uciIdx].pucchHoppingId   = pCmnCellPrms[cellIdx].pucchHoppingId;

        uint16_t E_tot  = 0;
        uint8_t  nBitsPerRe = pi2Bpsk == 1? 1 : 2;

        E_tot = nBitsPerRe * 12 * nSym_data * prbSize;

        pCpuDynDesc->uciPrms[uciIdx].E_tot = E_tot;

        float extDTXthreshold = pF3UciPrms[uciIdx].DTXthreshold;

        if(extDTXthreshold == CUPHY_DEFAULT_EXT_DTX_THRESHOLD)
        {
            pCpuDynDesc->uciPrms[uciIdx].DTXthreshold = defF3DTXthreshold;
        }
        else
        {
            pCpuDynDesc->uciPrms[uciIdx].DTXthreshold = extDTXthreshold;
        }

        // cell index
        pCpuDynDesc->uciPrms[uciIdx].cellIdx = cellIdx;
    }

    for (uint16_t i = 0; i < nCells; i++)
    {
        copyTensorPrm2Info(pDataRx[i], pCpuDynDesc->pCellPrms[i].tDataRx);
    }

    for(int uciIdx = 0; uciIdx < nF3Ucis; ++uciIdx)
    {
        pCpuDynDesc->pDescramLLRaddrs[uciIdx] = pDescramLLRaddrs[uciIdx];
    }
    pCpuDynDesc->pDTXflags = pDTXflags;
    pCpuDynDesc->pSinr     = pSinr;
    pCpuDynDesc->pRssi     = pRssi;
    pCpuDynDesc->pRsrp     = pRsrp;
    pCpuDynDesc->pInterf   = pInterf;
    pCpuDynDesc->pNoiseVar = pNoiseVar;
    pCpuDynDesc->pTaEst    = pTaEst;

    pucchF3KernelArgs_t& kernelArgs = m_kernelArgs;
    kernelArgs.pDynDescr            = reinterpret_cast<pucchF3RxDynDescr_t*>(pGpuDynDesc);

    // Optional descriptor copy to GPU memory
    if(enableCpuToGpuDescrAsyncCpy)
    {
    cudaMemcpyAsync(pGpuDynDesc, pCpuDynDesc, sizeof(pucchF3RxDynDescr_t), cudaMemcpyHostToDevice, strm);
    }

    // select kernel (includes launch geometry). Populate launchCfg.
    kernelSelect(nF3Ucis, pCpuDynDesc, pLaunchCfg);
    pLaunchCfg->kernelArgs[0]                       = &m_kernelArgs.pDynDescr;
    pLaunchCfg->kernelNodeParamsDriver.kernelParams = &(pLaunchCfg->kernelArgs[0]);
}

void pucchF3Rx::getDescrInfo(size_t& dynDescrSizeBytes, size_t& dynDescrAlignBytes)
{
   dynDescrSizeBytes  = sizeof(pucchF3RxDynDescr_t);
   dynDescrAlignBytes = alignof(pucchF3RxDynDescr_t);
}

