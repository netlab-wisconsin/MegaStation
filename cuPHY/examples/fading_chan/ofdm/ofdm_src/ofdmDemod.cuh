/*
 * Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
 *
 * NVIDIA CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA CORPORATION is strictly prohibited.
 */

#pragma once
#include <vector>
#include "cuphy_internal.h"
#include "cuphy.hpp"
#include <iostream>
#include <numeric>
#include <random>
#include <cuComplex.h>
#include <cuda_fp16.h>
#include <cmath>
#include "ofdmCommonFunc.h"

namespace ofdm_demodulate
{

//--------------------------------------------------------------------------------------------------------
// OFDM demodulation

/**
 * @brief dynamic descriptor for OFDM demodulation
 *
 * @param sqrt_N_FFT_inverse: for normalized of fft output, calculated on CPU, used on GPU
 * @param cpInfo: lengthï¼š2*N_symble_slot; first N_symble_slot containes the CP len for each symbol, second N_symble_slot contains the accumulated CP len including this symbol
 * @param timeDateIn: length controlled by ofdmDemod class, (N_symbol_slot * N_FFT + totalCP) * N_rxLayer
 * @param freqDataOut: length controlled by ofdmDemod class, N_symbol_slot * N_sc * N_rxLayer
 */

template <typename Tscalar, typename Tcomplex>
struct ofdmDeModDynDescr_t{
    uint N_FFT;
    float sqrt_N_FFT_inverse;
    uint16_t N_symble_slot;
    uint16_t * cpInfo;
    uint N_sc;
    uint mu;
    uint16_t N_rxLayer;
    Tcomplex * timeDataIn;
    Tcomplex * freqDataOut;
    uint32_t N_samp_slot;

    // PRACH parameters
    uint32_t preambleSampStart;
    uint32_t preambleSampEnd;
    uint32_t Nfft_RA;
    uint32_t Nrep;
    uint32_t cpLenPrach;
    uint32_t L_RA;
    uint32_t startSC;
    uint32_t Nsamp_oran;
    uint32_t kBar;
};

/**
 * @brief OFDM demodulation class
 * remove CP, perform ofdm demodulation (FFT) using cuFFTdx
 * @todo __half16 not tested
 */

template <typename Tscalar, typename Tcomplex> 
class ofdmDeModulate
{
public:
    /**
     * @brief Construct a new ofdm demodulation object
     * 
     * @param cuphyCarrierPrms carrier info
     * @param timeDataIn GPU memory address of rx time signal with CP, ofdmDemod does not check size
     * @param freqDataOut GPU memory address of rx freq signal after removing CP and fft, ofdmDemod does not check size
     * @param prach indicator for PRACH or not
     * @param strm cuda stream to run ofdm demodulation
     */
    ofdmDeModulate(cuphyCarrierPrms_t * cuphyCarrierPrms, Tcomplex * timeDataIn, Tcomplex * freqDataOut, bool prach, cudaStream_t strm);
    ~ofdmDeModulate();
    ofdmDeModulate(ofdmDeModulate const&) = delete;
    ofdmDeModulate& operator=(ofdmDeModulate const&) = delete;

    /**
     * @brief run kernel to remove CP and perform FFT
     * use N_rxlayer * N_symbol_slot/OFDM_FFTs_PER_BLOCK_CONST_ thread blocks to perform OFDM demodulation (FFT)
     *  thread block dims are auto generated by cuFFTdx
     * @param strm cuda stream to run, recommand be the same with config strm for synchronization
     */
    void run(cudaStream_t strm);

    /**
     * @brief print sample time signals
     * 
     * @param printLen length of samples to print, 10 by defualt
     */
    void printFreqSample(int printLen = 10); 

    /**
     * @brief Get the Freq Data Out object
     * 
     * @return Tcomplex* GPU memory adress for rx freq samples
     */
    Tcomplex * getFreqDataOut() {return m_ofdmDeModdynDescprCpu -> freqDataOut; } 
private:
    // dynamic descriptors for CPU and GPU
    ofdmDeModDynDescr_t<Tscalar, Tcomplex> * m_ofdmDeModdynDescprCpu;
    ofdmDeModDynDescr_t<Tscalar, Tcomplex> * m_ofdmDeModdynDescprGpu;
    launchCfg_t*    m_pLaunchCfg; // lauch kernel config
    // CP info for CPU and GPU
    uint16_t * m_cpInfoCpu; 
    uint16_t * m_cpInfoGpu;

    // indicator for PRACH
    bool m_prach;

    void determinePrachParam(cuphyCarrierPrms_t* cuphyCarrierPrms);
};

// Explicitly instantiate the template to resovle "undefined functions"
    template class ofdmDeModulate<__half, __half2>;
    template class ofdmDeModulate<float, cuComplex>; 
} // end of namespace ofdm_demodulate