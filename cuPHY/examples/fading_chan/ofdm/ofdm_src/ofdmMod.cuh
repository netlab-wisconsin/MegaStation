/*
 * Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
 *
 * NVIDIA CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA CORPORATION is strictly prohibited.
 */
#pragma once
#include <vector>
#include "cuphy_internal.h"
#include "cuphy.hpp"
#include <iostream>
#include <numeric>
#include <random>
#include <cuComplex.h>
#include <cuda_fp16.h>

#include "ofdmCommonFunc.h"

namespace ofdm_modulate
{

//--------------------------------------------------------------------------------------------------------
// OFDM modulation

/**
 * @brief dynamic descriptor for OFDM modulation
 *
 * @param sqrt_N_IFFT_inverse: for normalized of ifft output, calculated on CPU, used on GPU
 * @param cpInfo: lengthï¼š2*N_symble_slot; first N_symble_slot containes the CP len for each symbol, second N_symble_slot contains the accumulated CP len including this symbol
 * @param freqDataIn: length controlled by ofdmMod class, N_symbol_slot * N_sc * N_txLayer
 * @param timeDataOut: length controlled by ofdmMod class, (N_symbol_slot * N_FFT + totalCP) * N_txLayer
 *
 * @todo OFDM windowing implemented, not tested yet, DO NOT USE (keep ofdmWindowLen = 0)
 */
template <typename Tscalar, typename Tcomplex> 
struct ofdmModDynDescr_t{
    uint N_IFFT;
    float sqrt_N_IFFT_inverse;
    int N_symble_slot;
    uint16_t * cpInfo;
    uint N_sc;
    uint mu;
    uint16_t N_txLayer;
    uint ofdmWindowLen;
    Tscalar * ofdmWindowCoe;
    Tcomplex * freqDataIn;
    Tcomplex * timeDataOut;
};

/**
 * @brief OFDM modulation class
 * perform ofdm modulation (IFFT) using cuFFTdx and add CP
 * output GPU buffer will be auto generated
 * @todo __half16 not tested, apply windowing 
 */
template <typename Tscalar, typename Tcomplex> 
class ofdmModulate
{
public:
    /**
     * @brief Construct a new ofdm Modulate object
     * 
     * @param cuphyCarrierPrms  carrier info
     * @param freqDataIn GPU memory address of tx freq signal ofdmMod does not check size
     * @param strm cuda stream to run ofdm demodulation 
     */
    ofdmModulate(cuphyCarrierPrms_t * cuphyCarrierPrms, Tcomplex * freqDataIn, cudaStream_t strm);
    ~ofdmModulate();
    ofdmModulate(ofdmModulate const&) = delete;
    ofdmModulate& operator=(ofdmModulate const&) = delete;

    /**
     * @brief run kernel to perform IFFT and add CP
     * use N_txlayer * N_symbol_slot/OFDM_FFTs_PER_BLOCK_CONST_ thread blocks to perform OFDM demodulation (FFT)
     *  thread block dims are auto generated by cuFFTdx
     * 
     * @param strm cuda stream to run, recommand be the same with config strm for synchronization
     */
    void run(cudaStream_t strm);  // run kernel

    /**
     * @brief print sample time signals
     * 
     * @param printLen length of samples to print, 10 by defualt
     */
    void printTimeSample(int printLen = 10); // print sample time signals

    /**
     * @brief Get the tx Time Data Out object
     * 
     * @return Tcomplex* 
     */
    Tcomplex * getTimeDataOut() {return m_ofdmModdynDescprCpu -> timeDataOut; } 

    /**
     * @brief Get the total tx Time Date Len object
     * 
     * @return uint 
     */
    uint getTimeDateLen() {return m_timeDataLen;}
private:
    // dynamic descriptors for CPU and GPU
    ofdmModDynDescr_t<Tscalar, Tcomplex> * m_ofdmModdynDescprCpu;
    ofdmModDynDescr_t<Tscalar, Tcomplex> * m_ofdmModdynDescprGpu;
    launchCfg_t*    m_pOfdmModCfg; // lauch ofdm modulation kernel config
    launchCfg_t*    m_pWindowCfg; // lauch apply windowing kernel config
    // CP info for CPU and GPU
    uint16_t * m_cpInfoCpu;
    uint16_t * m_cpInfoGpu;
    // windowing coefficient (currently rcos) for CPU and GPU
    Tscalar * m_ofdmWindowCpu;
    Tscalar * m_ofdmWindowGpu;
    uint m_timeDataLen; // length of tx time samples
};

// Explicitly instantiate the template to resovle "undefined functions"
    template class ofdmModulate<__half, __half2>;
    template class ofdmModulate<float, cuComplex>; 
} // end of namespace ofdm_modulate


